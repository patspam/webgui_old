{"classmap": {"YAHOO.widget.MenuModule": {"name": "YAHOO.widget.MenuModule", "deprecated": "As of version 0.12, all MenuModule functionality has been \nimplemented directly in YAHOO.widget.Menu, making YAHOO.widget.Menu the base \nclass for all menuing containers.", "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the menu module."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element to be used as the data source for the \nmenu module."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\n\/level-one-html.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;div&#62;<\/code> element of the menu module."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-94282980\">HTMLSelectElement<\/a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;select&#62;<\/code> element to be used as the data \nsource for the menu module."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu module. See configuration class documentation for \nmore details."}], "description": "The base class for all menuing containers."}], "namespace": "YAHOO.widget", "module": "menu", "guessedname": "MenuModule", "extends": "YAHOO.widget.Overlay", "superclass": "YAHOO.widget.Overlay", "file": "menumodule.js", "guessedtype": "property", "shortname": "MenuModule", "description": "The base class for all menuing containers."}, "YAHOO.util.Config": {"name": "YAHOO.util.Config", "constructors": [{"params": [{"type": "Object", "name": "owner", "description": "\tThe owner Object to which this Config Object belongs"}], "description": "Config is a utility used within an Object to allow the implementer to maintain a list of local configuration properties and listen for changes to those properties dynamically using CustomEvent. The initial values are also maintained so that the configuration can be reset at any given point to its initial state."}], "namespace": "YAHOO.util", "module": "container", "events": {"configChangedEvent": {"description": "Object reference to the owner of this Config Object", "guessedname": "configChangedEvent", "guessedtype": "property"}}, "guessedname": "Config", "methods": {"fireQueue": {"description": "Fires the normalized list of queued property change events", "guessedname": "fireQueue", "guessedtype": "function"}, "YAHOO.util.Config.alreadySubscribed": {"return": {"type": "Boolean", "description": "true, if the function\/Object pair is already subscribed to the CustomEvent passed in"}, "description": "Checks to determine if a particular function\/Object pair are already subscribed to the specified CustomEvent", "static": "", "guessedname": "alreadySubscribed", "guessedtype": "function", "params": [{"type": "YAHOO.util.CustomEvent", "name": "evt", "description": "\tThe CustomEvent for which to check the subscriptions"}, {"type": "Function", "name": "fn", "description": "\tThe function to look for in the subscribers list"}, {"type": "Object", "name": "obj", "description": "\tThe execution scope Object for the subscription"}]}, "getProperty": {"return": {"type": "Object", "description": "The value of the specified property"}, "params": [{"type": "String", "name": "key", "description": "\tThe name of the property"}], "description": "Returns the value of specified property.", "guessedname": "getProperty", "guessedtype": "function"}, "addProperty": {"params": [{"type": "String", "name": "key", "description": "\tThe configuration property's name"}, {"type": "Object", "name": "propertyObject", "description": "\tThe Object containing all of this property's arguments"}], "description": "Adds a property to the Config Object's private config hash.", "guessedname": "addProperty", "guessedtype": "function"}, "queueProperty": {"return": {"type": "Boolean", "description": "true, if the set was successful, false if it failed."}, "params": [{"type": "String", "name": "key", "description": "\tThe name of the property"}, {"type": "String", "name": "value", "description": "\tThe value to set the property to"}], "description": "Sets the value of a property and queues its event to execute. If the event is already scheduled to execute, it is\nmoved from its current position to the end of the queue.", "guessedname": "queueProperty", "guessedtype": "function"}, "checkNumber": {"return": {"type": "Boolean", "description": "true, if the value is valid"}, "params": [{"type": "Object", "name": "val", "description": "\tThe value to validate"}], "description": "Validates that the value passed in is a number.", "guessedname": "checkNumber", "guessedtype": "function"}, "outputEventQueue": {"return": {"type": "String", "description": "The string list of CustomEvents currently queued for execution"}, "description": "Returns a string representation of the Config object's current CustomEvent queue", "guessedname": "outputEventQueue", "guessedtype": "function"}, "resetProperty": {"return": {"type": "Boolean", "description": "True is the property was reset, false if not"}, "params": [{"type": "String", "name": "key", "description": "\tThe name of the property"}], "description": "Resets the specified property's value to its initial value.", "guessedname": "resetProperty", "guessedtype": "function"}, "applyConfig": {"params": [{"type": "Object", "name": "userConfig", "description": "\tThe configuration Object literal"}, {"type": "Boolean", "name": "init", "description": "\t\tWhen set to true, the initialConfig will be set to the userConfig passed in, so that calling a reset will reset the properties to the passed values."}], "description": "Applies a key-value Object literal to the configuration, replacing any existing values, and queueing the property events.\nAlthough the values will be set, fireQueue() must be called for their associated events to execute.", "guessedname": "applyConfig", "guessedtype": "function"}, "refresh": {"description": "Refires the events for all configuration properties using their current values.", "guessedname": "refresh", "guessedtype": "function"}, "subscribeToConfigEvent": {"return": {"type": "Boolean", "description": "True, if the subscription was successful, otherwise false."}, "params": [{"type": "String", "name": "key", "description": "\t\t\tThe property name"}, {"type": "Function", "name": "handler", "description": "\t\tThe handler function to use subscribe to the property's event"}, {"type": "Object", "name": "obj", "description": "\t\t\tThe Object to use for scoping the event handler (see CustomEvent documentation)"}, {"type": "Boolean", "name": "override", "description": "\tOptional. If true, will override \"this\" within the handler to map to the scope Object passed into the method."}], "description": "Subscribes an external handler to the change event for any given property.", "guessedname": "subscribeToConfigEvent", "guessedtype": "function"}, "checkBoolean": {"return": {"type": "Boolean", "description": "true, if the value is valid"}, "params": [{"type": "Object", "name": "val", "description": "\tThe value to validate"}], "description": "Validates that the value passed in is a Boolean.", "guessedname": "checkBoolean", "guessedtype": "function"}, "init": {"params": [{"type": "Object", "name": "owner", "description": "\tThe owner Object to which this Config Object belongs"}], "description": "Initializes the configuration Object and all of its local members.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The Config object in string format."}, "description": "Returns a string representation of the Config object", "guessedname": "toString", "guessedtype": "function"}, "refireEvent": {"params": [{"type": "String", "name": "key", "description": "\tThe name of the property"}], "description": "Fires the event for a property using the property's current value.", "guessedname": "refireEvent", "guessedtype": "function"}, "getConfig": {"return": {"type": "Object", "description": "The current config, represented in a key-value map"}, "description": "Returns a key-value configuration map of the values currently set in the Config Object.", "guessedname": "getConfig", "guessedtype": "function"}, "setProperty": {"return": {"type": "Boolean", "description": "True, if the set was successful, false if it failed."}, "params": [{"type": "String", "name": "key", "description": "\t\tThe name of the property"}, {"type": "String", "name": "value", "description": "\t\tThe value to set the property to"}, {"type": "Boolean", "name": "silent", "description": "\tWhether the value should be set silently, without firing the property event."}], "description": "Sets the value of a property. If the silent property is passed as true, the property's event will not be fired.", "guessedname": "setProperty", "guessedtype": "function"}, "fireEvent": {"guessedname": "fireEvent", "params": [{"type": "String", "name": "key", "description": "\t\t\tThe configuration property's name"}, {"type": "value", "name": "Object", "description": "\t\tThe value of the correct type for the property"}], "description": "Fires a configuration property event using the specified value.", "private": "", "guessedtype": "function"}, "unsubscribeFromConfigEvent": {"return": {"type": "Boolean", "description": "True, if the unsubscription was successful, otherwise false."}, "params": [{"type": "String", "name": "key", "description": "\t\t\tThe property name"}, {"type": "Function", "name": "handler", "description": "\t\tThe handler function to use subscribe to the property's event"}, {"type": "Object", "name": "obj", "description": "\t\t\tThe Object to use for scoping the event handler (see CustomEvent documentation)"}], "description": "Unsubscribes an external handler from the change event for any given property.", "guessedname": "unsubscribeFromConfigEvent", "guessedtype": "function"}}, "file": "Config.js", "guessedtype": "function", "shortname": "Config", "properties": {"owner": {"type": "Object", "description": "Object reference to the owner of this Config Object", "guessedname": "owner", "guessedtype": "property"}, "queueInProgress": {"type": "Boolean", "description": "Boolean flag that specifies whether a queue is currently being executed", "guessedname": "queueInProgress", "guessedtype": "property"}, "initialConfig": {"guessedname": "initialConfig", "type": "Object", "description": "Maintains the local collection of configuration property objects as they were initially applied.\nThis object is used when resetting a property.", "private": "", "guessedtype": "property"}, "config": {"guessedname": "config", "type": "Object", "description": "Maintains the local collection of configuration property objects and their specified values", "private": "", "guessedtype": "property"}, "eventQueue": {"guessedname": "eventQueue", "type": "Object", "description": "Maintains the local, normalized CustomEvent queue", "private": "", "guessedtype": "property"}}, "description": "Config is a utility used within an Object to allow the implementer to maintain a list of local configuration properties and listen for changes to those properties dynamically using CustomEvent. The initial values are also maintained so that the configuration can be reset at any given point to its initial state."}, "YAHOO.widget.Slider": {"name": "YAHOO.widget.Slider", "constructors": [{"params": [{"type": "String", "name": "id", "description": "     The id of the element linked to this instance"}, {"type": "String", "name": "sGroup", "description": " The group of related DragDrop items"}, {"type": "String", "name": "sType", "description": "  The type of slider (horiz, vert, region)"}], "description": "A DragDrop implementation that can be used as a background for a\nslider.  It takes a reference to the thumb instance \nso it can delegate some of the events to it.  The goal is to make the \nthumb jump to the location on the background when the background is \nclicked."}], "namespace": "YAHOO.widget", "module": "slider", "events": {"slideEnd": {"description": "Event that fires at the end of a slider thumb move"}, "change": {"params": [{"type": "int", "name": "new", "description": ""}, {"type": "int", "name": "firstOffset", "description": " the number of pixels the thumb has moved\nfrom its start position. Normal horizontal and vertical sliders will only\nhave the firstOffset.  Regions will have both, the first is the horizontal\noffset, the second the vertical."}, {"type": "int", "name": "secondOffset", "description": " the y offset for region sliders"}], "description": "Event the fires when the value of the control changes.  If \nthe control is animated the event will fire every point\nalong the way."}, "slideStart": {"description": "Event that fires at the end of a slider thumb move."}}, "guessedname": "Slider", "methods": {"fireEvents": {"private": "", "description": "Fires the change event if the value has been changed.  Ignored if we are in\nthe middle of an animation as the event will fire when the animation is\ncomplete", "guessedname": "fireEvents", "guessedtype": "function"}, "moveOneTick": {"guessedname": "moveOneTick", "params": [{"type": "int[]", "name": "the", "description": " destination coordinate"}], "description": "Move the slider one tick mark towards its final coordinate.  Used\nfor the animation when tick marks are defined", "private": "", "guessedtype": "function"}, "YAHOO.widget.Slider.getHorizSlider": {"return": {"type": "Slider", "description": "a horizontal slider control"}, "description": "Factory method for creating a horizontal slider", "static": "", "guessedname": "getHorizSlider", "guessedtype": "property", "params": [{"type": "String", "name": "sBGElId", "description": " the id of the slider's background element"}, {"type": "String", "name": "sHandleElId", "description": " the id of the thumb element"}, {"type": "int", "name": "iLeft", "description": " the number of pixels the element can move left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move right"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."}]}, "focus": {"private": "", "description": "Try to focus the element when clicked so we can add\naccessibility features", "guessedname": "focus", "guessedtype": "function"}, "onMouseDown": {"private": "", "description": "Handles the mousedown event for the slider background", "guessedname": "onMouseDown", "guessedtype": "function"}, "unlock": {"description": "Unlocks the slider, overrides YAHOO.util.DragDrop", "guessedname": "unlock", "guessedtype": "function"}, "getXValue": {"return": {"type": "int", "description": "the current horizontal offset"}, "description": "Returns the slider's thumb X offset from the start position", "guessedname": "getXValue", "guessedtype": "function"}, "moveThumb": {"guessedname": "moveThumb", "params": [{"type": "int", "name": "x", "description": " the X coordinate of the click"}, {"type": "int", "name": "y", "description": " the Y coordinate of the click"}, {"type": "boolean", "name": "skipAnim", "description": " don't animate if the move happend onDrag"}], "description": "Move the associated slider moved to a timeout to try to get around the \nmousedown stealing moz does when I move the slider element between the \ncursor and the background during the mouseup event", "private": "", "guessedtype": "function"}, "setRegionValue": {"return": {"type": "boolean", "description": "true if the move was performed, false if it failed"}, "params": [{"type": "int", "name": "newOffset", "description": " the number of pixels the thumb should be\npositioned away from the initial start point (x axis for region)"}, {"type": "int", "name": "newOffset2", "description": " the number of pixels the thumb should be\npositioned away from the initial start point (y axis for region)"}, {"type": "boolean", "name": "skipAnim", "description": " set to true to disable the animation\nfor this move action (but not others)."}, {"type": "boolean", "name": "force", "description": " ignore the locked setting and set value anyway"}], "description": "Provides a way to set the value of the region slider in code.", "guessedname": "setRegionValue", "guessedtype": "function"}, "onSliderEnd": {"deprecated": "use instance.subscribe(\"slideEnd\") instead", "description": "Event that fires at the end of a slider thumb move", "guessedname": "onSlideEnd", "guessedtype": "function"}, "thumbMouseUp": {"private": "", "description": "Handles mouseup event on the slider background", "guessedname": "thumbMouseUp", "guessedtype": "function"}, "YAHOO.widget.Slider.getSliderRegion": {"return": {"type": "Slider", "description": "a slider region control"}, "description": "Factory method for creating a slider region like the one in the color\npicker example", "static": "", "guessedname": "getSliderRegion", "guessedtype": "property", "params": [{"type": "String", "name": "sBGElId", "description": " the id of the slider's background element"}, {"type": "String", "name": "sHandleElId", "description": " the id of the thumb element"}, {"type": "int", "name": "iLeft", "description": " the number of pixels the element can move left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move right"}, {"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."}]}, "verifyOffset": {"return": {"type": "boolean", "description": "True if the offset is the same as the baseline."}, "description": "Checks the background position element position.  If it has moved from the\nbaseline position, the constraints for the thumb are reset", "guessedname": "verifyOffset", "guessedtype": "function"}, "setSliderStartState": {"description": "Initialization that sets up the value offsets once the elements are ready", "guessedname": "setStartSliderState", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the instance"}, "description": "Slider toString", "guessedname": "toString", "guessedtype": "function"}, "lock": {"description": "Locks the slider, overrides YAHOO.util.DragDrop", "guessedname": "lock", "guessedtype": "function"}, "onChange": {"deprecated": "use instance.subscribe(\"change\") instead", "params": [{"type": "int", "name": "firstOffset", "description": " the number of pixels the thumb has moved\nfrom its start position. Normal horizontal and vertical sliders will only\nhave the firstOffset.  Regions will have both, the first is the horizontal\noffset, the second the vertical."}, {"type": "int", "name": "secondOffset", "description": " the y offset for region sliders"}], "description": "Event that fires when the value of the slider has changed", "guessedname": "onChange", "guessedtype": "function"}, "setValue": {"return": {"type": "boolean", "description": "true if the move was performed, false if it failed"}, "params": [{"type": "int", "name": "newOffset", "description": " the number of pixels the thumb should be\npositioned away from the initial start point"}, {"type": "boolean", "name": "skipAnim", "description": " set to true to disable the animation\nfor this move action (but not others)."}, {"type": "boolean", "name": "force", "description": " ignore the locked setting and set value anyway"}], "description": "Provides a way to set the value of the slider in code.", "guessedname": "setValue", "guessedtype": "function"}, "setThumbCenterPoint": {"description": "When the thumb is available, we cache the centerpoint of the element so\nwe can position the element correctly when the background is clicked", "guessedname": "setThumbCenterPoint", "guessedtype": "function"}, "handleThumbChange": {"private": "", "description": "Internal handler for the slider thumb's onChange event", "guessedname": "handleThumbChange", "guessedtype": "function"}, "endMove": {"private": "", "description": "Fired when the slider movement ends", "guessedname": "endMove", "guessedtype": "function"}, "getYValue": {"return": {"type": "int", "description": "the current vertical offset"}, "description": "Returns the slider's thumb Y offset from the start position", "guessedname": "getYValue", "guessedtype": "function"}, "onSlideStart": {"deprecated": "use instance.subscribe(\"slideStart\") instead", "description": "Event that fires when the at the beginning of the slider thumb move", "guessedname": "onSlideStart", "guessedtype": "function"}, "onDrag": {"private": "", "description": "Handles the onDrag event for the slider background", "guessedname": "onDrag", "guessedtype": "function"}, "getThumb": {"return": {"type": "SliderThumb", "description": "this slider's thumb"}, "description": "Returns a reference to this slider's thumb", "guessedname": "getThumb", "guessedtype": "function"}, "YAHOO.widget.Slider.getVertSlider": {"return": {"type": "Slider", "description": "a vertical slider control"}, "description": "Factory method for creating a vertical slider", "static": "", "guessedname": "getVertSlider", "guessedtype": "property", "params": [{"type": "String", "name": "sBGElId", "description": " the id of the slider's background element"}, {"type": "String", "name": "sHandleElId", "description": " the id of the thumb element"}, {"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."}]}, "getValue": {"return": {"type": "int", "description": "the current value"}, "description": "Returns the slider's thumb offset from the start position", "guessedname": "getValue", "guessedtype": "function"}, "b4MouseDown": {"private": "", "description": "Resets the constraints before moving the thumb.", "guessedname": "b4MouseDown", "guessedtype": "function"}, "_getNextY": {"private": "", "description": "Returns the next Y tick value based on the current coord and the target coord.", "guessedname": "_getNextY", "guessedtype": "function"}, "_getNextX": {"private": "", "description": "Returns the next X tick value based on the current coord and the target coord.", "guessedname": "_getNextX", "guessedtype": "function"}}, "extends": "YAHOO.util.DragDrop", "superclass": "YAHOO.widget.YAHOO.util.DragDrop", "file": "Slider.js", "guessedtype": "function", "shortname": "Slider", "properties": {"moveComplete": {"type": "Boolean", "description": "moveComplete is set to true when the slider has moved to its final\ndestination.  For animated slider, this value can be checked in \nthe onChange handler to make it possible to execute logic only\nwhen the move is complete rather than at all points along the way.", "guessedname": "moveComplete", "guessedtype": "property"}, "isTarget": {"private": "", "description": "Overrides the isTarget property in YAHOO.util.DragDrop", "guessedname": "isTarget", "guessedtype": "property"}, "thumb": {"type": "YAHOO.widget.SliderThumb", "description": "A YAHOO.widget.SliderThumb instance that we will use to \nreposition the thumb when the background is clicked", "guessedname": "thumb", "guessedtype": "property"}, "baselinePos": {"type": "[int, int]", "description": "The basline position of the background element, used\nto determine if the background has moved since the last\noperation.", "guessedname": "baselinePos", "guessedtype": "property"}, "thumbCenterPoint": {"type": "{\"x\": int, \"y\": int}", "description": "The center of the slider element is stored so we can position \nplace it in the correct position when the background is clicked", "guessedname": "thumbCenterPoint", "guessedtype": "property"}, "keyIncrement": {"type": "int", "description": "Specifies the number of pixels the arrow keys will move the slider.\nDefault is 25.", "guessedname": "keyIncrement", "guessedtype": "property"}, "backgroundEnabled": {"type": "boolean", "description": "Set to false to disable a background click thumb move", "guessedname": "backgroundEnabled", "guessedtype": "property"}, "animationDuration": {"default": "0.2", "type": "int", "description": "If animation is configured, specifies the length of the animation\nin seconds.", "guessedname": "animationDuration", "guessedtype": "property"}, "animate": {"type": "boolean", "description": "Flag that determines if the thumb will animate when moved", "guessedname": "animate", "guessedtype": "property"}, "type": {"type": "string", "description": "The type of the slider (horiz, vert, region)", "guessedname": "type", "guessedtype": "property"}, "YAHOO.widget.Slider.ANIM_AVAIL": {"type": "boolean", "static": "", "description": "By default, animation is available if the animation library is detected.", "guessedname": "ANIM_AVAIL", "guessedtype": "property"}, "tickPause": {"type": "int", "description": "Adjustment factor for tick animation, the more ticks, the\nfaster the animation (by default)", "guessedname": "tickPause", "guessedtype": "property"}, "enableKeys": {"type": "boolean", "description": "Enables the arrow, home and end keys, defaults to true.", "guessedname": "enableKeys", "guessedtype": "property"}}, "description": "A DragDrop implementation that can be used as a background for a\nslider.  It takes a reference to the thumb instance \nso it can delegate some of the events to it.  The goal is to make the \nthumb jump to the location on the background when the background is \nclicked."}, "YAHOO.util.AnimMgr": {"name": "YAHOO.util.AnimMgr", "namespace": "YAHOO.util", "module": "animation", "guessedname": "AnimMgr", "methods": {"run": {"description": "Called per Interval to handle each animation frame.", "guessedname": "run", "guessedtype": "function"}, "unRegister": {"guessedname": "unRegister", "params": [{"type": "object", "name": "tween", "description": " The Anim instance to be be registered"}, {"type": "Int", "name": "index", "description": " The index of the Anim instance"}], "description": "removes an animation instance from the animation queue.\nAll animation instances must be registered in order to animate.", "private": "", "guessedtype": "function"}, "stop": {"params": [{"type": "object", "name": "tween", "description": " A specific Anim instance to stop (optional)\nIf no instance given, Manager stops thread and all animations."}], "description": "Stops the animation thread or a specific animation instance.", "guessedname": "stop", "guessedtype": "function"}, "start": {"description": "Starts the animation thread.\nOnly one thread can run at a time.", "guessedname": "start", "guessedtype": "function"}, "registerElement": {"params": [{"type": "object", "name": "tween", "description": " The Anim instance to be be registered"}], "description": "Adds an animation instance to the animation queue.\nAll animation instances must be registered in order to animate.", "guessedname": "registerElement", "guessedtype": "function"}, "correctFrame": {"guessedname": "correctFrame", "params": [{"type": "Object", "name": "tween", "description": " The Anim instance being corrected."}], "description": "On the fly frame correction to keep animation on time.", "private": "", "guessedtype": "function"}}, "file": "AnimMgr.js", "guessedtype": "function", "shortname": "AnimMgr", "properties": {"queue": {"guessedname": "queue", "type": "Array", "description": "The current queue of registered animation objects.", "private": "", "guessedtype": "property"}, "tweenCount": {"guessedname": "tweenCount", "type": "Int", "description": "The number of active animations.", "private": "", "guessedtype": "property"}, "delay": {"type": "Int", "description": "Interval delay in milliseconds, defaults to fastest possible.", "guessedname": "delay", "guessedtype": "property"}, "fps": {"type": "Int", "description": "Base frame rate (frames per second). \nArbitrarily high for better x-browser calibration (slower browsers drop more frames).", "guessedname": "fps", "guessedtype": "property"}, "thread": {"guessedname": "thread", "type": "Int", "description": "Reference to the animation Interval.", "private": "", "guessedtype": "property"}}, "description": "Handles animation queueing and threading.\nUsed by Anim and subclasses."}, "YAHOO.util.EventProvider": {"name": "YAHOO.util.EventProvider", "namespace": "YAHOO.util", "module": "event", "guessedname": "EventProvider", "methods": {"hasEvent": {"params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}], "description": "Returns true if the custom event of the provided type has been created\nwith createEvent.", "guessedname": "hasEvent", "guessedtype": "function"}, "subscribe": {"params": [{"type": "string", "name": "p_type", "description": "        the type, or name of the event"}, {"type": "function", "name": "p_fn", "description": "        the function to exectute when the event fires"}, {"type": "", "name": "p_obj", "description": ""}, {"type": "Object", "name": "p_obj", "description": "         An object to be passed along when the event \nfires"}, {"type": "boolean", "name": "p_override", "description": "   If true, the obj passed in becomes the \nexecution scope of the listener"}], "description": "Subscribe to a CustomEvent by event type", "guessedname": "subscribe", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "true if the subscriber was found and detached."}, "params": [{"type": "string", "name": "p_type", "description": "    The type, or name of the event"}, {"type": "Function", "name": "p_fn", "description": "    The function to execute"}, {"type": "Object", "name": "p_obj", "description": "     The custom object passed to subscribe (optional)"}], "description": "Unsubscribes the from the specified event", "guessedname": "unsubscribe", "guessedtype": "function"}, "fireEvent": {"return": {"type": "boolean", "description": "the return value from CustomEvent.fire, or null if \nthe custom event does not exist."}, "params": [{"type": "string", "name": "p_type", "description": "      the type, or name of the event"}, {"type": "Object*", "name": "arguments", "description": "  an arbitrary set of parameters to pass to \nthe handler."}], "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the scope specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The first argument fire() was executed with<\/li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod<\/li>\n<\/ul>", "guessedname": "fireEvent", "guessedtype": "function"}, "createEvent": {"return": {"type": "CustomEvent", "description": "the custom event"}, "params": [{"type": "string", "name": "p_type", "description": "  the type, or name of the event"}, {"type": "object", "name": "p_config", "description": "  optional config params.  Valid properties are:\n<ul>\n<li>\nscope: defines the default execution scope.  If not defined\nthe default scope will be this instance.\n<\/li>\n<li>\nsilent: if true, the custom event will not generate log messages.\nThis is false by default.\n<\/li>\n<li>\nonSubscribeCallback: specifies a callback to execute when the\nevent has a new subscriber.  This will fire immediately for\neach queued subscriber if any exist prior to the creation of\nthe event.\n<\/li>\n<\/ul>"}], "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned.", "guessedname": "createEvent", "guessedtype": "function"}}, "file": "EventProvider.js", "guessedtype": "function", "shortname": "EventProvider", "properties": {"__yui_subscribers": {"guessedname": "__yui_subscribers", "type": "Object[]", "description": "Private storage of custom event subscribers", "private": "", "guessedtype": "property"}, "__yui_events": {"guessedname": "__yui_events", "type": "Object[]", "description": "Private storage of custom events", "private": "", "guessedtype": "property"}}, "description": "EventProvider is designed to be used with YAHOO.augment to wrap \nCustomEvents in an interface that allows events to be subscribed to \nand fired by name.  This makes it possible for implementing code to\nsubscribe to an event that either has not been created yet, or will\nnot be created at all."}, "YAHOO.widget.Panel": {"name": "YAHOO.widget.Panel", "configs": {"draggable": {"default": "true", "type": "Boolean", "description": "True if the Panel should be draggable", "guessedname": "value", "guessedtype": "property"}, "close": {"default": "true", "type": "Boolean", "description": "True if the Panel should display a \"close\" button", "guessedname": "value", "guessedtype": "property"}, "keylisteners": {"default": "null", "type": "YAHOO.util.KeyListener[]", "description": "A KeyListener (or array of KeyListeners) that will be enabled when the Panel is shown, and disabled when the Panel is hidden.", "guessedname": "handler", "guessedtype": "property"}, "underlay": {"default": "shadow", "type": "String", "description": "Sets the type of underlay to display for the Panel. Valid values are \"shadow\", \"matte\", and \"none\".", "guessedname": "value", "guessedtype": "property"}, "modal": {"default": "false", "type": "Boolean", "description": "True if the Panel should be displayed in a modal fashion, automatically creating a transparent mask over the document that will not be removed until the Panel is dismissed.", "guessedname": "value", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Panel <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Panel"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Panel. See configuration documentation for more details."}], "description": "Panel is an implementation of Overlay that behaves like an OS window, with a draggable header and an optional close icon at the top right."}], "namespace": "YAHOO.widget", "module": "container", "events": {"showMaskEvent": {"description": "CustomEvent fired after the modality mask is shown", "guessedname": "showMaskEvent", "guessedtype": "property"}, "dragEvent": {"description": "CustomEvent when the Panel is dragged", "guessedname": "dragEvent", "guessedtype": "property"}, "hideMaskEvent": {"description": "CustomEvent fired after the modality mask is hidden", "guessedname": "hideMaskEvent", "guessedtype": "property"}}, "guessedname": "Panel", "methods": {"configClose": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"close\" property is changed. The method controls the appending or hiding of the close icon at the top right of the Panel.", "guessedname": "configClose", "guessedtype": "function"}, "render": {"return": {"type": "boolean", "description": "Success or failure of the render"}, "params": [{"type": "String", "name": "appendToNode", "description": "\tThe element id to which the Module should be appended to prior to rendering <em>OR<\/em>"}, {"type": "HTMLElement", "name": "appendToNode", "description": "\tThe element to which the Module should be appended to prior to rendering"}], "description": "Renders the Panel by inserting the elements that are not already in the main Panel into their correct places. Optionally appends the Panel to the specified node prior to the render's execution. NOTE: For Panels without existing markup, the appendToNode argument is REQUIRED. If this argument is ommitted and the current element is not present in the document, the function will return false, indicating that the render was a failure.", "guessedname": "render", "guessedtype": "function"}, "hideMask": {"description": "Hides the modality mask.", "guessedname": "hideMask", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Module which are fired automatically at appropriate times by the Module class.", "guessedname": "initEvents", "guessedtype": "function"}, "configModal": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"modal\" property is changed. This handler subscribes or unsubscribes to the show and hide events to handle the display or hide of the modality mask.", "guessedname": "configModal", "guessedtype": "function"}, "configKeyListeners": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"keylisteners\" property is changed.", "guessedname": "configKeyListeners", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Overlay <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Overlay"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Overlay. See configuration documentation for more details."}], "description": "The Overlay initialization method, which is executed for Overlay and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Panel."}, "description": "Returns a String representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "buildWrapper": {"description": "Builds the wrapping container around the Panel that is used for positioning the shadow and matte underlays. The container element is assigned to a  local instance variable called container, and the element is reinserted inside of it.", "guessedname": "buildWrapper", "guessedtype": "function"}, "removeMask": {"description": "Removes the modality mask.", "guessedname": "removeMask", "guessedtype": "function"}, "configHeight": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"height\" property is changed.", "guessedname": "configHeight", "guessedtype": "function"}, "showMask": {"description": "Shows the modality mask.", "guessedname": "showMask", "guessedtype": "function"}, "onDomResize": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe resize DOM event"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "Event handler fired when the resize monitor element is resized.", "guessedname": "onDomResize", "guessedtype": "function"}, "registerDragDrop": {"description": "Registers the Panel's header for drag & drop capability.", "guessedname": "registerDragDrop", "guessedtype": "function"}, "configUnderlay": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"underlay\" property is changed.", "guessedname": "configUnderlay", "guessedtype": "function"}, "buildMask": {"description": "Builds the mask that is laid over the document when the Panel is configured to be modal.", "guessedname": "buildMask", "guessedtype": "function"}, "configWidth": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"width\" property is changed.", "guessedname": "configWidth", "guessedtype": "function"}, "configDraggable": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"draggable\" property is changed.", "guessedname": "configDraggable", "guessedtype": "function"}, "sizeMask": {"description": "Sets the size of the modality mask to cover the entire scrollable area of the document", "guessedname": "sizeMask", "guessedtype": "function"}, "configzIndex": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"zIndex\" property is changed.", "guessedname": "configzIndex", "guessedtype": "function"}, "sizeUnderlay": {"description": "Adjusts the size of the shadow based on the size of the element.", "guessedname": "sizeUnderlay", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed using the Panel's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Overlay", "superclass": "YAHOO.widget.Overlay", "file": "Panel.js", "guessedtype": "function", "shortname": "Panel", "properties": {"YAHOO.widget.Panel.CSS_PANEL_CONTAINER": {"description": "Constant representing the default CSS class used for a Panel's wrapping container", "static": "", "guessedname": "CSS_PANEL_CONTAINER", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Panel.CSS_PANEL": {"description": "Constant representing the default CSS class used for a Panel", "static": "", "guessedname": "CSS_PANEL", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Panel is an implementation of Overlay that behaves like an OS window, with a draggable header and an optional close icon at the top right."}, "YAHOO.widget.DS_JSFunction": {"name": "YAHOO.widget.DS_JSFunction", "constructors": [{"params": [{"type": "HTMLFunction", "name": "oFunction", "description": "  In-memory Javascript function that returns query results as an array of objects."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of config params."}], "description": "Implementation of YAHOO.widget.DataSource using a native Javascript function as\r\nits live data source."}], "namespace": "YAHOO.widget", "module": "autocomplete", "guessedname": "DS_JSFunction", "methods": {"doQuery": {"params": [{"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function defined by oParent object to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Queries the live data source defined by function for results. Results are\r\npassed back to a callback function.", "guessedname": "doQuery", "guessedtype": "function"}}, "extends": "YAHOO.widget.DataSource", "superclass": "YAHOO.widget.DataSource", "file": "DataSource.js", "guessedtype": "function", "shortname": "DS_JSFunction", "properties": {"dataFunction": {"type": "HTMLFunction", "description": "In-memory Javascript function that returns query results.", "guessedname": "dataFunction", "guessedtype": "property"}}, "description": "Implementation of YAHOO.widget.DataSource using a native Javascript function as\r\nits live data source."}, "YAHOO.util.KeyListener": {"name": "YAHOO.util.KeyListener", "constructors": [{"params": [{"type": "HTMLElement", "name": "attachTo", "description": "\tThe element or element ID to which the key event should be attached"}, {"type": "String", "name": "attachTo", "description": "\tThe element or element ID to which the key event should be attached"}, {"type": "Object", "name": "keyData", "description": "\t\tThe object literal representing the key(s) to detect. Possible attributes are shift(boolean), alt(boolean), ctrl(boolean) and keys(either an int or an array of ints representing keycodes)."}, {"type": "Function", "name": "handler", "description": "\t\tThe CustomEvent handler to fire when the key event is detected"}, {"type": "Object", "name": "handler", "description": "\t\tAn object literal representing the handler."}, {"type": "String", "name": "event", "description": "\t\tOptional. The event (keydown or keyup) to listen for. Defaults automatically to keydown."}], "description": "KeyListener is a utility that provides an easy interface for listening for keydown\/keyup events fired against DOM elements."}], "namespace": "YAHOO.util", "module": "container", "properties": {"YAHOO.util.KeyListener.KEYDOWN": {"description": "Constant representing the DOM \"keydown\" event.", "static": "", "guessedname": "KEYDOWN", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.util.KeyListener.KEYUP": {"description": "Constant representing the DOM \"keyup\" event.", "static": "", "guessedname": "KEYUP", "guessedtype": "property", "type": "String", "final": ""}, "enabled": {"type": "Boolean", "description": "Boolean indicating the enabled\/disabled state of the Tooltip", "guessedname": "enabled", "guessedtype": "property"}}, "guessedname": "KeyListener", "methods": {"handleKeyPress": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe keypress DOM event"}, {"type": "Object", "name": "obj", "description": "\tThe DOM event scope object"}], "description": "Handles the key event when a key is pressed.", "private": ""}, "enable": {"description": "Enables the KeyListener by attaching the DOM event listeners to the target DOM element", "guessedname": "enable", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the KeyListener"}, "description": "Returns a String representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "disable": {"description": "Disables the KeyListener by removing the DOM event listeners from the target DOM element", "guessedname": "disable", "guessedtype": "function"}}, "file": "KeyListener.js", "guessedtype": "function", "shortname": "KeyListener", "events": {"enabledEvent": {"params": [{"type": "Object", "name": "keyData", "description": "\t\tThe object literal representing the key(s) to detect. Possible attributes are shift(boolean), alt(boolean), ctrl(boolean) and keys(either an int or an array of ints representing keycodes)."}], "description": "The CustomEvent fired when the KeyListener is enabled via the enable() function", "guessedname": "enabledEvent", "guessedtype": "property"}, "disabledEvent": {"params": [{"type": "Object", "name": "keyData", "description": "\t\tThe object literal representing the key(s) to detect. Possible attributes are shift(boolean), alt(boolean), ctrl(boolean) and keys(either an int or an array of ints representing keycodes)."}], "description": "The CustomEvent fired when the KeyListener is disabled via the disable() function", "guessedname": "disabledEvent", "guessedtype": "property"}, "keyEvent": {"guessedname": "keyEvent", "params": [{"type": "Object", "name": "keyData", "description": "\t\tThe object literal representing the key(s) to detect. Possible attributes are shift(boolean), alt(boolean), ctrl(boolean) and keys(either an int or an array of ints representing keycodes)."}], "description": "The CustomEvent fired internally when a key is pressed", "private": "", "guessedtype": "property"}}, "description": "KeyListener is a utility that provides an easy interface for listening for keydown\/keyup events fired against DOM elements."}, "YAHOO.util.CustomEvent": {"name": "YAHOO.util.CustomEvent", "constructors": [{"params": [{"type": "String", "name": "type", "description": " The type of event, which is passed to the callback\nwhen the event fires"}, {"type": "Object", "name": "oScope", "description": " The context the event will fire from.  \"this\" will\nrefer to this object in the callback.  Default value: \nthe window object.  The listener can override this."}, {"type": "boolean", "name": "silent", "description": " pass true to prevent the event from writing to\nthe log system"}], "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}], "namespace": "YAHOO.util", "module": "event", "events": {"subscribeEvent": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Function", "name": "fn", "description": " The function to execute"}, {"type": "Object", "name": "obj", "description": " An object to be passed along when the event \nfires"}, {"type": "boolean|Object", "name": "override", "description": " If true, the obj passed in becomes \nthe execution scope of the listener.\nif an object, that object becomes the\nthe execution scope."}], "description": "Custom events provide a custom event that fires whenever there is\na new subscriber to the event.  This provides an opportunity to\nhandle the case where there is a non-repeating event that has\nalready fired has a new subscriber.", "guessedname": "subscribeEvent", "guessedtype": "property"}}, "guessedname": "CustomEvent", "methods": {"_delete": {"private": "", "guessedname": "_delete", "guessedtype": "function"}, "fire": {"params": [{"type": "Object*", "name": "arguments", "description": " an arbitrary set of parameters to pass to \nthe handler."}], "description": "Notifies the subscribers.  The callback functions will be executed\nfrom the scope specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The type of event<\/li>\n<li>All of the arguments fire() was executed with as an array<\/li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod<\/li>\n<\/ul>", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"description": "Removes all listeners", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "subscribe": {"params": [{"type": "Function", "name": "fn", "description": "        The function to execute"}, {"type": "Object", "name": "obj", "description": "       An object to be passed along when the event \nfires"}, {"type": "boolean|Object", "name": "override", "description": " If true, the obj passed in becomes \nthe execution scope of the listener.\nif an object, that object becomes the\nthe execution scope."}], "description": "Subscribes the caller to this event", "guessedname": "subscribe", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "True if the subscriber was found and detached."}, "params": [{"type": "Function", "name": "fn", "description": "  The function to execute"}, {"type": "Object", "name": "obj", "description": "  The custom object passed to subscribe (optional)"}], "description": "Unsubscribes the caller from this event", "guessedname": "unsubscribe", "guessedtype": "function"}}, "file": "CustomEvent.js", "guessedtype": "function", "shortname": "CustomEvent", "properties": {"silent": {"type": "boolean", "description": "By default all custom events are logged in the debug build, set silent\nto true to disable logging for this event.", "guessedname": "silent", "guessedtype": "property"}, "YAHOO.util.CustomEvent.FLAT": {"type": "int", "static": "", "description": "Subscriber listener sigature constant.  The FLAT type returns two\nparameters: the first argument passed to fire and the optional \ncustom object", "guessedname": "FLAT", "guessedtype": "property"}, "subscribers": {"type": "Subscriber[]", "description": "The subscribers to this event", "guessedname": "subscribers", "guessedtype": "property"}, "signature": {"type": "int", "description": "Custom events support two styles of arguments provided to the event\nsubscribers.  \n<ul>\n<li>YAHOO.util.CustomEvent.LIST: \n<ul>\n<li>param1: event name<\/li>\n<li>param2: array of arguments sent to fire<\/li>\n<li>param3: <optional> a custom object supplied by the subscriber<\/li>\n<\/ul>\n<\/li>\n<li>YAHOO.util.CustomEvent.FLAT\n<ul>\n<li>param1: the first argument passed to fire.  If you need to\npass multiple parameters, use and array or object literal<\/li>\n<li>param2: <optional> a custom object supplied by the subscriber<\/li>\n<\/ul>\n<\/li>\n<\/ul>", "guessedname": "signature", "guessedtype": "property"}, "YAHOO.util.CustomEvent.LIST": {"type": "int", "static": "", "description": "Subscriber listener sigature constant.  The LIST type returns three\nparameters: the event type, the array of args passed to fire, and\nthe optional custom object", "guessedname": "LIST", "guessedtype": "property"}, "scope": {"type": "object", "description": "The scope the the event will fire from by default.  Defaults to the window \nobj", "guessedname": "scope", "guessedtype": "property"}, "type": {"type": "string", "description": "The type of event, returned to subscribers when the event fires", "guessedname": "type", "guessedtype": "property"}}, "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}, "YAHOO.widget.OverlayManager": {"name": "YAHOO.widget.OverlayManager", "configs": {"focusevent": {"default": "\"mousedown\"", "type": "String", "description": "The default DOM event that should be used to focus an Overlay", "guessedname": "value", "guessedtype": "property"}, "overlays": {"default": "null", "type": "YAHOO.widget.Overlay[]", "description": "The collection of registered Overlays in use by the OverlayManager", "guessedname": "suppressEvent", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Array", "name": "overlays", "description": "\tOptional. A collection of Overlays to register with the manager."}, {"type": "Object", "name": "userConfig", "description": "\t\tThe object literal representing the user configuration of the OverlayManager"}], "description": "OverlayManager is used for maintaining the focus status of multiple Overlays.* @namespace YAHOO.widget"}], "namespace": "YAHOO.widget", "module": "container", "guessedname": "OverlayManager", "methods": {"hideAll": {"description": "Hides all Overlays in the manager.", "guessedname": "hideAll", "guessedtype": "function"}, "blurAll": {"description": "Removes focus from all registered Overlays in the manager", "guessedname": "blurAll", "guessedtype": "function"}, "register": {"return": {"type": "Boolean", "description": "True if any Overlays are registered."}, "params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": "\t\tAn Overlay to register with the manager."}, {"type": "YAHOO.widget.Overlay[]", "name": "overlay", "description": "\t\tAn array of Overlays to register with the manager."}], "description": "Registers an Overlay or an array of Overlays with the manager. Upon registration, the Overlay receives functions for focus and blur, along with CustomEvents for each.", "guessedname": "register", "guessedtype": "function"}, "focus": {"params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": "\tThe Overlay to focus"}, {"type": "String", "name": "overlay", "description": "\tThe id of the Overlay to focus"}], "description": "Focuses the specified Overlay", "guessedname": "focus", "guessedtype": "function"}, "remove": {"params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": "\tThe Overlay to remove"}, {"type": "String", "name": "overlay", "description": "\tThe id of the Overlay to remove"}], "description": "Removes the specified Overlay from the manager", "guessedname": "remove", "guessedtype": "function"}, "compareZIndexDesc": {"guessedname": "compareZIndexDesc", "return": {"type": "Number", "description": "0, 1, or -1, depending on where the Overlay should fall in the stacking order."}, "description": "Used for sorting the manager's Overlays by z-index.", "private": "", "guessedtype": "function"}, "init": {"params": [{"type": "YAHOO.widget.Overlay[]", "name": "overlays", "description": "\tOptional. A collection of Overlays to register with the manager."}, {"type": "Object", "name": "userConfig", "description": "\t\tThe object literal representing the user configuration of the OverlayManager"}], "description": "Initializes the OverlayManager", "guessedname": "init", "guessedtype": "function"}, "getActive": {"return": {"type": "YAHOO.widget.Overlay", "description": "The currently focused Overlay"}, "description": "Returns the currently focused Overlay", "guessedname": "getActive", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the OverlayManager"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "showAll": {"description": "Shows all Overlays in the manager.", "guessedname": "showAll", "guessedtype": "function"}, "find": {"return": {"type": "YAHOO.widget.Overlay", "description": "The requested Overlay, if found, or null if it cannot be located."}, "params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": "\t\tAn Overlay to locate within the manager"}, {"type": "String", "name": "overlay", "description": "\t\tAn Overlay id to locate within the manager"}], "description": "Attempts to locate an Overlay by instance or ID.", "guessedname": "find", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the default configuration of the OverlayManager", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "file": "OverlayManager.js", "guessedtype": "function", "shortname": "OverlayManager", "properties": {"activeOverlay": {"guessedname": "activeOverlay", "type": "YAHOO.widget.Overlay", "description": "The currently activated Overlay", "private": "", "guessedtype": "property"}, "cfg": {"type": "YAHOO.util.Config", "description": "The OverlayManager's Config object used for monitoring configuration properties.", "guessedname": "cfg", "guessedtype": "property"}, "YAHOO.widget.OverlayManager.CSS_FOCUSED": {"description": "The CSS class representing a focused Overlay", "static": "", "guessedname": "CSS_FOCUSED", "guessedtype": "property", "type": "String", "final": ""}, "contructor": {"type": "Function", "description": "The class's constructor function", "guessedname": "constructor", "guessedtype": "property"}, "overlays": {"type": "YAHOO.widget.Overlay[]", "description": "The array of Overlays that are currently registered", "guessedname": "overlays", "guessedtype": "property"}}, "description": "OverlayManager is used for maintaining the focus status of multiple Overlays.* @namespace YAHOO.widget"}, "YAHOO.util.Event": {"name": "YAHOO.util.Event", "namespace": "YAHOO.util", "module": "event", "guessedname": "Event", "methods": {"_simpleRemove": {"description": "Basic remove listener", "private": "", "static": "", "guessedname": "_simpleRemove", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "sType", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "_getScrollLeft": {"guessedname": "_getScrollLeft", "static": "", "description": "Returns scrollLeft", "private": "", "guessedtype": "function"}, "getTime": {"return": {"type": "Date", "description": "the time of the event"}, "description": "Returns the time of the event.  If the time is not included, the\nevent is modified using the current time.", "static": "", "guessedname": "getTime", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "stopEvent": {"static": "", "params": [{"type": "Event", "name": "ev", "description": " the event"}], "description": "Convenience method for stopPropagation + preventDefault", "guessedname": "stopEvent", "guessedtype": "function"}, "generateId": {"return": {"type": "string", "description": "the resulting id of the element"}, "description": "Generates an unique ID for the element if it does not already \nhave one.", "static": "", "guessedname": "generateId", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element to create the id for"}]}, "getTarget": {"return": {"type": "HTMLElement", "description": "the event's target"}, "description": "Returns the event's target element", "static": "", "guessedname": "getTarget", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}, {"type": "boolean", "name": "resolveTextNode", "description": " when set to true the target's\nparent will be returned if the target is a \ntext node.  @deprecated, the text node is\nnow resolved automatically"}]}, "stopPropagation": {"static": "", "params": [{"type": "Event", "name": "ev", "description": " the event"}], "description": "Stops event propagation", "guessedname": "stopPropagation", "guessedtype": "function"}, "getCharCode": {"return": {"type": "int", "description": "the event's charCode"}, "description": "Returns the charcode for an event", "static": "", "guessedname": "getCharCode", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "clearCache": {"description": "Clears the element cache", "deprecated": "Elements are not cached any longer", "private": "", "static": "", "guessedname": "clearCache", "guessedtype": "function"}, "_simpleAdd": {"description": "Adds a DOM event directly without the caching, cleanup, scope adj, etc", "private": "", "static": "", "guessedname": "_simpleAdd", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "sType", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "useLegacyEvent": {"guessedname": "useLegacyEvent", "static": "", "description": "Logic that determines when we should automatically use legacy\nevents instead of DOM2 events.", "private": "", "guessedtype": "function"}, "_isValidCollection": {"return": {"type": "boolean", "description": "true if the object is array-like and populated"}, "description": "We want to be able to use getElementsByTagName as a collection\nto attach a group of events to.  Unfortunately, different \nbrowsers return different types of collections.  This function\ntests to determine if the object is array-like.  It will also \nfail if the object is an array, but is empty.", "private": "", "static": "", "guessedname": "_isValidCollection", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object to test"}]}, "getEl": {"guessedname": "getEl", "static": "", "description": "We cache elements bound by id because when the unload event \nfires, we can no longer use document.getElementById", "private": "", "guessedtype": "function"}, "_load": {"guessedname": "_load", "static": "", "description": "hook up any deferred listeners", "private": "", "guessedtype": "function"}, "resolveTextNode": {"return": {"type": "HTMLElement", "description": "the normized node"}, "description": "In some cases, some browsers will return a text node inside\nthe actual element that was targeted.  This normalizes the\nreturn value for getTarget and getRelatedTarget.", "static": "", "guessedname": "resolveTextNode", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "node", "description": " node to resolve"}]}, "fireLegacyEvent": {"guessedname": "fireLegacyEvent", "static": "", "description": "When using legacy events, the handler is routed to this object\nso we can fire our custom listener stack.", "private": "", "guessedtype": "function"}, "getLegacyIndex": {"guessedname": "getLegacyIndex", "static": "", "description": "Returns the legacy event index that matches the supplied \nsignature", "private": "", "guessedtype": "function"}, "_getScroll": {"guessedname": "_getScroll", "static": "", "description": "Returns the scrollTop and scrollLeft.  Used to calculate the \npageX and pageY in Internet Explorer", "private": "", "guessedtype": "function"}, "addListener": {"return": {"type": "boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the event bound to it."}, "description": "Appends an event handler", "static": "", "guessedname": "addListener", "guessedtype": "function", "params": [{"type": "Object", "name": "el", "description": "        The html element to assign the \nevent to"}, {"type": "String", "name": "sType", "description": "     The type of event to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "boolean", "name": "override", "description": "  If true, the obj passed in becomes\nthe execution scope of the listener"}]}, "_unload": {"guessedname": "_unload", "static": "", "description": "Removes all listeners registered by pe.event.  Called \nautomatically during the unload event.", "private": "", "guessedtype": "function"}, "_tryPreloadAttach": {"guessedname": "_tryPreloadAttach", "static": "", "description": "Polling function that runs before the onload event fires, \nattempting to attach to DOM Nodes as soon as they are \navailable", "private": "", "guessedtype": "function"}, "_getScrollTop": {"guessedname": "_getScrollTop", "static": "", "description": "Returns scrollTop", "private": "", "guessedtype": "function"}, "onContentReady": {"static": "", "params": [{"type": "string", "name": "p_id", "description": " the id of the element to look for."}, {"type": "function", "name": "p_fn", "description": " what to execute when the element is ready."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to p_fn."}, {"type": "boolean", "name": "p_override", "description": " If set to true, p_fn will execute\nin the scope of p_obj"}], "description": "Works the same way as onAvailable, but additionally checks the\nstate of sibling elements to determine if the content of the\navailable element is safe to modify.", "guessedname": "onContentReady", "guessedtype": "function"}, "startInterval": {"static": "", "private": "", "guessedname": "startInterval", "guessedtype": "function"}, "onAvailable": {"static": "", "params": [{"type": "string", "name": "p_id", "description": " the id of the element to look for."}, {"type": "function", "name": "p_fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to p_fn."}, {"type": "boolean", "name": "p_override", "description": " If set to true, p_fn will execute\nin the scope of p_obj"}], "description": "Executes the supplied callback when the item with the supplied\nid is found.  This is meant to be used to execute behavior as\nsoon as possible as the page loads.  If you use this after the\ninitial page load it will poll for a fixed time for the element.\nThe number of times it will poll and the frequency are\nconfigurable.  By default it will poll for 10 seconds.", "guessedname": "onAvailable", "guessedtype": "function"}, "removeListener": {"return": {"type": "boolean", "description": "true if the unbind was successful, false \notherwise."}, "description": "Removes an event handler", "static": "", "guessedname": "removeListener", "guessedtype": "function", "params": [{"type": "Object", "name": "el", "description": " the html element or the id of the element to \nassign the event to."}, {"type": "String", "name": "sType", "description": " the type of event to remove."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."}]}, "getXY": {"type": "int[]", "static": "", "description": "Returns the pageX and pageY properties as an indexed array.", "guessedname": "getXY", "guessedtype": "function"}, "on": {"see": "addListener", "static": "", "description": "YAHOO.util.Event.on is an alias for addListener", "guessedname": "on", "guessedtype": "property"}, "getListeners": {"return": {"type": "Object", "description": "the listener. Contains the following fields:\n&nbsp;&nbsp;type:   (string)   the type of event\n&nbsp;&nbsp;fn:     (function) the callback supplied to addListener\n&nbsp;&nbsp;obj:    (object)   the custom object supplied to addListener\n&nbsp;&nbsp;adjust: (boolean)  whether or not to adjust the default scope\n&nbsp;&nbsp;index:  (int)      its position in the Event util listener cache"}, "description": "Returns all listeners attached to the given element via addListener.\nOptionally, you can specify a specific type of event to return.", "static": "", "guessedname": "getListeners", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "  the element to inspect"}, {"type": "string", "name": "sType", "description": "  optional type of listener to return. If\nleft out, all listeners will be returned"}]}, "getEvent": {"return": {"type": "Event", "description": "the event"}, "description": "Finds the event in the window object, the caller's arguments, or\nin the arguments of another method in the callstack.  This is\nexecuted automatically for events registered through the event\nmanager, so the implementer should not normally need to execute\nthis function at all.", "static": "", "guessedname": "getEvent", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event parameter from the handler"}]}, "purgeElement": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to purge"}, {"type": "boolean", "name": "recurse", "description": " recursively purge this element's children\nas well.  Use with caution."}, {"type": "string", "name": "sType", "description": " optional type of listener to purge. If\nleft out, all listeners will be removed"}], "description": "Removes all listeners attached to the given element via addListener.\nOptionally, the node's children can also be purged.\nOptionally, you can specify a specific type of event to remove.", "guessedname": "purgeElement", "guessedtype": "function"}, "preventDefault": {"static": "", "params": [{"type": "Event", "name": "ev", "description": " the event"}], "description": "Prevents the default behavior of the event", "guessedname": "preventDefault", "guessedtype": "function"}, "_getCacheIndex": {"guessedname": "_getCacheIndex", "static": "", "description": "Locating the saved event handler data by function ref", "private": "", "guessedtype": "function"}, "getPageY": {"return": {"type": "int", "description": "the event's pageY"}, "description": "Returns the event's pageY", "static": "", "guessedname": "getPageY", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "getPageX": {"return": {"type": "int", "description": "the event's pageX"}, "description": "Returns the event's pageX", "static": "", "guessedname": "getPageX", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "getRelatedTarget": {"return": {"type": "HTMLElement", "description": "the event's relatedTarget"}, "description": "Returns the event's related target", "static": "", "guessedname": "getRelatedTarget", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}}, "static": "", "file": "Event.js", "guessedtype": "function", "shortname": "Event", "properties": {"isSafari": {"guessedname": "isSafari", "static": "", "description": "Safari detection is necessary to work around the preventDefault\nbug that makes it so you can't cancel a href click from the \nhandler.  There is not a capabilities check we can use here.", "private": "", "guessedtype": "property"}, "EL": {"description": "Element to bind, int constant", "static": "", "guessedname": "EL", "guessedtype": "property", "type": "int", "final": ""}, "POLL_RETRYS": {"description": "The number of times we should look for elements that are not\nin the DOM at the time the event is requested after the document\nhas been loaded.  The default is 200@amp;50 ms, so it will poll\nfor 10 seconds or until all outstanding handlers are bound\n(whichever comes first).", "static": "", "guessedname": "POLL_RETRYS", "guessedtype": "property", "type": "int", "final": ""}, "WFN": {"description": "Function wrapped for scope correction and cleanup, int constant", "static": "", "guessedname": "WFN", "guessedtype": "property", "type": "int", "final": ""}, "elCache\nDOM element cache": {"static": "", "private": "", "guessedname": "elCache", "guessedtype": "property"}, "OBJ": {"description": "Object passed in by the user that will be returned as a \nparameter to the callback, int constant", "static": "", "guessedname": "OBJ", "guessedtype": "property", "type": "int", "final": ""}, "TYPE": {"description": "Type of event, int constant", "static": "", "guessedname": "TYPE", "guessedtype": "property", "type": "int", "final": ""}, "counter": {"guessedname": "counter", "static": "", "description": "Counter for auto id generation", "private": "", "guessedtype": "property"}, "POLL_INTERVAL": {"description": "The poll interval in milliseconds", "static": "", "guessedname": "POLL_INTERVAL", "guessedtype": "property", "type": "int", "final": ""}, "legacyEvents": {"guessedname": "legacyEvents", "static": "", "description": "Cache of DOM0 event handlers to work around issues with DOM2 events\nin Safari", "private": "", "guessedtype": "property"}, "ADJ_SCOPE": {"description": "Adjusted scope, either the element we are registering the event\non or the custom object passed in by the listener, int constant", "static": "", "guessedname": "ADJ_SCOPE", "guessedtype": "property", "type": "int", "final": ""}, "onAvailStack": {"guessedname": "onAvailStack", "static": "", "description": "onAvailable listeners", "private": "", "guessedtype": "property"}, "listeners": {"description": "Cache of wrapped listeners", "private": "", "static": "", "guessedname": "listeners", "guessedtype": "property", "type": "array"}, "legacyHandlers": {"guessedname": "legacyHandlers", "static": "", "description": "Listener stack for DOM0 events", "private": "", "guessedtype": "property"}, "isIE": {"guessedname": "isIE", "static": "", "description": "IE detection needed to properly calculate pageX and pageY.  \ncapabilities checking didn't seem to work because another \nbrowser that does not provide the properties have the values \ncalculated in a different manner than IE.", "private": "", "guessedtype": "property"}, "unloadListeners": {"description": "User-defined unload function that will be fired before all events\nare detached", "private": "", "static": "", "guessedname": "unloadListeners", "guessedtype": "property", "type": "array"}, "retryCount": {"guessedname": "retryCount", "static": "", "description": "The number of times to poll after window.onload.  This number is\nincreased if additional late-bound handlers are requested after\nthe page load.", "private": "", "guessedtype": "property"}, "legacyMap": {"guessedname": "legacyMap", "static": "", "description": "Lookup table for legacy events", "private": "", "guessedtype": "property"}, "loadComplete": {"description": "True after the onload event has fired", "private": "", "static": "", "guessedname": "loadComplete", "guessedtype": "property", "type": "boolean"}, "FN": {"description": "Function to execute, int constant", "static": "", "guessedname": "FN", "guessedtype": "property", "type": "int", "final": ""}, "_interval": {"private": "", "description": "poll handle", "guessedname": "_interval", "guessedtype": "property"}}, "description": "The event utility provides functions to add and remove event listeners,\nevent cleansing.  It also tries to automatically remove listeners it\nregisters during the unload event."}, "YAHOO.util.Dom": {"name": "YAHOO.util.Dom", "namespace": "YAHOO.util", "module": "dom", "guessedname": "Dom", "methods": {"getElementsBy": {"params": [{"type": "Function", "name": "method", "description": " - A boolean method for testing elements which receives the element as its only argument."}, {"type": "String", "name": "tag", "description": " (optional) The tag name of the elements being collected"}, {"type": "String | HTMLElement", "name": "root", "description": " (optional) The HTMLElement or an ID to use as the starting point"}], "description": "Returns a array of HTMLElements that pass the test applied by supplied boolean method.\nFor optimized performance, include a tag and\/or root node when possible.", "guessedname": "getElementsBy", "guessedtype": "function"}, "generateId": {"return": {"type": "String | Array", "description": "The generated ID, or array of generated IDs (or original ID if already present on an element)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " (optional) An optional element array of elements to add an ID to (no ID is added if one is already present)."}, {"type": "String", "name": "prefix", "description": " (optional) an optional prefix to use (defaults to \"yui-gen\")."}], "description": "Generates a unique ID", "guessedname": "generateId", "guessedtype": "function"}, "getDocumentWidth": {"return": {"type": "Int", "description": "The width of the actual document (which includes the body and its margin)."}, "description": "Returns the width of the document.", "guessedname": "getDocumentWidth", "guessedtype": "function"}, "setStyle": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "String", "name": "property", "description": " The style property to be set."}, {"type": "String", "name": "val", "description": " The value to apply to the given property."}], "description": "Wrapper for setting style properties of HTMLElements.  Normalizes \"opacity\" across modern browsers.", "guessedname": "setStyle", "guessedtype": "function"}, "getX": {"return": {"type": "String | Array", "description": "The X position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}], "description": "Gets the current X position of an element based on page coordinates.  The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getX", "guessedtype": "function"}, "getY": {"return": {"type": "String | Array", "description": "The Y position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}], "description": "Gets the current Y position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getY", "guessedtype": "function"}, "getElementsByClassName": {"return": {"type": "Array", "description": "An array of elements that have the given class name"}, "params": [{"type": "String", "name": "className", "description": " The class name to match against"}, {"type": "String", "name": "tag", "description": " (optional) The tag name of the elements being collected"}, {"type": "String | HTMLElement", "name": "root", "description": " (optional) The HTMLElement or an ID to use as the starting point"}], "description": "Returns a array of HTMLElements with the given class.\nFor optimized performance, include a tag and\/or root node when possible.", "guessedname": "getElementsByClassName", "guessedtype": "function"}, "replaceClass": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to remove the class from"}, {"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for a given element or collection of elements.\nIf no oldClassName is present, the newClassName is simply added.", "guessedname": "replaceClass", "guessedtype": "function"}, "getDocumentHeight": {"return": {"type": "Int", "description": "The height of the actual document (which includes the body and its margin)."}, "description": "Returns the height of the document.", "guessedname": "getDocumentHeight", "guessedtype": "function"}, "getClientHeight": {"deprecated": "Now using getViewportHeight.  This interface left intact for back compat.", "return": {"type": "Int", "description": "The height of the viewable area of the page."}, "description": "Returns the height of the client (viewport).", "guessedname": "getClientHeight", "guessedtype": "function"}, "inDocument": {"return": {"type": "Boolean", "description": "Whether or not the element is present in the current document"}, "params": [{"type": "String | HTMLElement", "name": "el", "description": " The element to search for"}], "description": "Determines whether an HTMLElement is present in the current document.", "guessedname": "inDocument", "guessedtype": "function"}, "getViewportHeight": {"return": {"type": "Int", "description": "The height of the viewable area of the page (excludes scrollbars)."}, "description": "Returns the current height of the viewport.", "guessedname": "getViewportHeight", "guessedtype": "function"}, "addClass": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to add the class to"}, {"type": "String", "name": "className", "description": " the class name to add to the class attribute"}], "description": "Adds a class name to a given element or collection of elements.", "guessedname": "addClass", "guessedtype": "function"}, "getViewportWidth": {"return": {"type": "Int", "description": "The width of the viewable area of the page (excludes scrollbars)."}, "description": "Returns the current width of the viewport.", "guessedname": "getViewportWidth", "guessedtype": "function"}, "get": {"return": {"type": "HTMLElement | Array", "description": "A DOM reference to an HTML element or an array of HTMLElements."}, "params": [{"type": "String | HTMLElement |Array", "name": "el", "description": " Accepts a string to use as an ID for getting a DOM reference, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}], "description": "Returns an HTMLElement reference.", "guessedname": "get", "guessedtype": "function"}, "removeClass": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to remove the class from"}, {"type": "String", "name": "className", "description": " the class name to remove from the class attribute"}], "description": "Removes a class name from a given element or collection of elements.", "guessedname": "removeClass", "guessedtype": "function"}, "getStyle": {"return": {"type": "String | Array", "description": "The current value of the style property for the element(s)."}, "params": [{"type": "String | HTMLElement |Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "String", "name": "property", "description": " The style property whose value is returned."}], "description": "Normalizes currentStyle and ComputedStyle.", "guessedname": "getStyle", "guessedtype": "function"}, "setXY": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}, {"type": "Array", "name": "pos", "description": " Contains X & Y values for new position (coordinates are page-based)"}, {"type": "Boolean", "name": "noRetry", "description": " By default we try and set the position a second time if the first fails"}], "description": "Set the position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setXY", "guessedtype": "function"}, "setX": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "Int", "name": "x", "description": " The value to use as the X coordinate for the element(s)."}], "description": "Set the X position of an html element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setX", "guessedtype": "function"}, "setY": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "Int", "name": "x", "description": " To use as the Y coordinate for the element(s)."}], "description": "Set the Y position of an html element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setY", "guessedtype": "function"}, "getXY": {"return": {"type": "Array", "description": "The XY position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}], "description": "Gets the current position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getXY", "guessedtype": "function"}, "getClientWidth": {"deprecated": "Now using getViewportWidth.  This interface left intact for back compat.", "return": {"type": "Int", "description": "The width of the viewable area of the page."}, "description": "Returns the width of the client (viewport).", "guessedname": "getClientWidth", "guessedtype": "function"}, "getRegion": {"return": {"type": "Region | Array", "description": "A Region or array of Region instances containing \"top, left, bottom, right\" member data."}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}], "description": "Returns the region position of the given element.\nThe element must be part of the DOM tree to have a region (display:none or elements not appended return false).", "guessedname": "getRegion", "guessedtype": "function"}, "batch": {"return": {"type": "HTMLElement | Array", "description": "The element(s) with the method applied"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " (optional) An element or array of elements to apply the method to"}, {"type": "Function", "name": "method", "description": " The method to apply to the element(s)"}, {"type": "Any", "name": "o", "description": " (optional) An optional arg that is passed to the supplied method"}, {"type": "Boolean", "name": "override", "description": " (optional) Whether or not to override the scope of \"method\" with \"o\""}], "description": "Returns an array of elements that have had the supplied method applied.\nThe method is called with the element(s) as the first arg, and the optional param as the second ( method(el, o) ).", "guessedname": "batch", "guessedtype": "function"}, "isAncestor": {"return": {"type": "Boolean", "description": "Whether or not the haystack is an ancestor of needle"}, "params": [{"type": "String | HTMLElement", "name": "haystack", "description": " The possible ancestor"}, {"type": "String | HTMLElement", "name": "needle", "description": " The possible descendent"}], "description": "Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy.", "guessedname": "isAncestor", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean | Array", "description": "A boolean value or array of boolean values"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to test"}, {"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether an HTMLElement has the given className.", "guessedname": "hasClass", "guessedtype": "function"}}, "file": "Dom.js", "guessedtype": "property", "shortname": "Dom", "description": "Provides helper methods for DOM elements."}, "YAHOO.widget.Calendar2up": {"name": "YAHOO.widget.Calendar2up", "deprecated": "The old Calendar2up class is no longer necessary, since CalendarGroup renders in a 2up view by default.", "namespace": "YAHOO.widget", "module": "calendar", "guessedname": "Calendar2up", "extends": "YAHOO.widget.CalendarGroup", "superclass": "YAHOO.widget.CalendarGroup", "file": "CalendarGroup.js", "guessedtype": "function", "shortname": "Calendar2up", "properties": {"Cal2up": {"deprecated": "The old Calendar2up class is no longer necessary, since CalendarGroup renders in a 2up view by default.", "guessedname": "Cal2up", "guessedtype": "property"}}}, "YAHOO.widget.ContextMenu": {"name": "YAHOO.widget.ContextMenu", "configs": {"trigger": {"default": "null", "type": "String|<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-58190037\">HTMLElement<\/a>|Array", "description": "The HTML element(s) whose \"contextmenu\" event (\"mousedown\" \nfor Opera) trigger the display of the context menu.  Can be a string \nrepresenting the id attribute of the HTML element, an object reference \nfor the HTML element, or an array of strings or HTML element references.", "guessedname": "handler", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the context menu."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element to be used as the data source for the \ncontext menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-\nhtml.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object specifying the \n<code>&#60;div&#62;<\/code> element of the context menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-\nhtml.html#ID-94282980\">HTMLSelectElement<\/a>", "name": "p_oElement", "description": " Object specifying \nthe <code>&#60;select&#62;<\/code> element to be used as the data source for \nthe context menu."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the context menu. See configuration class documentation \nfor more details."}], "description": "Creates a list of options or commands which are made visible in response to \nan HTML element's \"contextmenu\" event (\"mousedown\" for Opera)."}], "namespace": "YAHOO.widget", "module": "menu", "guessedname": "ContextMenu", "methods": {"_onTriggerClick": {"guessedname": "_onTriggerClick", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed back \nby the event utility (YAHOO.util.Event)."}, {"type": "YAHOO.widget.ContextMenu", "name": "p_oMenu", "description": " Object representing the context \nmenu that is handling the event."}], "description": "\"click\" event handler for the HTML element(s) identified as the \n\"trigger\" for the context menu.  Used to cancel default behaviors in Opera.", "private": "", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the context menu."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element to be used as the data source for \nthe context menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-\nhtml.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object specifying the \n<code>&#60;div&#62;<\/code> element of the context menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-\nhtml.html#ID-94282980\">HTMLSelectElement<\/a>", "name": "p_oElement", "description": " Object specifying \nthe <code>&#60;select&#62;<\/code> element to be used as the data source for \nthe context menu."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the context menu. See configuration class documentation \nfor more details."}], "description": "The ContextMenu class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references for \npre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the context menu.", "guessedname": "toString", "guessedtype": "function"}, "_removeEventHandlers": {"description": "Removes all of the DOM event handlers from the HTML element(s) \nwhose \"context menu\" event (\"click\" for Opera) trigger the display of \nthe context menu.", "private": "", "guessedname": "_removeEventHandlers", "guessedtype": "function"}, "destroy": {"description": "Removes the context menu's <code>&#60;div&#62;<\/code> element \n(and accompanying child nodes) from the document.", "guessedname": "destroy", "guessedtype": "function"}, "_onTriggerContextMenu": {"guessedname": "_onTriggerContextMenu", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed back \nby the event utility (YAHOO.util.Event)."}, {"type": "YAHOO.widget.ContextMenu", "name": "p_oMenu", "description": " Object representing the context \nmenu that is handling the event."}], "description": "\"contextmenu\" event handler (\"mousedown\" for Opera) for the HTML \nelement(s) that trigger the display of the context menu.", "private": "", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be \nchanged using the context menu's Config object (\"cfg\").", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "configTrigger": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.ContextMenu", "name": "p_oMenu", "description": " Object representing the context \nmenu that fired the event."}], "description": "Event handler for when the value of the \"trigger\" configuration \nproperty changes.", "guessedname": "configTrigger", "guessedtype": "function"}}, "extends": "YAHOO.widget.Menu", "superclass": "YAHOO.widget.Menu", "file": "contextmenu.js", "guessedtype": "function", "shortname": "ContextMenu", "properties": {"_oTrigger": {"description": "Object reference to the current value of the \"trigger\" \nconfiguration property.", "default": "null", "private": "", "guessedname": "_oTrigger", "guessedtype": "property", "type": "String|<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/leve\nl-one-html.html#ID-58190037\">HTMLElement<\/a>|Array"}, "contextEventTarget": {"default": "null", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-\nhtml.html#ID-58190037\">HTMLElement<\/a>", "description": "Object reference for the HTML element that was the target of the\n\"contextmenu\" DOM event (\"mousedown\" for Opera) that triggered the display of \nthe context menu.", "guessedname": "contextEventTarget", "guessedtype": "property"}}, "description": "Creates a list of options or commands which are made visible in response to \nan HTML element's \"contextmenu\" event (\"mousedown\" for Opera)."}, "YAHOO.widget.Node": {"name": "YAHOO.widget.Node", "constructors": [{"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node"}, {"type": "Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded\/collapsed state"}], "description": "The base class for all tree nodes.  The node's presentation and behavior in\nresponse to mouse events is handled in Node subclasses."}], "namespace": "YAHOO.widget", "module": "treeview", "events": {"parentChange": {"type": "CustomEvent", "description": "The parentChange event is fired when a parent element is applied\nto the node.  This is useful if you need to apply tree-level\nproperties to a tree that need to happen if a node is moved from\none tre to another."}}, "guessedname": "Node", "methods": {"appendChild": {"return": {"type": "Node", "description": "the child node"}, "description": "Appends a node to the child collection.", "private": "", "params": [{"type": "Node", "name": "childNode", "description": "  the new node"}], "guessedname": "appendChild", "guessedtype": "function"}, "setDynamicLoad": {"params": [{"type": "function", "name": "fmDataLoader", "description": "  the function that will be used to get the data."}, {"type": "int", "name": "iconMode", "description": "  configures the icon that is displayed when a dynamic\nload node is expanded the first time without children.  By default, the \n\"collapse\" icon will be used.  If set to 1, the leaf node icon will be\ndisplayed."}], "description": "Configures this node for dynamically obtaining the child data\nwhen the node is first expanded.  Calling it without the callback\nwill turn off dynamic load for the node.", "guessedname": "setDynamicLoad", "guessedtype": "function"}, "getChildrenEl": {"return": {"type": "HTMLElement", "description": "this node's children div"}, "description": "Returns the div that was generated for this node's children", "guessedname": "getChildrenEl", "guessedtype": "function"}, "toggle": {"description": "Expands if node is collapsed, collapses otherwise.", "guessedname": "toggle", "guessedtype": "function"}, "collapse\ntoggle style.": {"description": "Hides this nodes children (creating them if necessary), changes the", "guessedname": "collapse", "guessedtype": "function"}, "getToggleEl": {"return": {"type": "HTMLElement", "description": "this node's toggle html element"}, "description": "Returns the element that is being used for this node's toggle.", "guessedname": "getToggleEl", "guessedtype": "function"}, "getHtml": {"return": {"type": "string", "description": "the markup for this node and its expanded children."}, "description": "Returns the markup for this node and its children.", "guessedname": "getHtml", "guessedtype": "function"}, "insertBefore": {"return": {"type": "Node", "description": "the inserted node"}, "params": [{"type": "Node", "name": "node", "description": "  the node to insert this node before"}], "description": "Inserts this node before this supplied node", "guessedname": "insertBefore", "guessedtype": "function"}, "hasChildren": {"return": {"type": "boolean", "description": "true if this has children or if it might and we are\nchecking for this condition."}, "params": [{"type": "boolean", "name": "checkForLazyLoad", "description": "  should we check for unloaded children?"}], "description": "Checks if this node has children.  If this node is lazy-loading and the\nchildren have not been rendered, we do not know whether or not there\nare actual children.  In most cases, we need to assume that there are\nchildren (for instance, the toggle needs to show the expandable \npresentation state).  In other times we want to know if there are rendered\nchildren.  For the latter, \"checkForLazyLoad\" should be false.", "guessedname": "hasChildren", "guessedtype": "function"}, "isDynamic": {"return": {"type": "boolean", "description": "true if this node's children are to be loaded dynamically"}, "description": "Evaluates if this node's children should be loaded dynamically.  Looks for\nthe property both in this instance and the root node.  If the tree is\ndefined to load all children dynamically, the data callback function is\ndefined in the root node", "guessedname": "isDynamic", "guessedtype": "function"}, "init": {"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node"}, {"type": "Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded\/collapsed state"}], "description": "Initializes this node, gets some of the properties from the parent", "guessedname": "init", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": "the container html element"}, "description": "Returns this node's container html element", "guessedname": "getEl", "guessedtype": "function"}, "appendTo": {"return": {"type": "Node", "description": "The appended node"}, "params": [{"type": "Node", "name": "parentNode", "description": "  the node to append to."}], "description": "Appends this node to the supplied node's child collection", "guessedname": "appendTo", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the node"}, "description": "Node toString", "guessedname": "toString", "guessedtype": "function"}, "showChildren": {"description": "Shows this node's children", "guessedname": "showChildren", "guessedtype": "function"}, "insertAfter": {"return": {"type": "Node", "description": "the inserted node"}, "params": [{"type": "Node", "name": "node", "description": "  the node to insert after"}], "description": "Inserts this node after the supplied node", "guessedname": "insertAfter", "guessedtype": "function"}, "getChildrenElId": {"return": {"type": "string", "description": "the element id for this node's children div"}, "description": "Returns the id for this node's children div", "guessedname": "getChildrenElId", "guessedtype": "function"}, "getDepthStyle": {"return": {"type": "string", "description": "the css class for the spacer"}, "params": [{"type": "int", "name": "depth", "description": " the depth of the ancestor."}], "description": "Returns the css class for the spacer at the specified depth for\nthis node.  If this node's ancestor at the specified depth\nhas a next sibling the presentation is different than if it\ndoes not have a next sibling", "guessedname": "getDepthStyle", "guessedtype": "function"}, "expandAll": {"description": "Recursively expands all of this node's children.", "guessedname": "expandAll", "guessedtype": "function"}, "getToggleLink": {"return": {"type": "string", "description": "the javascript url for toggling this node"}, "description": "Generates the link that will invoke this node's toggle method", "guessedname": "getToggleLink", "guessedtype": "function"}, "getSiblings": {"return": {"type": "", "description": "Node[]"}, "description": "Returns a node array of this node's siblings, null if none.", "guessedname": "getSiblings", "guessedtype": "function"}, "getStyle": {"return": {"type": "string", "description": "the css class for this node's toggle"}, "description": "Returns the css style name for the toggle", "guessedname": "getStyle", "guessedtype": "function"}, "getNodeHtml": {"return": {"type": "string", "description": "The HTML that will render this node."}, "description": "Get the markup for the node.  This is designed to be overrided so that we can\nsupport different types of nodes.", "guessedname": "getNodeHtml", "guessedtype": "function"}, "getIconMode": {"return": {"type": "int", "description": "0 for collapse style, 1 for leaf node style"}, "description": "Returns the current icon mode.  This refers to the way childless dynamic\nload nodes appear.", "guessedname": "getIconMode", "guessedtype": "function"}, "hideChildren": {"description": "Hides this node's children", "guessedname": "hideChildren", "guessedtype": "function"}, "getAncestor": {"return": {"type": "Node", "description": "the ancestor"}, "params": [{"type": "int", "name": "depth", "description": " the depth of the ancestor."}], "description": "Returns this node's ancestor at the specified depth.", "guessedname": "getAncestor", "guessedtype": "function"}, "loadComplete": {"description": "Load complete is the callback function we pass to the data provider\nin dynamic load situations.", "guessedname": "loadComplete", "guessedtype": "function"}, "expand": {"description": "Shows this nodes children (creating them if necessary), changes the\ntoggle style, and collapses its siblings if multiExpand is not set.", "guessedname": "expand", "guessedtype": "function"}, "getElId": {"return": {"type": "string", "description": "the element id"}, "description": "Returns the id for this node's container div", "guessedname": "getElId", "guessedtype": "function"}, "isRoot": {"return": {"type": "boolean", "description": "true if this is the root node"}, "description": "Evaluates if this node is the root node of the tree", "guessedname": "isRoot", "guessedtype": "function"}, "completeRender": {"return": {"type": "string", "description": "children html"}, "description": "Called when we know we have all the child data.", "guessedname": "completeRender", "guessedtype": "function"}, "isChildOf": {"return": {"type": "boolean", "description": "The node index if this Node is a child of \nsupplied Node, else -1."}, "description": "Returns true if the Node is a child of supplied Node", "private": "", "params": [{"type": "Node", "name": "parentNode", "description": "  the Node to check"}], "guessedname": "isChildOf", "guessedtype": "function"}, "getChildrenHtml": {"guessedname": "getChildrenHtml", "return": {"type": "string", "description": "the children container div html and any expanded children"}, "description": "Called when first rendering the tree.  We always build the div that will\ncontain this nodes children, but we don't render the children themselves\nunless this node is expanded.", "private": "", "guessedtype": "function"}, "refresh": {"description": "Regenerates the html for this node and its children.  To be used when the\nnode is expanded and new children have been added.", "guessedname": "refresh", "guessedtype": "function"}, "getToggleElId": {"return": {"type": "string", "description": "the toggel element id"}, "description": "Returns the id for this node's toggle element", "guessedname": "getToggleElId", "guessedtype": "function"}, "renderChildren": {"guessedname": "renderChildren", "return": {"type": "string", "description": "the html for this node's children"}, "description": "Generates the markup for the child nodes.  This is not done until the node\nis expanded.", "private": "", "guessedtype": "function"}, "getHoverStyle": {"return": {"type": "string", "description": "the css class hover state"}, "description": "Returns the hover style for the icon", "guessedname": "getHoverStyle", "guessedtype": "function"}, "collapseAll": {"description": "Recursively collapses all of this node's children.", "guessedname": "collapseAll", "guessedtype": "function"}, "applyParent": {"return": {"type": "boolean", "description": "true if the application was successful"}, "params": [{"type": "Node", "name": "parentNode", "description": " this node's parent node"}], "description": "Certain properties for the node cannot be set until the parent\nis known. This is called after the node is inserted into a tree.\nthe parent is also applied to this node's children in order to\nmake it possible to move a branch from one tree to another.", "guessedname": "applyParent", "guessedtype": "function"}}, "file": "Node.js", "guessedtype": "function", "shortname": "Node", "properties": {"multiExpand": {"type": "boolean", "description": "Can multiple children be expanded at once?", "guessedname": "multiExpand", "guessedtype": "property"}, "index": {"type": "int", "description": "The index for this instance obtained from global counter in YAHOO.widget.TreeView.", "guessedname": "index", "guessedtype": "property"}, "_type": {"private": "", "description": "The node type", "guessedname": "_type", "guessedtype": "property"}, "dataLoader": {"type": "function", "description": "Function to execute when we need to get this node's child data.", "guessedname": "dataLoader", "guessedtype": "property"}, "hasIcon": {"type": "boolean", "description": "The toggle\/branch icon will not show if this is set to false.  This\ncould be useful if the implementer wants to have the child contain\nextra info about the parent, rather than an actual node.", "guessedname": "hasIcon", "guessedtype": "property"}, "target": {"type": "string", "description": "The label href target, defaults to current window", "guessedname": "target", "guessedtype": "property"}, "parent": {"type": "Node", "description": "Parent node", "guessedname": "parent", "guessedtype": "property"}, "previousSibling": {"type": "Node", "description": "This node's previous sibling", "guessedname": "previousSibling", "guessedtype": "property"}, "nextSibling": {"type": "Node", "description": "This node's next sibling", "guessedname": "nextSibling", "guessedtype": "property"}, "expanded": {"type": "boolean", "description": "The node's expanded\/collapsed state", "guessedname": "expanded", "guessedtype": "property"}, "tree": {"type": "TreeView", "description": "Tree instance this node is part of", "guessedname": "tree", "guessedtype": "property"}, "iconMode": {"type": "int", "description": "Used to configure what happens when a dynamic load node is expanded\nand we discover that it does not have children.  By default, it is\ntreated as if it still could have children (plus\/minus icon).  Set\niconMode to have it display like a leaf node instead.", "guessedname": "iconMode", "guessedtype": "property"}, "dynamicLoadComplete": {"type": "boolean", "description": "Dynamically loaded nodes only fetch the data the first time they are\nexpanded.  This flag is set to true once the data has been fetched.", "guessedname": "dynamicLoadComplete", "guessedtype": "property"}, "renderHidden": {"type": "boolean", "description": "Should we render children for a collapsed node?  It is possible that the\nimplementer will want to render the hidden data...  @todo verify that we \nneed this, and implement it if we do.", "guessedname": "renderHidden", "guessedtype": "property"}, "depth": {"type": "int", "description": "The depth of this node.  We start at -1 for the root node.", "guessedname": "depth", "guessedtype": "property"}, "href": {"type": "string", "description": "The href for the node's label.  If one is not specified, the href will\nbe set so that it toggles the node.", "guessedname": "href", "guessedtype": "property"}, "_dynLoad": {"guessedname": "_dynLoad", "type": "boolean", "description": "We can set the node up to call an external method to get the child\ndata dynamically.", "private": "", "guessedtype": "property"}, "isLoading": {"type": "boolean", "description": "This is true for dynamically loading nodes while waiting for the\ncallback to return.", "guessedname": "isLoading", "guessedtype": "property"}, "childrenRendered": {"type": "boolean", "description": "This flag is set to true when the html is generated for this node's\nchildren, and set to false when new children are added.", "guessedname": "childrenRendered", "guessedtype": "property"}, "data": {"type": "object", "description": "The data linked to this node.  This can be any object or primitive\nvalue, and the data can be used in getNodeHtml().", "guessedname": "data", "guessedtype": "property"}, "children": {"type": "Node[]", "description": "This node's child node collection.", "guessedname": "children", "guessedtype": "property"}}, "description": "The base class for all tree nodes.  The node's presentation and behavior in\nresponse to mouse events is handled in Node subclasses."}, "YAHOO.util.Easing": {"name": "YAHOO.util.Easing", "namespace": "YAHOO.util", "module": "animation", "guessedname": "Easing", "methods": {"easeIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end. (quadratic)", "guessedname": "easeIn", "guessedtype": "function"}, "easeInStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end. (quartic)", "guessedname": "easeInStrong", "guessedtype": "function"}, "bounceBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off start and end.", "guessedname": "bounceBoth", "guessedtype": "function"}, "backOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Overshoots end, then reverses and comes back to end.", "guessedname": "backOut", "guessedtype": "function"}, "elasticBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap both elastic effect.", "guessedname": "elasticBoth", "guessedtype": "function"}, "elasticOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap out elastic effect.", "guessedname": "elasticOut", "guessedtype": "function"}, "bounceOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off end.", "guessedname": "bounceOut", "guessedtype": "function"}, "backBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction, overshoots end, \nthen reverses and comes back to end.", "guessedname": "backBoth", "guessedtype": "function"}, "easeBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end. (quadratic)", "guessedname": "easeBoth", "guessedtype": "function"}, "bounceIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounce off of start.", "guessedname": "bounceIn", "guessedtype": "function"}, "easeOutStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.  (quartic)", "guessedname": "easeOutStrong", "guessedtype": "function"}, "easeNone": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Uniform speed between points.", "guessedname": "easeNone", "guessedtype": "function"}, "elasticIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap in elastic effect.", "guessedname": "elasticIn", "guessedtype": "function"}, "easeBothStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end. (quartic)", "guessedname": "easeBothStrong", "guessedtype": "function"}, "easeOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.  (quadratic)", "guessedname": "easeOut", "guessedtype": "function"}, "backIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction and moves to end.", "guessedname": "backIn", "guessedtype": "function"}}, "file": "Easing.js", "guessedtype": "property", "shortname": "Easing", "description": "Singleton that determines how an animation proceeds from start to end."}, "YAHOO.util.DragDropMgr": {"name": "YAHOO.util.DragDropMgr", "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "DragDropMgr", "methods": {"removeDDFromGroup": {"guessedname": "removeDDFromGroup", "static": "", "description": "Removes the supplied dd instance from the supplied group. Executed\nby DragDrop.removeFromGroup, so don't call this function directly.", "private": "", "guessedtype": "function"}, "startDrag": {"static": "", "params": [{"type": "int", "name": "x", "description": "  the X position of the original mousedown"}, {"type": "int", "name": "y", "description": "  the Y position of the original mousedown"}], "description": "Fired when either the drag pixel threshol or the mousedown hold \ntime threshold has been met.", "guessedname": "startDrag", "guessedtype": "function"}, "getDDById": {"return": {"type": "DragDrop", "description": "the drag drop object, null if it is not found"}, "description": "Returns the DragDrop instance for a given id", "static": "", "guessedname": "getDDById", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the id of the DragDrop object"}]}, "unregAll": {"guessedname": "unregAll", "static": "", "description": "Cleans up the drag and drop events and objects.", "private": "", "guessedtype": "function"}, "getScrollTop": {"static": "", "return": {"type": "int", "description": "the document's scrollTop"}, "description": "Gets the scrollTop", "guessedname": "getScrollTop", "guessedtype": "function"}, "stopEvent": {"static": "", "params": [{"type": "Event", "name": "e", "description": " the event as returned by this.getEvent()"}], "description": "Utility to stop event propagation and event default, if these \nfeatures are turned on.", "guessedname": "stopEvent", "guessedtype": "function"}, "getClientWidth": {"return": {"type": "int", "description": "client width in px"}, "description": "Gets the client width", "deprecated": "use YAHOO.util.Dom.getViewportWidth instead", "static": "", "guessedname": "getClientWidth", "guessedtype": "function"}, "unlock": {"static": "", "description": "Unlock all drag and drop functionality", "guessedname": "unlock", "guessedtype": "function"}, "stopDrag": {"description": "Internal function to clean up event handlers after the drag \noperation is complete", "private": "", "static": "", "guessedname": "stopDrag", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event"}]}, "getPosX": {"return": {"type": "int", "description": "the X coordinate"}, "description": "Returns the X position of an html element", "deprecated": "use YAHOO.util.Dom.getX instead", "static": "", "guessedname": "getPosX", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element for which to get the position"}]}, "_onResize": {"guessedname": "_onResize", "static": "", "description": "Reset constraints on all drag and drop objs", "private": "", "guessedtype": "function"}, "_onLoad": {"guessedname": "_onLoad", "static": "", "description": "Drag and drop initialization.  Sets up the global event handlers", "private": "", "guessedtype": "function"}, "fireEvents": {"description": "Iterates over all of the DragDrop elements to find ones we are \nhovering over or dropping on", "private": "", "static": "", "guessedname": "fireEvents", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event"}, {"type": "boolean", "name": "isDrop", "description": " is this a drop op or a mouseover op?"}]}, "handleMouseDown": {"description": "Fired after a registered DragDrop object gets the mousedown event.\nSets up the events required to track the object being dragged", "private": "", "static": "", "guessedname": "handleMouseDown", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event"}, {"type": "", "name": "oDD", "description": " the DragDrop object being dragged"}]}, "regDragDrop": {"static": "", "params": [{"type": "DragDrop", "name": "oDD", "description": " the DragDrop object to register"}, {"type": "String", "name": "sGroup", "description": " the name of the group this element belongs to"}], "description": "Each DragDrop instance must be registered with the DragDropMgr.  \nThis is executed in DragDrop.init()", "guessedname": "regDragDrop", "guessedtype": "function"}, "handleMouseMove": {"description": "Internal function to handle the mousemove event.  Will be invoked \nfrom the context of the html element.", "private": "", "static": "", "guessedname": "handleMouseMove", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event"}], "todo": "figure out what we can do about mouse events lost when the \nuser drags objects beyond the window boundary.  Currently we can \ndetect this in internet explorer by verifying that the mouse is \ndown during the mousemove event.  Firefox doesn't give us the \nbutton state on the mousemove event."}, "getElement": {"return": {"type": "Object", "description": "The element"}, "description": "Returns the actual DOM element", "deprecated": "use YAHOO.util.Dom.get instead", "static": "", "guessedname": "getElement", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the id of the elment to get"}]}, "init": {"guessedname": "init", "static": "", "description": "Called the first time an element is registered.", "private": "", "guessedtype": "function"}, "_execOnAll": {"guessedname": "_execOnAll", "static": "", "description": "Runs method on all drag and drop objects", "private": "", "guessedtype": "function"}, "getCss": {"return": {"type": "Object", "description": "The style property of the element"}, "description": "Returns the style property for the DOM element (i.e., \ndocument.getElById(id).style)", "deprecated": "use YAHOO.util.Dom instead", "static": "", "guessedname": "getCss", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the id of the elment to get"}]}, "_remove": {"guessedname": "_remove", "static": "", "description": "Unregisters a drag and drop item.  This is executed in \nDragDrop.unreg, use that method instead of calling this directly.", "private": "", "guessedtype": "function"}, "isTypeOfDD": {"return": {"type": "boolean", "description": "true if typeof oDD = DragDrop"}, "description": "My goal is to be able to transparently determine if an object is\ntypeof DragDrop, and the exact subclass of DragDrop.  typeof \nreturns \"object\", oDD.constructor.toString() always returns\n\"DragDrop\" and not the name of the subclass.  So for now it just\nevaluates a well-known variable in DragDrop.", "static": "", "guessedname": "isTypeOfDD", "guessedtype": "function", "params": [{"type": "Object", "name": "the", "description": " object to evaluate"}]}, "isLocked": {"static": "", "return": {"type": "boolean", "description": "True if drag and drop is locked, false otherwise."}, "description": "Is drag and drop locked?", "guessedname": "isLocked", "guessedtype": "function"}, "getClientHeight": {"return": {"type": "int", "description": "client height in px"}, "description": "Gets the client height", "deprecated": "use YAHOO.util.Dom.getViewportHeight instead", "static": "", "guessedname": "getClientHeight", "guessedtype": "function"}, "getBestMatch": {"return": {"type": "DragDrop", "description": "The best single match"}, "description": "Helper function for getting the best match from the list of drag \nand drop objects returned by the drag and drop events when we are \nin INTERSECT mode.  It returns either the first object that the \ncursor is over, or the object that has the greatest overlap with \nthe dragged element.", "static": "", "guessedname": "getBestMatch", "guessedtype": "function", "params": [{"type": "DragDrop[]", "name": "dds", "description": " The array of drag and drop objects \ntargeted"}]}, "lock": {"static": "", "description": "Lock all drag and drop functionality", "guessedname": "lock", "guessedtype": "function"}, "numericSort": {"static": "", "description": "Numeric array sort function", "guessedname": "numericSort", "guessedtype": "function"}, "isOverTarget": {"return": {"type": "boolean", "description": "true if the mouse is over the target"}, "description": "Checks the cursor location to see if it over the target", "private": "", "static": "", "guessedname": "isOverTarget", "guessedtype": "function", "params": [{"type": "YAHOO.util.Point", "name": "pt", "description": " The point to evaluate"}, {"type": "DragDrop", "name": "oTarget", "description": " the DragDrop object we are inspecting"}]}, "isDragDrop": {"return": {"type": "boolean", "description": "true if this element is a DragDrop item, \nfalse otherwise"}, "description": "Utility function to determine if a given element has been \nregistered as a drag drop item.", "static": "", "guessedname": "isDragDrop", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the element id to check"}]}, "_onUnload": {"guessedname": "_onUnload", "static": "", "description": "unload event handler", "private": "", "guessedtype": "function"}, "getLocation": {"return": {"type": "YAHOO.util.Region", "description": "a Region object representing the total area\nthe element occupies, including any padding\nthe instance is configured for."}, "description": "Returns a Region object containing the drag and drop element's position\nand size, including the padding configured for it", "static": "", "guessedname": "getLocation", "guessedtype": "function", "params": [{"type": "DragDrop", "name": "oDD", "description": " the drag and drop object to get the \nlocation for"}]}, "regHandle": {"static": "", "params": [{"type": "String", "name": "sDDId", "description": " the DragDrop id this element is a handle for"}, {"type": "String", "name": "sHandleId", "description": " the id of the element that is the drag \nhandle"}], "description": "Each DragDrop handle element must be registered.  This is done\nautomatically when executing DragDrop.setHandleElId()", "guessedname": "regHandle", "guessedtype": "function"}, "getRelated": {"return": {"type": "DragDrop[]", "description": "the related instances"}, "description": "Returns the drag and drop instances that are in all groups the\npassed in instance belongs to.", "static": "", "guessedname": "getRelated", "guessedtype": "function", "params": [{"type": "DragDrop", "name": "p_oDD", "description": " the obj to get related data for"}, {"type": "boolean", "name": "bTargetsOnly", "description": " if true, only return targetable objs"}]}, "handleWasClicked": {"static": "", "params": [{"type": "", "name": "node", "description": " the html element to inspect"}], "description": "Recursively searches the immediate parent and all child nodes for \nthe handle element in order to determine wheter or not it was \nclicked.", "guessedname": "handleWasClicked", "guessedtype": "function"}, "swapNode": {"static": "", "params": [{"type": "", "name": "n1", "description": " the first node to swap"}, {"type": "", "name": "n2", "description": " the other node to swap"}], "description": "Swap two nodes.  In IE, we use the native method, for others we \nemulate the IE behavior", "guessedname": "swapNode", "guessedtype": "function"}, "getScrollLeft": {"static": "", "return": {"type": "int", "description": "the document's scrollTop"}, "description": "Gets the scrollLeft", "guessedname": "getScrollLeft", "guessedtype": "function"}, "getElWrapper": {"return": {"type": "YAHOO.util.DDM.ElementWrapper", "description": "the wrapped element"}, "description": "Get the wrapper for the DOM element specified", "deprecated": "This wrapper isn't that useful", "private": "", "static": "", "guessedname": "getElWrapper", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the id of the element to get"}]}, "_addListeners": {"guessedname": "_addListeners", "static": "", "description": "Trying to make the load order less important.  Without this we get\nan error if this file is loaded before the Event Utility.", "private": "", "guessedtype": "function"}, "getStyle": {"return": {"type": "string", "description": "The value of the style property"}, "description": "Returns the specified element style property", "deprecated": "use YAHOO.util.Dom.getStyle", "static": "", "guessedname": "getStyle", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "          the element"}, {"type": "string", "name": "styleProp", "description": "   the style property"}]}, "getPosY": {"return": {"type": "int", "description": "the Y coordinate"}, "description": "Returns the Y position of an html element", "deprecated": "use YAHOO.util.Dom.getY instead", "static": "", "guessedname": "getPosY", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element for which to get the position"}]}, "isLegalTarget": {"return": {"type": "boolean", "description": "true if the target is a legal target for the \ndd obj"}, "description": "Returns true if the specified dd target is a legal target for \nthe specifice drag obj", "static": "", "guessedname": "isLegalTarget", "guessedtype": "function", "params": [{"type": "DragDrop", "name": "the", "description": " drag obj"}, {"type": "DragDrop", "name": "the", "description": " target"}]}, "refreshCache": {"description": "Refreshes the cache of the top-left and bottom-right points of the \ndrag and drop objects in the specified group(s).  This is in the\nformat that is stored in the drag and drop instance, so typical \nusage is:\n<code>\nYAHOO.util.DragDropMgr.refreshCache(ddinstance.groups);\n<\/code>\nAlternatively:\n<code>\nYAHOO.util.DragDropMgr.refreshCache({group1:true, group2:true});\n<\/code>", "static": "", "guessedname": "refreshCache", "guessedtype": "function", "params": [{"type": "Object", "name": "groups", "description": " an associative array of groups to refresh"}], "todo": "this really should be an indexed array.  Alternatively this\nmethod could accept both."}, "isHandle": {"return": {"type": "boolean", "description": "true if this element is a DragDrop handle, false \notherwise"}, "description": "Utility function to determine if a given element has been \nregistered as a drag drop handle for the given Drag Drop object.", "static": "", "guessedname": "isHandle", "guessedtype": "function", "params": [{"type": "String", "name": "id", "description": " the element id to check"}]}, "handleMouseUp": {"description": "Internal function to handle the mouseup event.  Will be invoked \nfrom the context of the document.", "private": "", "static": "", "guessedname": "handleMouseUp", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event"}]}, "verifyEl": {"return": {"type": "boolean", "description": "true if the element looks usable"}, "description": "This checks to make sure an element exists and is in the DOM.  The\nmain purpose is to handle cases where innerHTML is used to remove\ndrag and drop objects from the DOM.  IE provides an 'unspecified\nerror' when trying to access the offsetParent of such an element", "static": "", "guessedname": "verifyEl", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to check"}]}, "getScroll": {"guessedname": "getScroll", "static": "", "description": "Returns the current scroll position", "private": "", "guessedtype": "function"}, "moveToEl": {"static": "", "params": [{"type": "HTMLElement", "name": "moveEl", "description": "      The element to move"}, {"type": "HTMLElement", "name": "targetEl", "description": "    The position reference element"}], "description": "Sets the x\/y position of an element to the location of the\ntarget element.", "guessedname": "moveToEl", "guessedtype": "function"}}, "static": "", "file": "DragDropMgr.js", "guessedtype": "function", "shortname": "DragDropMgr", "properties": {"dragThreshMet": {"description": "Flag that indicates that either the drag pixel threshold or the \nmousdown time threshold has been met", "private": "", "static": "", "guessedname": "dragThreshMet", "guessedtype": "property", "type": "boolean"}, "clickPixelThresh": {"type": "int", "static": "", "description": "The number of pixels that the mouse needs to move after the \nmousedown before the drag is initiated.  Default=3;", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "_timeoutCount": {"guessedname": "_timeoutCount", "static": "", "description": "Internal counter", "private": "", "guessedtype": "property"}, "initialized": {"guessedname": "initalized", "static": "", "description": "Internal flag that is set to true when drag and drop has been\nintialized", "private": "", "guessedtype": "property"}, "elementCache": {"guessedname": "elementCache", "static": "", "description": "A cache of DOM elements", "private": "", "guessedtype": "property"}, "stopPropagation": {"type": "boolean", "static": "", "description": "Flag to determine if we should stop the propagation of the events \nwe generate. This is true by default but you may want to set it to\nfalse if the html element contains other features that require the\nmouse click.", "guessedname": "stopPropagation", "guessedtype": "property"}, "handleIds": {"description": "Array of element ids defined as drag handles.  Used to determine \nif the element that generated the mousedown event is actually the \nhandle and not the html element itself.", "private": "", "static": "", "guessedname": "handleIds", "guessedtype": "property", "type": "{string: string}"}, "POINT": {"type": "int", "static": "", "description": "In point mode, drag and drop interaction is defined by the \nlocation of the cursor during the drag\/drop", "guessedname": "POINT", "guessedtype": "property"}, "deltaX": {"description": "the X distance between the cursor and the object being dragged", "private": "", "static": "", "guessedname": "deltaX", "guessedtype": "property", "type": "int"}, "deltaY": {"description": "the Y distance between the cursor and the object being dragged", "private": "", "static": "", "guessedname": "deltaY", "guessedtype": "property", "type": "int"}, "dragOvers": {"description": "the DragDrop object(s) that are being hovered over", "private": "", "static": "", "guessedname": "dragOvers", "guessedtype": "property", "type": "Array"}, "useCache": {"type": "boolean", "static": "", "description": "Set useCache to false if you want to force object the lookup of each\ndrag and drop linked element constantly during a drag.", "guessedname": "useCache", "guessedtype": "property"}, "clickTimeThresh": {"type": "int", "static": "", "description": "The number of milliseconds after the mousedown event to initiate the\ndrag if we don't get a mouseup event. Default=1000", "guessedname": "clickTimeThresh", "guessedtype": "property"}, "startX": {"description": "The X position of the mousedown event stored for later use when a \ndrag threshold is met.", "private": "", "static": "", "guessedname": "startX", "guessedtype": "property", "type": "int"}, "startY": {"description": "The Y position of the mousedown event stored for later use when a \ndrag threshold is met.", "private": "", "static": "", "guessedname": "startY", "guessedtype": "property", "type": "int"}, "clickTimeout": {"description": "Timeout used for the click time threshold", "private": "", "static": "", "guessedname": "clickTimeout", "guessedtype": "property", "type": "Object"}, "locationCache": {"guessedname": "locationCache", "static": "", "description": "Location cache that is set for all drag drop objects when a drag is\ninitiated, cleared when the drag is finished.", "private": "", "guessedtype": "property"}, "INTERSECT": {"type": "int", "static": "", "description": "In intersect mode, drag and drop interactio nis defined by the \noverlap of two or more drag and drop objects.", "guessedname": "INTERSECT", "guessedtype": "property"}, "locked": {"guessedname": "locked", "static": "", "description": "All drag and drop can be disabled.", "private": "", "guessedtype": "property"}, "dragCurrent": {"description": "the DragDrop object that is currently being dragged", "private": "", "static": "", "guessedname": "dragCurrent", "guessedtype": "property", "type": "DragDrop"}, "preventDefault": {"type": "boolean", "static": "", "description": "Flag to determine if we should prevent the default behavior of the\nevents we define. By default this is true, but this can be set to \nfalse if you need the default behavior (not recommended)", "guessedname": "preventDefault", "guessedtype": "property"}, "ids": {"description": "Two dimensional Array of registered DragDrop objects.  The first \ndimension is the DragDrop item group, the second the DragDrop \nobject.", "private": "", "static": "", "guessedname": "ids", "guessedtype": "property", "type": "{string: string}"}, "mode": {"type": "int", "static": "", "description": "The current drag and drop mode.  Default: POINT", "guessedname": "mode", "guessedtype": "property"}}, "description": "DragDropMgr is a singleton that tracks the element interaction for \nall DragDrop items in the window.  Generally, you will not call \nthis class directly, but it does have helper methods that could \nbe useful in your DragDrop implementations."}, "YAHOO.widget.TVFadeIn": {"name": "YAHOO.widget.TVFadeIn", "constructors": [{"params": [{"type": "HTMLElement", "name": "el", "description": "  the element to animate"}, {"type": "function", "name": "callback", "description": "  function to invoke when the animation is finished"}], "description": "A 1\/2 second fade-in animation."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "TVFadeIn", "methods": {"onComplete": {"description": "Clean up and invoke callback", "guessedname": "onComplete", "guessedtype": "function"}, "animate": {"description": "Performs the animation", "guessedname": "animate", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "the string representation of the instance"}, "description": "toString", "guessedname": "toString", "guessedtype": "function"}}, "file": "TVFadeIn.js", "guessedtype": "function", "shortname": "TVFadeIn", "properties": {"el": {"type": "HTMLElement", "description": "The element to animate", "guessedname": "el", "guessedtype": "property"}, "callback": {"type": "function", "description": "the callback to invoke when the animation is complete", "guessedname": "callback", "guessedtype": "property"}}, "description": "A 1\/2 second fade-in animation."}, "YAHOO.widget.CalendarGroup": {"name": "YAHOO.widget.CalendarGroup", "configs": {"SHOW_WEEKDAYS": {"default": "true", "type": "Boolean", "description": "True if the Calendar should show weekday labels. True by default.", "guessedname": "value", "guessedtype": "property"}, "MDY_DAY_POSITION": {"default": "2", "type": "Number", "description": "The position of the day in a month\/day\/year date string", "guessedname": "value", "guessedtype": "property"}, "MY_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month\/year date string", "guessedname": "value", "guessedtype": "property"}, "MONTHS_SHORT": {"default": "[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]", "type": "String[]", "description": "The short month labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MULTI_SELECT": {"default": "false", "type": "Boolean", "description": "True if the Calendar should allow multiple selections. False by default.", "guessedname": "value", "guessedtype": "property"}, "DATE_FIELD_DELIMITER": {"default": "\"\/\"", "type": "String", "description": "The value used to delimit date fields in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "MY_YEAR_POSITION": {"default": "2", "type": "Number", "description": "The position of the year in a month\/year date string", "guessedname": "value", "guessedtype": "property"}, "close": {"default": "false", "type": "Boolean", "description": "Whether or not a close button should be displayed for this CalendarGroup", "guessedname": "value", "guessedtype": "property"}, "MONTHS_LONG": {"default": "[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"", "type": "String[]", "description": "The long month labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_MEDIUM": {"default": "[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]", "type": "String[]", "description": "The medium weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "LOCALE_WEEKDAYS": {"default": "\"short\"", "type": "String", "description": "The setting that determines which length of weekday labels should be used. Possible values are \"1char\", \"short\", \"medium\", and \"long\".", "guessedname": "value", "guessedtype": "property"}, "DATE_RANGE_DELIMITER": {"default": "\"-\"", "type": "String", "description": "The value used to delimit date ranges in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEK_HEADER": {"default": "false", "type": "Boolean", "description": "True if the Calendar should show week row headers. False by default.", "guessedname": "value", "guessedtype": "property"}, "title": {"default": "\"\"", "type": "String", "description": "The title to display above the CalendarGroup's month header", "guessedname": "value", "guessedtype": "property"}, "maxdate": {"default": "null", "type": "String", "description": "The maximum selectable date in the current Calendar (mm\/dd\/yyyy)", "guessedname": "value", "guessedtype": "property"}, "selected": {"default": "[]", "type": "String", "description": "The date or range of dates representing the current Calendar selection", "guessedname": "value", "guessedtype": "property"}, "pages": {"default": "2", "type": "Number", "description": "The number of pages to include in the CalendarGroup. This value can only be set once, in the CalendarGroup's constructor arguments.", "guessedname": "value", "guessedtype": "property"}, "NAV_ARROW_RIGHT": {"default": "YAHOO.widget.Calendar.IMG_ROOT + \"us\/tr\/calrt.gif\"", "type": "String", "description": "The image that should be used for the left navigation arrow.", "guessedname": "value", "guessedtype": "property"}, "HIDE_BLANK_WEEKS": {"default": "false", "type": "Boolean", "description": "True if the Calendar should suppress weeks that are not a part of the current month. False by default.", "guessedname": "value", "guessedtype": "property"}, "mindate": {"default": "null", "type": "String", "description": "The minimum selectable date in the current Calendar (mm\/dd\/yyyy)", "guessedname": "value", "guessedtype": "property"}, "START_WEEKDAY": {"default": "0", "type": "number", "description": "The weekday the week begins on. Default is 0 (Sunday).", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEK_FOOTER": {"default": "false", "type": "Boolean", "description": "True if the Calendar should show week row footers. False by default.", "guessedname": "value", "guessedtype": "property"}, "MDY_YEAR_POSITION": {"default": "3", "type": "Number", "description": "The position of the year in a month\/day\/year date string", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_LONG": {"default": "[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]", "type": "String[]", "description": "The long weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MDY_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month\/day\/year date string", "guessedname": "value", "guessedtype": "property"}, "pagedate": {"default": "today's date", "type": "String", "description": "The month\/year representing the current visible Calendar date (mm\/yyyy)", "guessedname": "value", "guessedtype": "property"}, "MD_DAY_POSITION": {"default": "2", "type": "Number", "description": "The position of the day in a month\/year date string", "guessedname": "value", "guessedtype": "property"}, "NAV_ARROW_LEFT": {"default": "YAHOO.widget.Calendar.IMG_ROOT + \"us\/tr\/callt.gif\"", "type": "String", "description": "The image that should be used for the left navigation arrow.", "guessedname": "value", "guessedtype": "property"}, "MD_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month\/day date string", "guessedname": "value", "guessedtype": "property"}, "DATE_DELIMITER": {"default": "\",\"", "type": "String", "description": "The value used to delimit individual dates in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "LOCALE_MONTHS": {"default": "\"long\"", "type": "String", "description": "The setting that determines which length of month labels should be used. Possible values are \"short\" and \"long\".", "guessedname": "value", "guessedtype": "property"}, "iframe": {"default": "true", "type": "Boolean", "description": "Whether or not an iframe shim should be placed under the Calendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_1CHAR": {"default": "[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]", "type": "String[]", "description": "The 1-character weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_SHORT": {"default": "[\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]", "type": "String[]", "description": "The short weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "id", "description": "\t\t\tThe id of the table element that will represent the calendar widget"}, {"type": "String", "name": "containerId", "description": "\tThe id of the container div element that will wrap the calendar table"}, {"type": "Object", "name": "config", "description": "\t\tThe configuration object containing the Calendar's arguments"}], "description": "YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates\nthe ability to have multi-page calendar views that share a single dataset and are\ndependent on each other.\nThe calendar group instance will refer to each of its elements using a 0-based index.\nFor example, to construct the placeholder for a calendar group widget with id \"cal1\" and\ncontainerId of \"cal1Container\", the markup would be as follows:\n<xmp>\n<div id=\"cal1Container_0\"><\/div>\n<div id=\"cal1Container_1\"><\/div>\n<\/xmp>\nThe tables for the calendars (\"cal1_0\" and \"cal1_1\") will be inserted into those containers."}], "namespace": "YAHOO.widget", "module": "calendar", "events": {"beforeDeselectEvent": {"description": "Fired before a selection is made", "guessedname": "beforeDeselectEvent", "guessedtype": "property"}, "beforeRenderEvent": {"description": "Fired before the Calendar is rendered", "guessedname": "beforeRenderEvent", "guessedtype": "property"}, "beforeSelectEvent": {"description": "Fired before a selection is made", "guessedname": "beforeSelectEvent", "guessedtype": "property"}, "renderEvent": {"description": "Fired when the Calendar is rendered", "guessedname": "renderEvent", "guessedtype": "property"}, "changePageEvent": {"description": "Fired when the Calendar page is changed", "guessedname": "changePageEvent", "guessedtype": "property"}, "resetEvent": {"description": "Fired when the Calendar is reset", "guessedname": "resetEvent", "guessedtype": "property"}, "clearEvent": {"description": "Fired when the Calendar is cleared", "guessedname": "clearEvent", "guessedtype": "property"}, "selectEvent": {"params": [{"type": "Array", "name": "Array", "description": " of Date field arrays in the format [YYYY, MM, DD]."}], "description": "Fired when a selection is made", "guessedname": "selectEvent", "guessedtype": "property"}, "deselectEvent": {"params": [{"type": "Array", "name": "Array", "description": " of Date field arrays in the format [YYYY, MM, DD]."}], "description": "Fired when a selection is made", "guessedname": "deselectEvent", "guessedtype": "property"}}, "guessedname": "CalendarGroup", "methods": {"deselectCell": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "Number", "name": "cellIndex", "description": "\tThe index of the cell to deselect in the current calendar."}], "description": "Deselects a date on the current calendar by referencing the index of the cell that should be deselected.\nThis method is used to easily deselect a single cell (usually with a mouse click) without having to do\na full render. The selected style is removed from the cell directly.", "guessedname": "deselectCell", "guessedtype": "function"}, "addWeekdayRenderer": {"params": [{"type": "Number", "name": "weekday", "description": "\t\tThe weekday (0-6) to associate with this renderer"}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "Adds a weekday to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the weekday passed to this method.", "guessedname": "addWeekdayRenderer", "guessedtype": "function"}, "render": {"description": "Calls the render function of all child calendars within the group.", "guessedname": "render", "guessedtype": "function"}, "nextYear": {"description": "Navigates to the next year in the currently selected month in the calendar widget.", "guessedname": "nextYear", "guessedtype": "function"}, "delegateConfig": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "Delegates a configuration property to the CustomEvents associated with the CalendarGroup's children", "guessedname": "delegateConfig", "guessedtype": "function"}, "configPages": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default Config handler for the \"pages\" property", "guessedname": "configPages", "guessedtype": "function"}, "subtractYears": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of years to subtract from the current calendar"}], "description": "Subtcats the designated number of years from the current calendar, and sets the current\ncalendar page date to the new month.", "guessedname": "subtractYears", "guessedtype": "function"}, "previousMonth": {"description": "Navigates to the previous month page in the calendar widget.", "guessedname": "previousMonth", "guessedtype": "function"}, "select": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "String\/Date\/Date[]", "name": "date", "description": "\tThe date string of dates to select in the current calendar. Valid formats are\nindividual date(s) (12\/24\/2005,12\/26\/2005) or date range(s) (12\/24\/2005-1\/1\/2006).\nMultiple comma-delimited dates can also be passed to this method (12\/24\/2005,12\/11\/2005-12\/13\/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "description": "Selects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once selection has completed, render must be \ncalled for the changes to be reflected visually.", "guessedname": "select", "guessedtype": "function"}, "callChildFunction": {"params": [{"type": "String", "name": "fnName", "description": "\t\tThe name of the function"}, {"type": "Array", "name": "args", "description": "\t\tThe arguments to pass to the function"}], "description": "Calls a function within all child Calendars within this CalendarGroup.", "guessedname": "callChildFunction", "guessedtype": "function"}, "deselect": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "String\/Date\/Date[]", "name": "date", "description": "\tThe date string of dates to deselect in the current calendar. Valid formats are\nindividual date(s) (12\/24\/2005,12\/26\/2005) or date range(s) (12\/24\/2005-1\/1\/2006).\nMultiple comma-delimited dates can also be passed to this method (12\/24\/2005,12\/11\/2005-12\/13\/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "description": "Deselects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once deselection has completed, render must be \ncalled for the changes to be reflected visually.", "guessedname": "deselect", "guessedtype": "function"}, "sub": {"guessedname": "sub", "params": [{"type": "Function", "name": "fn", "description": "\tThe function to subscribe to this CustomEvent"}, {"type": "Object", "name": "obj", "description": "\tThe CustomEvent's scope object"}, {"type": "Boolean", "name": "bOverride", "description": "\tWhether or not to apply scope correction"}], "description": "Proxy subscriber to subscribe to the CalendarGroup's child Calendars' CustomEvents", "private": "", "guessedtype": "function"}, "initEvents": {"description": "Initializes CalendarGroup's built-in CustomEvents", "guessedname": "initEvents", "guessedtype": "function"}, "previousYear": {"description": "Navigates to the previous year in the currently selected month in the calendar widget.", "guessedname": "previousYear", "guessedtype": "function"}, "nextMonth": {"description": "Navigates to the next month page in the calendar widget.", "guessedname": "nextMonth", "guessedtype": "function"}, "configPageDate": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default Config handler for the \"pagedate\" property", "guessedname": "configPageDate", "guessedtype": "function"}, "setChildFunction": {"params": [{"type": "String", "name": "fnName", "description": "\t\tThe name of the function"}, {"type": "Function", "name": "fn", "description": "\t\t\tThe function to apply to each Calendar page object"}], "description": "Adds a function to all child Calendars within this CalendarGroup.", "guessedname": "setChildFunction", "guessedtype": "function"}, "addMonthRenderer": {"params": [{"type": "Number", "name": "month", "description": "\t\tThe month (1-12) to associate with this renderer"}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "Adds a month to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the month passed to this method.", "guessedname": "addMonthRenderer", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "id", "description": "\t\t\tThe id of the table element that will represent the calendar widget"}, {"type": "String", "name": "containerId", "description": "\tThe id of the container div element that will wrap the calendar table"}, {"type": "Object", "name": "config", "description": "\t\tThe configuration object containing the Calendar's arguments"}], "description": "Initializes the calendar group. All subclasses must call this method in order for the\ngroup to be initialized properly.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "A string representation of the CalendarGroup object."}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "selectCell": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "Number", "name": "cellIndex", "description": "\tThe index of the cell to select in the current calendar."}], "description": "Selects a date on the current calendar by referencing the index of the cell that should be selected.\nThis method is used to easily select a single cell (usually with a mouse click) without having to do\na full render. The selected style is applied to the cell directly.", "guessedname": "selectCell", "guessedtype": "function"}, "renderFooter": {"description": "Renders a footer for the 2-up calendar container. By default, this method is\nunimplemented.", "guessedname": "renderFooter", "guessedtype": "function"}, "unsub": {"guessedname": "unsub", "params": [{"type": "Function", "name": "fn", "description": "\tThe function to subscribe to this CustomEvent"}, {"type": "Object", "name": "obj", "description": "\tThe CustomEvent's scope object"}], "description": "Proxy unsubscriber to unsubscribe from the CalendarGroup's child Calendars' CustomEvents", "private": "", "guessedtype": "function"}, "getSelectedDates": {"type": "Date[]", "return": {"type": "", "description": "An array of currently selected JavaScript Date objects."}, "description": "Gets the list of currently selected dates from the calendar.", "guessedname": "getSelectedDates", "guessedtype": "function"}, "addRenderer": {"params": [{"type": "String", "name": "sDates", "description": "\t\tA date string to associate with the specified renderer. Valid formats\ninclude date (12\/24\/2005), month\/day (12\/24), and range (12\/1\/2004-1\/1\/2005)"}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "Adds a renderer to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the conditions specified in the date string for this renderer.", "guessedname": "addRenderer", "guessedtype": "function"}, "reset": {"description": "Resets the calendar widget to the originally selected month and year, and \nsets the calendar to the initial selection(s).", "guessedname": "reset", "guessedtype": "function"}, "deselectAll": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected.\nAssuming that this function executes properly, the return value should be an empty array.\nHowever, the empty array is returned for the sake of being able to check the selection status\nof the calendar."}, "description": "Deselects all dates on the current calendar.", "guessedname": "deselectAll", "guessedtype": "function"}, "setMonth": {"params": [{"type": "Number", "name": "month", "description": "\t\tThe numeric month, from 0 (January) to 11 (December)"}], "description": "Sets the calendar group's month explicitly. This month will be set into the first\npage of the multi-page calendar, and all other months will be iterated appropriately.", "guessedname": "setMonth", "guessedtype": "function"}, "clear": {"description": "Clears the selected dates in the current calendar widget and sets the calendar\nto the current month and year.", "guessedname": "clear", "guessedtype": "function"}, "addMonths": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of months to add to the current calendar"}], "description": "Adds the designated number of months to the current calendar month, and sets the current\ncalendar page date to the new month.", "guessedname": "addMonths", "guessedtype": "function"}, "subtractMonths": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of months to subtract from the current calendar"}], "description": "Subtracts the designated number of months from the current calendar month, and sets the current\ncalendar page date to the new month.", "guessedname": "subtractMonths", "guessedtype": "function"}, "constructChild": {"return": {"type": "YAHOO.widget.Calendar", "description": "The YAHOO.widget.Calendar instance that is constructed"}, "params": [{"type": "String", "name": "id", "description": "\t\t\tThe id of the table element that will represent the calendar widget"}, {"type": "String", "name": "containerId", "description": "\tThe id of the container div element that will wrap the calendar table"}, {"type": "Object", "name": "config", "description": "\t\tThe configuration object containing the Calendar's arguments"}], "description": "Constructs a child calendar. This method can be overridden if a subclassed version of the default\ncalendar is to be used.", "guessedname": "constructChild", "guessedtype": "function"}, "setYear": {"params": [{"type": "Number", "name": "year", "description": "\t\tThe numeric 4-digit year"}], "description": "Sets the calendar group's year explicitly. This year will be set into the first\npage of the multi-page calendar, and all other months will be iterated appropriately.", "guessedname": "setYear", "guessedtype": "function"}, "renderHeader": {"description": "Renders the header for the CalendarGroup.", "guessedname": "renderHeader", "guessedtype": "function"}, "addYears": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of years to add to the current calendar"}], "description": "Adds the designated number of years to the current calendar, and sets the current\ncalendar page date to the new month.", "guessedname": "addYears", "guessedtype": "function"}}, "file": "CalendarGroup.js", "guessedtype": "function", "shortname": "CalendarGroup", "properties": {"YAHOO.widget.CalendarGroup.CSS_2UPCLOSE": {"description": "CSS class representing the close icon for the 2-up calendar", "static": "", "guessedname": "CSS_2UPCLOSE", "guessedtype": "property", "type": "String", "final": ""}, "containerId": {"type": "String", "description": "The unique id associated with the CalendarGroup container", "guessedname": "containerId", "guessedtype": "property"}, "Locale": {"type": "Object", "description": "The local object which contains the CalendarGroup's locale settings", "guessedname": "Locale", "guessedtype": "property"}, "cfg": {"type": "YAHOO.util.Config", "description": "The Config object used to hold the configuration variables for the CalendarGroup", "guessedname": "cfg", "guessedtype": "property"}, "YAHOO.widget.CalendarGroup.CSS_2UPTITLE": {"description": "CSS class representing the title for the 2-up calendar", "static": "", "guessedname": "CSS_2UPTITLE", "guessedtype": "property", "type": "String", "final": ""}, "pages": {"type": "YAHOO.widget.Calendar[]", "description": "The collection of Calendar pages contained within the CalendarGroup", "guessedname": "pages", "guessedtype": "property"}, "YAHOO.widget.CalendarGroup.CSS_CONTAINER": {"description": "CSS class representing the container for the calendar", "static": "", "guessedname": "CSS_CONTAINER", "guessedtype": "property", "type": "String", "final": ""}, "oDomContainer": {"type": "HTMLElement", "description": "The outer containing element for the CalendarGroup", "guessedname": "oDomContainer", "guessedtype": "property"}, "id": {"type": "String", "description": "The unique id associated with the CalendarGroup", "guessedname": "id", "guessedtype": "property"}, "YAHOO.widget.CalendarGroup.CSS_MULTI_UP": {"description": "CSS class representing the container for the calendar", "static": "", "guessedname": "CSS_MULTI_UP", "guessedtype": "property", "type": "String", "final": ""}, "Options": {"type": "Object", "description": "The local object which contains the CalendarGroup's options", "guessedname": "Options", "guessedtype": "property"}}, "description": "YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates\nthe ability to have multi-page calendar views that share a single dataset and are\ndependent on each other.\nThe calendar group instance will refer to each of its elements using a 0-based index.\nFor example, to construct the placeholder for a calendar group widget with id \"cal1\" and\ncontainerId of \"cal1Container\", the markup would be as follows:\n<xmp>\n<div id=\"cal1Container_0\"><\/div>\n<div id=\"cal1Container_1\"><\/div>\n<\/xmp>\nThe tables for the calendars (\"cal1_0\" and \"cal1_1\") will be inserted into those containers."}, "YAHOO.widget.HTMLNode": {"name": "YAHOO.widget.HTMLNode", "constructors": [{"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node"}, {"type": "YAHOO.widget.Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded\/collapsed state"}, {"type": "boolean", "name": "hasIcon", "description": "  specifies whether or not leaf nodes should\nhave an icon"}], "description": "This implementation takes either a string or object for the\noData argument.  If is it a string, we will use it for the display\nof this node (and it can contain any html code).  If the parameter\nis an object, we look for a parameter called \"html\" that will be\nused for this node's display."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "HTMLNode", "methods": {"getContentEl": {"return": {"type": "HTMLElement", "description": "the element"}, "description": "Returns the outer html element for this node's content", "guessedname": "getContentEl", "guessedtype": "function"}}, "extends": "YAHOO.widget.Node", "superclass": "YAHOO.widget.Node", "file": "HTMLNode.js", "guessedtype": "function", "shortname": "HTMLNode", "properties": {"contentElId": {"type": "string", "description": "The generated id that will contain the data passed in by the implementer.", "guessedname": "contentElId", "guessedtype": "property"}, "content": {"type": "string", "description": "The HTML content to use for this node's display", "guessedname": "content", "guessedtype": "property"}, "initContent": {"param": "{object} An html string or object containing an html property", "description": "Sets up the node label", "guessedname": "initContent", "guessedtype": "function"}, "contentStyle": {"type": "string", "description": "The CSS class for the html content container.  Defaults to ygtvhtml, but \ncan be overridden to provide a custom presentation for a specific node.", "guessedname": "contentStyle", "guessedtype": "property"}}, "description": "This implementation takes either a string or object for the\noData argument.  If is it a string, we will use it for the display\nof this node (and it can contain any html code).  If the parameter\nis an object, we look for a parameter called \"html\" that will be\nused for this node's display."}, "YAHOO.util.DD": {"name": "YAHOO.util.DD", "constructors": [{"params": [{"type": "String", "name": "id", "description": " the id of the linked element"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop items"}, {"type": "object", "name": "config", "description": " an object containing configurable attributes\nValid properties for DD: \nscroll"}], "description": "A DragDrop implementation where the linked element follows the \nmouse cursor during a drag."}], "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "DD", "methods": {"setDragElPos": {"params": [{"type": "int", "name": "iPageX", "description": " the X coordinate of the mousedown or drag event"}, {"type": "int", "name": "iPageY", "description": " the Y coordinate of the mousedown or drag event"}], "description": "Sets the drag element to the location of the mousedown or click event, \nmaintaining the cursor location relative to the location on the element \nthat was clicked.  Override this if you want to place the element in a \nlocation other than where the cursor is.", "guessedname": "setDragElPos", "guessedtype": "function"}, "alignElWithMouse": {"params": [{"type": "HTMLElement", "name": "el", "description": " the element to move"}, {"type": "int", "name": "iPageX", "description": " the X coordinate of the mousedown or drag event"}, {"type": "int", "name": "iPageY", "description": " the Y coordinate of the mousedown or drag event"}], "description": "Sets the element to the location of the mousedown or click event, \nmaintaining the cursor location relative to the location on the element \nthat was clicked.  Override this if you want to place the element in a \nlocation other than where the cursor is.", "guessedname": "alignElWithMouse", "guessedtype": "function"}, "autoOffset": {"params": [{"type": "int", "name": "iPageX", "description": " the X coordinate of the click"}, {"type": "int", "name": "iPageY", "description": " the Y coordinate of the click"}], "description": "Sets the pointer offset to the distance between the linked element's top \nleft corner and the location the element was clicked", "guessedname": "autoOffset", "guessedtype": "function"}, "getTargetCoord": {"return": {"type": "", "description": "an object that contains the coordinates (Object.x and Object.y)"}, "description": "Finds the location the element should be placed if we want to move\nit to where the mouse location less the click offset would place us.", "private": "", "params": [{"type": "int", "name": "iPageX", "description": " the X coordinate of the click"}, {"type": "int", "name": "iPageY", "description": " the Y coordinate of the click"}], "guessedname": "getTargetCoord", "guessedtype": "function"}, "autoScroll": {"guessedname": "autoScroll", "params": [{"type": "int", "name": "x", "description": " the drag element's x position"}, {"type": "int", "name": "y", "description": " the drag element's y position"}, {"type": "int", "name": "h", "description": " the height of the drag element"}, {"type": "int", "name": "w", "description": " the width of the drag element"}], "description": "Auto-scroll the window if the dragged object has been moved beyond the \nvisible window boundary.", "private": "", "guessedtype": "function"}, "setDelta": {"params": [{"type": "int", "name": "iDeltaX", "description": " the distance from the left"}, {"type": "int", "name": "iDeltaY", "description": " the distance from the top"}], "description": "Sets the pointer offset.  You can call this directly to force the \noffset to be in a particular location (e.g., pass in 0,0 to set it \nto the center of the object, as done in YAHOO.widget.Slider)", "guessedname": "setDelta", "guessedtype": "function"}, "cachePosition": {"params": [{"type": "", "name": "iPageX", "description": " the current x position (optional, this just makes it so we\ndon't have to look it up again)"}, {"type": "", "name": "iPageY", "description": " the current y position (optional, this just makes it so we\ndon't have to look it up again)"}], "description": "Saves the most recent position so that we can reset the constraints and\ntick marks on-demand.  We need to know this so that we can calculate the\nnumber of pixels the element is offset from its original position.", "guessedname": "cachePosition", "guessedtype": "function"}}, "extends": "YAHOO.util.DragDrop", "superclass": "YAHOO.util.DragDrop", "file": "DD.js", "guessedtype": "function", "shortname": "DD", "properties": {"scroll": {"type": "boolean", "description": "When set to true, the utility automatically tries to scroll the browser\nwindow wehn a drag and drop element is dragged near the viewport boundary.\nDefaults to true.", "guessedname": "scroll", "guessedtype": "property"}}, "description": "A DragDrop implementation where the linked element follows the \nmouse cursor during a drag."}, "YAHOO.widget.LogMsg": {"name": "YAHOO.widget.LogMsg", "constructors": [{"params": [{"type": "Object", "name": "oConfigs", "description": "  Object literal of configuration params."}], "description": "The LogMsg class defines a single log message."}], "namespace": "YAHOO.widget", "module": "logger", "guessedname": "LogMsg", "file": "LogMsg.js", "guessedtype": "function", "shortname": "LogMsg", "properties": {"msg": {"type": "String", "description": "Log message.", "guessedname": "msg", "guessedtype": "property"}, "category": {"type": "String", "description": "Log category.", "guessedname": "category", "guessedtype": "property"}, "sourceDetail": {"type": "String", "description": "Log source detail. The remainder of the string passed in as the source argument, not\r\nincluding the first word (if any).", "guessedname": "sourceDetail", "guessedtype": "property"}, "source": {"type": "String", "description": "Log source. The first word passed in as the source argument.", "guessedname": "source", "guessedtype": "property"}, "time": {"type": "Date", "description": "Log timestamp.", "guessedname": "time", "guessedtype": "property"}}, "description": "The LogMsg class defines a single log message."}, "YAHOO.widget.Tab": {"name": "YAHOO.widget.Tab", "configs": {"disabled": {"type": "Boolean", "description": "Whether or not the tab is disabled."}, "dataTimeout": {"default": "null", "type": "Number", "description": "Number if milliseconds before aborting and calling failure handler."}, "contentEl": {"type": "HTMLElement", "description": "The HTMLElement that contains the tab's content."}, "href": {"default": "'#'", "type": "String", "description": "The href of the tab's anchor element."}, "cacheData": {"default": "false", "type": "Boolean", "description": "Whether or not content should be reloaded for every view."}, "dataSrc": {"type": "String", "description": "The tab's data source, used for loading content dynamically."}, "label": {"type": "String", "description": "The tab's label text (or innerHTML)."}, "content": {"type": "String", "description": "The tab's content."}, "loadMethod": {"default": "\"GET\"", "type": "String", "description": "The method to use for the data request."}, "contentVisible": {"default": "false", "type": "Boolean", "description": "The Whether or not the tab's content is visible."}, "activationEvent": {"type": "String", "description": "The event that triggers the tab's activation."}, "active": {"type": "Boolean", "description": "Whether or not the tab is currently active.\nIf a dataSrc is set for the tab, the content will be loaded from\nthe given source."}, "labelEl": {"type": "HTMLElement", "description": "The element that contains the tab's label."}, "dataLoaded": {"type": "Boolean", "description": "Whether or not any data has been loaded from the server."}}, "constructors": [{"params": [{"type": "HTMLElement | String", "name": "element", "description": "  (optional) The html element that \nrepresents the TabView. An element will be created if none provided."}, {"type": "Object", "name": "properties", "description": " A key map of initial properties"}], "description": "A representation of a Tab's label and content."}], "namespace": "YAHOO.widget", "module": "tabview", "events": {"contentChange": {"description": "Fires after the tab content is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> contentChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the previous value<br>\n<code>&lt;Boolean&gt;\nnewValue<\/code> the updated value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('contentChange', handler);<\/code><\/p>"}, "activeChange": {"description": "Fires after the active state is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> activeChange<br>\n<code>&lt;Boolean&gt;\nprevValue<\/code> the previous value<br>\n<code>&lt;Boolean&gt;\nnewValue<\/code> the updated value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('activeChange', handler);<\/code><\/p>"}, "beforeContentChange": {"description": "Fires before the tab content is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeContentChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the current value<br>\n<code>&lt;String&gt;\nnewValue<\/code> the new value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeContentChange', handler);<\/code><\/p>"}, "beforeActiveChange": {"description": "Fires before the active state is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeActiveChange<br>\n<code>&lt;Boolean&gt;\nprevValue<\/code> the current value<br>\n<code>&lt;Boolean&gt;\nnewValue<\/code> the new value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeActiveChange', handler);<\/code><\/p>"}, "labelChange": {"description": "Fires after the tab label is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> labelChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the previous value<br>\n<code>&lt;String&gt;\nnewValue<\/code> the updated value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('labelChange', handler);<\/code><\/p>"}, "beforeLabelChange": {"description": "Fires before the tab label is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeLabelChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the current value<br>\n<code>&lt;String&gt;\nnewValue<\/code> the new value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeLabelChange', handler);<\/code><\/p>"}}, "guessedname": "Tab", "methods": {"initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Hash of initial attributes"}], "description": "Registers TabView specific properties.", "guessedname": "initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "String"}, "description": "Provides a readable name for the tab.", "guessedname": "toString", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.widget.YAHOO.util.Element", "file": "Tab.js", "guessedtype": "function", "shortname": "Tab", "properties": {"DISABLED_CLASSNAME": {"default": "\"disabled\"", "type": "String", "description": "The class name applied to disabled tabs.", "guessedname": "DISABLED_CLASSNAME", "guessedtype": "property"}, "LOADING_CLASSNAME": {"default": "\"disabled\"", "type": "String", "description": "The class name applied to dynamic tabs while loading.", "guessedname": "LOADING_CLASSNAME", "guessedtype": "property"}, "LABEL_INNER_TAGNAME": {"default": "\"em\"", "type": "String", "description": "The default tag name for a Tab's inner element.", "guessedname": "LABEL_TAGNAME", "guessedtype": "property"}, "ACTIVE_CLASSNAME": {"default": "\"on\"", "type": "String", "description": "The class name applied to active tabs.", "guessedname": "ACTIVE_CLASSNAME", "guessedtype": "property"}, "loadHandler": {"type": "object", "description": "Object containing success and failure callbacks for loading data.", "guessedname": "loadHandler", "guessedtype": "property"}, "dataConnection": {"type": "Object", "description": "Provides a reference to the connection request object when data is\nloaded dynamically.", "guessedname": "dataConnection", "guessedtype": "property"}}, "description": "A representation of a Tab's label and content."}, "YAHOO.util.Scroll": {"name": "YAHOO.util.Scroll", "constructors": [{"params": [{"type": "String or HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Anim subclass for scrolling elements to a position defined by the \"scroll\"\nmember of \"attributes\".  All \"scroll\" members are arrays with x, y scroll positions.\n<p>Usage: <code>var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);<\/code><\/p>"}], "namespace": "YAHOO.util", "module": "animation", "extends": "YAHOO.util.Anim", "superclass": "YAHOO.util.Anim", "file": "Scroll.js", "shortname": "Scroll", "requires": "YAHOO.util.Anim", "description": "Anim subclass for scrolling elements to a position defined by the \"scroll\"\nmember of \"attributes\".  All \"scroll\" members are arrays with x, y scroll positions.\n<p>Usage: <code>var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);<\/code><\/p>"}, "YAHOO.widget.Dialog": {"name": "YAHOO.widget.Dialog", "configs": {"buttons": {"default": "\"none\"", "type": "Object[]", "description": "Object literal(s) defining the buttons for the Dialog's footer.", "guessedname": "value", "guessedtype": "property"}, "postmethod": {"default": "async", "type": "String", "description": "The method to use for posting the Dialog's form. Possible values are \"async\", \"form\", and \"manual\".", "guessedname": "value", "guessedtype": "function"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Dialog <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Dialog"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Dialog. See configuration documentation for more details."}], "description": "Dialog is an implementation of Panel that can be used to submit form data. Built-in functionality for buttons with event handlers is included, and button sets can be build dynamically, or the preincluded ones for Submit\/Cancel and OK\/Cancel can be utilized. Forms can be processed in 3 ways -- via an asynchronous Connection utility call, a simple form POST or GET, or manually."}], "namespace": "YAHOO.widget", "module": "container", "events": {"asyncSubmitEvent": {"description": "CustomEvent fired prior to asynchronous submission", "guessedname": "asyncSubmitEvent", "guessedtype": "property"}, "submitEvent": {"description": "CustomEvent fired after submission", "guessedname": "submitEvent", "guessedtype": "property"}, "manualSubmitEvent": {"description": "CustomEvent fired prior to manual submission", "guessedname": "manualSubmitEvent", "guessedtype": "property"}, "formSubmitEvent": {"description": "CustomEvent fired prior to form-based submission", "guessedname": "formSubmitEvent", "guessedtype": "property"}, "cancelEvent": {"description": "CustomEvent fired after cancel", "guessedname": "cancelEvent", "guessedtype": "property"}, "beforeSumitEvent": {"description": "CustomEvent fired prior to submission", "guessedname": "beforeSubmitEvent", "guessedtype": "property"}}, "guessedname": "Dialog", "methods": {"configButtons": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler for the \"buttons\" configuration property", "guessedname": "configButtons", "guessedtype": "function"}, "focusFirstButton": {"description": "Sets the focus to the first button in the button list", "guessedname": "focusFirstButton", "guessedtype": "function"}, "doSubmit": {"description": "Performs the submission of the Dialog form depending on the value of \"postmethod\" property.", "guessedname": "doSubmit", "guessedtype": "function"}, "blurButtons": {"description": "Blurs all the html buttons", "guessedname": "blurButtons", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Dialog which are fired automatically at appropriate times by the Dialog class.", "guessedname": "initEvents", "guessedtype": "function"}, "focusFirst": {"description": "The default event handler used to focus the first field of the form when the Dialog is shown.", "guessedname": "focusFirst", "guessedtype": "function"}, "focusLastButton": {"description": "Sets the focus to the first button in the button list", "guessedname": "focusLastButton", "guessedtype": "function"}, "submit": {"description": "Executes a submit of the Dialog followed by a hide, if validation is successful.", "guessedname": "submit", "guessedtype": "function"}, "focusLast": {"description": "Sets the focus to the last button in the button or form element in the Dialog", "guessedname": "focusLast", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Dialog <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Dialog"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Dialog. See configuration documentation for more details."}], "description": "The Dialog initialization method, which is executed for Dialog and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Dialog"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "cancel": {"description": "Executes the cancel of the Dialog followed by a hide.", "guessedname": "cancel", "guessedtype": "function"}, "focusDefaultButton": {"description": "Sets the focus to the button that is designated as the default. By default, his handler is executed when the show event is fired.", "guessedname": "focusDefaultButton", "guessedtype": "function"}, "validate": {"description": "Built-in function hook for writing a validation function that will be checked for a \"true\" value prior to a submit. This function, as implemented by default, always returns true, so it should be overridden if validation is necessary.", "guessedname": "validate", "guessedtype": "function"}, "getData": {"return": {"type": "Object", "description": "A JSON object reprsenting the data of the current form."}, "description": "Returns a JSON-compatible data structure representing the data currently contained in the form.", "guessedname": "getData", "guessedtype": "function"}, "registerForm": {"description": "Prepares the Dialog's internal FORM object, creating one if one is not currently present.", "guessedname": "registerForm", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed using the Dialog's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Panel", "superclass": "YAHOO.widget.Panel", "file": "Dialog.js", "guessedtype": "function", "shortname": "Dialog", "properties": {"YAHOO.widget.Dialog.CSS_DIALOG": {"description": "Constant representing the default CSS class used for a Dialog", "static": "", "guessedname": "CSS_DIALOG", "guessedtype": "property", "type": "String", "final": ""}, "callback": {"type": "Object", "description": "The internally maintained callback object for use with the Connection utility", "guessedname": "callback", "guessedtype": "property"}, "callback.failure": {"type": "Function", "description": "The function to execute upon failure of the Connection submission", "guessedname": "failure", "guessedtype": "property"}, "callback.success": {"type": "Function", "description": "The function to execute upon success of the Connection submission", "guessedname": "success", "guessedtype": "property"}, "callback.argument": {"type": "Object", "description": "The arbitraty argument or arguments to pass to the Connection callback functions", "guessedname": "argument", "guessedtype": "property"}}, "description": "Dialog is an implementation of Panel that can be used to submit form data. Built-in functionality for buttons with event handlers is included, and button sets can be build dynamically, or the preincluded ones for Submit\/Cancel and OK\/Cancel can be utilized. Forms can be processed in 3 ways -- via an asynchronous Connection utility call, a simple form POST or GET, or manually."}, "YAHOO.util.Bezier": {"name": "YAHOO.util.Bezier", "namespace": "YAHOO.util", "module": "animation", "guessedname": "Bezier", "methods": {"getPosition": {"return": {"type": "Array", "description": "An array containing int x and y member data"}, "params": [{"type": "Array", "name": "points", "description": " An array containing Bezier points"}, {"type": "Number", "name": "t", "description": " A number between 0 and 1 which is the basis for determining current position"}], "description": "Get the current position of the animated element based on t.\nEach point is an array of \"x\" and \"y\" values (0 = x, 1 = y)\nAt least 2 points are required (start and end).\nFirst point is start. Last point is end.\nAdditional control points are optional.", "guessedname": "getPosition", "guessedtype": "function"}}, "file": "Bezier.js", "guessedtype": "function", "shortname": "Bezier", "description": "Used to calculate Bezier splines for any number of control points."}, "YAHOO.util.Subscriber": {"name": "YAHOO.util.Subscriber", "constructors": [{"params": [{"type": "Function", "name": "fn", "description": "       The function to execute"}, {"type": "Object", "name": "obj", "description": "      An object to be passed along when the event fires"}, {"type": "boolean", "name": "override", "description": " If true, the obj passed in becomes the execution\nscope of the listener"}], "description": "Stores the subscriber information to be used when the event fires."}], "namespace": "YAHOO.util", "module": "event", "guessedname": "Subscriber", "methods": {"getScope": {"params": [{"type": "Object", "name": "defaultScope", "description": " the scope to use if this listener does not\noverride it."}], "description": "Returns the execution scope for this listener.  If override was set to true\nthe custom obj will be the scope.  If override is an object, that is the\nscope, otherwise the default scope will be used.", "guessedname": "getScope", "guessedtype": "function"}, "contains": {"return": {"type": "boolean", "description": "true if the supplied arguments match this \nsubscriber's signature."}, "params": [{"type": "Function", "name": "fn", "description": " the function to execute"}, {"type": "Object", "name": "obj", "description": " an object to be passed along when the event fires"}], "description": "Returns true if the fn and obj match this objects properties.\nUsed by the unsubscribe method to match the right subscriber.", "guessedname": "contains", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}}, "file": "CustomEvent.js", "guessedtype": "function", "shortname": "Subscriber", "properties": {"override": {"type": "boolean|object", "description": "The default execution scope for the event listener is defined when the\nevent is created (usually the object which contains the event).\nBy setting override to true, the execution scope becomes the custom\nobject passed in by the subscriber.  If override is an object, that \nobject becomes the scope.", "guessedname": "override", "guessedtype": "property"}, "obj": {"type": "object", "description": "An optional custom object that will passed to the callback when\nthe event fires", "guessedname": "obj", "guessedtype": "property"}, "fn": {"type": "function", "description": "The callback that will be execute when the event fires", "guessedname": "fn", "guessedtype": "property"}}, "description": "Stores the subscriber information to be used when the event fires."}, "YAHOO.util.Connect": {"name": "YAHOO.util.Connect", "namespace": "YAHOO.util", "module": "connection", "guessedname": "Connect", "methods": {"createFrame": {"return": {"type": "void", "description": ""}, "description": "Creates an iframe to be used for form file uploads.  It is remove from the\ndocument upon completion of the upload transaction.", "private": "", "static": "", "guessedname": "createFrame", "guessedtype": "function", "params": [{"type": "string", "name": "secureUri", "description": " Optional qualified path of iframe resource for SSL in IE."}]}, "handleReadyState": {"return": {"type": "void", "description": ""}, "description": "This method serves as a timer that polls the XHR object's readyState\nproperty during a transaction, instead of binding a callback to the\nonreadystatechange event.  Upon readyState 4, handleTransactionResponse\nwill process the response, and the timer will be cleared.", "private": "", "static": "", "guessedname": "handleReadyState", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "callback", "name": "callback", "description": " The user-defined callback object"}]}, "asyncRequest": {"return": {"type": "object", "description": "Returns the connection object"}, "description": "Method for initiating an asynchronous request via the XHR object.", "static": "", "guessedname": "asyncRequest", "guessedtype": "function", "params": [{"type": "string", "name": "method", "description": " HTTP transaction method"}, {"type": "string", "name": "uri", "description": " Fully qualified path of resource"}, {"type": "callback", "name": "callback", "description": " User-defined callback function or object"}, {"type": "string", "name": "postData", "description": " POST body"}], "public": ""}, "setForm": {"return": {"type": "string", "description": "string of the HTML form field name and value pairs.."}, "description": "This method assembles the form label and value pairs and\nconstructs an encoded string.\nasyncRequest() will automatically initialize the\ntransaction with a HTTP header Content-Type of\napplication\/x-www-form-urlencoded.", "static": "", "guessedname": "setForm", "guessedtype": "function", "params": [{"type": "string || object", "name": "form", "description": " id or name attribute, or form object."}, {"type": "string", "name": "optional", "description": " boolean to indicate SSL environment."}, {"type": "string || boolean", "name": "optional", "description": " qualified path of iframe resource for SSL in IE."}], "public": ""}, "setDefaultPostHeader": {"return": {"type": "", "description": "void"}, "description": "Member to enable or disable the default POST header.", "static": "", "guessedname": "setDefaultPostHeader", "guessedtype": "function", "params": [{"type": "boolean", "name": "b", "description": " Set and use default header - true or false ."}], "public": ""}, "uploadFile": {"return": {"type": "void", "description": ""}, "description": "Uploads HTML form, including files\/attachments, to the\niframe created in createFrame.", "private": "", "static": "", "guessedname": "uploadFile", "guessedtype": "function", "params": [{"type": "int", "name": "id", "description": " The transaction id."}, {"type": "object", "name": "callback", "description": " - User-defined callback object."}, {"type": "string", "name": "uri", "description": " Fully qualified path of resource."}]}, "isCallInProgress": {"return": {"type": "boolean", "description": ""}, "description": "Public method to check if the transaction is still being processed.", "static": "", "guessedname": "isCallInProgress", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object returned by asyncRequest"}], "public": ""}, "setPollingInterval": {"return": {"type": "", "description": "void"}, "description": "Member to modify the default polling interval.", "static": "", "guessedname": "setPollingInterval", "guessedtype": "function", "params": [{"type": "int", "name": "i", "description": " The polling interval in milliseconds."}], "public": ""}, "getConnectionObject": {"return": {"type": "object", "description": ""}, "description": "This method is called by asyncRequest to create a\nvalid connection object for the transaction.  It also passes a\ntransaction id and increments the transaction id counter.", "private": "", "static": "", "guessedname": "getConnectionObject", "guessedtype": "function"}, "createExceptionObject": {"return": {"type": "object", "description": ""}, "description": "If a transaction cannot be completed due to dropped or closed connections,\nthere may be not be enough information to build a full response object.\nThe failure callback will be fired and this specific condition can be identified\nby a status property value of 0.\nIf an abort was successful, the status property will report a value of -1.", "private": "", "static": "", "guessedname": "createExceptionObject", "guessedtype": "function", "params": [{"type": "int", "name": "tId", "description": " The Transaction Id"}, {"type": "callbackArg", "name": "callbackArg", "description": " The user-defined argument or arguments to be passed to the callback"}, {"type": "boolean", "name": "isAbort", "description": " Determines if the exception case is caused by a transaction abort"}]}, "createResponseObject": {"return": {"type": "object", "description": ""}, "description": "This method evaluates the server response, creates and returns the results via\nits properties.  Success and failure cases will differ in the response\nobject's property values.", "private": "", "static": "", "guessedname": "createResponseObject", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "callbackArg", "name": "callbackArg", "description": " The user-defined argument or arguments to be passed to the callback"}]}, "resetFormState": {"return": {"type": "void", "description": ""}, "description": "Resets HTML form properties when an HTML form or HTML form\nwith file upload transaction is sent.", "private": "", "static": "", "guessedname": "resetFormState", "guessedtype": "function"}, "initHeader": {"return": {"type": "void", "description": ""}, "description": "Public method that stores the custom HTTP headers for each transaction.", "static": "", "guessedname": "initHeader", "guessedtype": "function", "params": [{"type": "string", "name": "label", "description": " The HTTP header label"}, {"type": "string", "name": "value", "description": " The HTTP header value"}], "public": ""}, "setHeader": {"return": {"type": "void", "description": ""}, "description": "Accessor that sets the HTTP headers for each transaction.", "private": "", "static": "", "guessedname": "setHeader", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object for the transaction."}]}, "appendPostData": {"return": {"type": "array", "description": "formElements Collection of hidden fields."}, "description": "Parses the POST data and creates hidden form elements\nfor each key-value, and appends them to the HTML form object.", "private": "", "static": "", "guessedname": "appendPostData", "guessedtype": "function", "params": [{"type": "string", "name": "postData", "description": " The HTTP POST data"}]}, "setProgId": {"return": {"type": "", "description": "void"}, "description": "Member to add an ActiveX id to the existing xml_progid array.\nIn the event(unlikely) a new ActiveX id is introduced, it can be added\nwithout internal code modifications.", "static": "", "guessedname": "setProgId", "guessedtype": "function", "params": [{"type": "string", "name": "id", "description": " The ActiveX id to be added to initialize the XHR object."}], "public": ""}, "releaseObject": {"return": {"type": "void", "description": ""}, "description": "Dereference the XHR instance and the connection object after the transaction is completed.", "private": "", "static": "", "guessedname": "releaseObject", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}]}, "createXhrObject": {"return": {"type": "", "description": "object"}, "description": "Instantiates a XMLHttpRequest object and returns an object with two properties:\nthe XMLHttpRequest instance and the transaction id.", "private": "", "static": "", "guessedname": "createXhrObject", "guessedtype": "function", "params": [{"type": "int", "name": "transactionId", "description": " Property containing the transaction id for this transaction."}]}, "abort": {"return": {"type": "boolean", "description": ""}, "description": "Method to terminate a transaction, if it has not reached readyState 4.", "static": "", "guessedname": "abort", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object returned by asyncRequest."}, {"type": "object", "name": "callback", "description": "  User-defined callback object."}, {"type": "string", "name": "isTimeout", "description": " boolean to indicate if abort was a timeout."}], "public": ""}, "handleTransactionResponse": {"return": {"type": "void", "description": ""}, "description": "This method attempts to interpret the server response and\ndetermine whether the transaction was successful, or if an error or\nexception was encountered.", "private": "", "static": "", "guessedname": "handleTransactionResponse", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "object", "name": "callback", "description": " The sser-defined callback object"}, {"type": "boolean", "name": "isAbort", "description": " Determines if the transaction was aborted."}]}}, "file": "connection.js", "guessedtype": "property", "shortname": "Connect", "properties": {"_http_header": {"description": "Object literal of HTTP header(s)", "private": "", "static": "", "guessedname": "_http_header", "guessedtype": "property", "type": "object"}, "_transaction_id": {"description": "A transaction counter that increments the transaction id for each transaction.", "private": "", "static": "", "guessedname": "_transaction_id", "guessedtype": "property", "type": "int"}, "_sFormData": {"description": "Property modified by setForm() to set the HTML form data\nfor each transaction.", "private": "", "static": "", "guessedname": "_sFormData", "guessedtype": "property", "type": "string"}, "_use_default_post_header": {"description": "Determines if a default header of\nContent-Type of 'application\/x-www-form-urlencoded'\nwill be added to any client HTTP headers sent for POST\ntransactions.", "private": "", "static": "", "guessedname": "_use_default_post_header", "guessedtype": "property", "type": "boolean"}, "_isFileUpload": {"description": "Property modified by setForm() to determine if a file(s)\nupload is expected.", "private": "", "static": "", "guessedname": "_isFileUpload", "guessedtype": "property", "type": "boolean"}, "_isFormSubmit": {"description": "Property modified by setForm() to determine if the data\nshould be submitted as an HTML form.", "private": "", "static": "", "guessedname": "_isFormSubmit", "guessedtype": "property", "type": "boolean"}, "_poll": {"description": "Collection of polling references to the polling mechanism in handleReadyState.", "private": "", "static": "", "guessedname": "_poll", "guessedtype": "property", "type": "object"}, "_default_post_header": {"description": "Determines if a default header of\nContent-Type of 'application\/x-www-form-urlencoded'\nwill be added to any client HTTP headers sent for POST\ntransactions.", "private": "", "static": "", "guessedname": "_default_post_header", "guessedtype": "property", "type": "boolean"}, "_timeOut": {"description": "Queue of timeout values for each transaction callback with a defined timeout value.", "private": "", "static": "", "guessedname": "_timeOut", "guessedtype": "property", "type": "object"}, "_polling_interval": {"description": "The polling frequency, in milliseconds, for HandleReadyState.\nwhen attempting to determine a transaction's XHR readyState.\nThe default is 50 milliseconds.", "private": "", "static": "", "guessedname": "_polling_interval", "guessedtype": "property", "type": "int"}, "_formNode": {"description": "Property modified by setForm() to set a reference to the HTML\nform node if the desired action is file upload.", "private": "", "static": "", "guessedname": "_formNode", "guessedtype": "property", "type": "object"}, "_has_http_headers": {"description": "Determines if HTTP headers are set.", "private": "", "static": "", "guessedname": "_has_http_headers", "guessedtype": "property", "type": "boolean"}, "_msxml_progid": {"description": "Array of MSFT ActiveX ids for XMLHttpRequest.", "private": "", "static": "", "guessedname": "_msxml_progid", "guessedtype": "property", "type": "array"}}, "description": "The Connection Manager provides a simplified interface to the XMLHttpRequest\nobject.  It handles cross-browser instantiantion of XMLHttpRequest, negotiates the\ninteractive states and server response, returning the results to a pre-defined\ncallback you create."}, "YAHOO.widget.RootNode": {"name": "YAHOO.widget.RootNode", "constructors": [{"params": [{"type": "YAHOO.widget.TreeView", "name": "oTree", "description": "  The tree instance this node belongs to"}], "description": "A custom YAHOO.widget.Node that handles the unique nature of \nthe virtual, presentationless root node."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "RootNode", "extends": "YAHOO.widget.Node", "superclass": "YAHOO.widget.Node", "file": "RootNode.js", "guessedtype": "function", "shortname": "RootNode", "description": "A custom YAHOO.widget.Node that handles the unique nature of \nthe virtual, presentationless root node."}, "YAHOO.widget.TVAnim": {"name": "YAHOO.widget.TVAnim", "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "TVAnim", "methods": {"isValid": {"return": {"type": "boolean", "description": "true if valid, false if not"}, "description": "Returns true if the specified animation class is available", "static": "", "guessedname": "isValid", "guessedtype": "function", "params": [{"type": "string", "name": "type", "description": "  the type of animation"}]}, "getAnim": {"return": {"type": "YAHOO.util.Animation", "description": "the animation instance"}, "description": "Returns a ygAnim instance of the given type", "static": "", "guessedname": "getAnim", "guessedtype": "function", "params": [{"type": "string", "name": "type", "description": "  the type of animation"}, {"type": "HTMLElement", "name": "el", "description": "  the element to element (probably the children div)"}, {"type": "function", "name": "callback", "description": "  function to invoke when the animation is done."}]}}, "static": "", "file": "TVAnim.js", "guessedtype": "function", "shortname": "TVAnim", "properties": {"FADE_OUT": {"type": "string", "static": "", "description": "Constant for the fade out animation", "guessedname": "FADE_OUT", "guessedtype": "property"}, "FADE_IN": {"type": "string", "static": "", "description": "Constant for the fade in animation", "guessedname": "FADE_IN", "guessedtype": "property"}}, "description": "A static factory class for tree view expand\/collapse animations"}, "YAHOO.widget.MenuItem": {"name": "YAHOO.widget.MenuItem", "configs": {"submenu": {"default": "null", "type": "Menu|String|Object|<a href=\"http:\/\/www.w3.org\/TR\/2000\/\nWD-DOM-Level-1-20000929\/level-one-html.html#ID-58190037\">\nHTMLElement<\/a>", "description": "Object specifying the submenu to be appended to the \nmenu item.  The value can be one of the following: <ul><li>Object \nspecifying a Menu instance.<\/li><li>Object literal specifying the\nmenu to be created.  Format: <code>{ id: [menu id], itemdata: \n[<a href=\"YAHOO.widget.Menu.html#itemData\">array of values for \nitems<\/a>] }<\/code>.<\/li><li>String specifying the id attribute \nof the <code>&#60;div&#62;<\/code> element of the menu.<\/li><li>\nObject specifying the <code>&#60;div&#62;<\/code> element of the \nmenu.<\/li><\/ul>", "guessedname": "handler", "guessedtype": "property"}, "checked": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu item should be rendered \nwith a checkmark."}, "target": {"default": "null", "type": "String", "description": "String specifying the value for the \"target\" attribute \nof the menu item's anchor element. <strong>Specifying a target will \nrequire the user to click directly on the menu item's anchor node in\norder to cause the browser to navigate to the specified URL.<\/strong> \nWhen building a menu from existing HTML the value of this property \nwill be interpreted from the menu's markup."}, "url": {"default": "\"#\"", "type": "String", "description": "String specifying the URL for the menu item's anchor's \n\"href\" attribute.  When building a menu from existing HTML the value \nof this property will be interpreted from the menu's markup."}, "text": {"default": "\"\"", "type": "String", "description": "String specifying the text label for the menu item.  \nWhen building a menu from existing HTML the value of this property\nwill be interpreted from the menu's markup."}, "selected": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu item should \nbe highlighted."}, "strongemphasis": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the text of the menu item will be \nrendered with strong emphasis.  When building a menu from existing \nHTML the value of this property will be interpreted from the\nmenu's markup."}, "disabled": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu item should be disabled.  \n(Disabled menu items are  dimmed and will not respond to user input \nor fire events.)"}, "emphasis": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the text of the menu item will be \nrendered with emphasis.  When building a menu from existing HTML the \nvalue of this property will be interpreted from the menu's markup."}, "helptext": {"default": "null", "type": "String|<a href=\"http:\/\/www.w3.org\/TR\/\n2000\/WD-DOM-Level-1-20000929\/level-one-html.html#ID-58190037\">\nHTMLElement<\/a>", "description": "String specifying additional instructional text to \naccompany the text for the nenu item.", "guessedname": "handler", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;li&#62;<\/code> element of the menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-38450247\">HTMLOptGroupElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;<\/code> element of the menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-70901257\">HTMLOptionElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;option&#62;<\/code> element of the menu item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu item. See configuration class documentation \nfor more details."}], "description": "Creates an item for a menu."}], "namespace": "YAHOO.widget", "module": "menu", "events": {"mouseOutEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the mouse has left the menu item.  Passes back \nthe DOM Event object as an argument.", "guessedname": "mouseOutEvent", "guessedtype": "property"}, "mouseUpEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user releases a mouse button while the mouse \nis over the menu item.  Passes back the DOM Event object as an argument.", "guessedname": "mouseUpEvent", "guessedtype": "property"}, "keyUpEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user releases a key when the menu item has \nfocus.  Passes back the DOM Event object as an argument.", "guessedname": "keyUpEvent", "guessedtype": "property"}, "focusEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the menu item receives focus.", "guessedname": "focusEvent", "guessedtype": "property"}, "keyPressEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user presses an alphanumeric key when the \nmenu item has focus.  Passes back the DOM Event object as an argument.", "guessedname": "keyPressEvent", "guessedtype": "property"}, "mouseOverEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the mouse has entered the menu item.  Passes \nback the DOM Event object as an argument.", "guessedname": "mouseOverEvent", "guessedtype": "property"}, "blurEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the menu item loses the input focus.", "guessedname": "blurEvent", "guessedtype": "property"}, "mouseDownEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user mouses down on the menu item.  Passes \nback the DOM Event object as an argument.", "guessedname": "mouseDownEvent", "guessedtype": "property"}, "clickEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user clicks the on the menu item.  Passes \nback the DOM Event object as an argument.", "guessedname": "clickEvent", "guessedtype": "property"}, "destroyEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the menu item's <code>&#60;li&#62;<\/code> \nelement is removed from its parent <code>&#60;ul&#62;<\/code> element.", "guessedname": "destroyEvent", "guessedtype": "property"}, "keyDownEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user presses a key when the menu item has \nfocus.  Passes back the DOM Event object as an argument.", "guessedname": "keyDownEvent", "guessedtype": "property"}}, "guessedname": "MenuItem", "methods": {"_createRootNodeStructure": {"description": "Creates the core DOM structure for the menu item.", "private": "", "guessedname": "_createRootNodeStructure", "guessedtype": "function"}, "getFirstItemIndex": {"return": {"type": "Object", "description": ""}, "description": "Get the index of the first item in an array", "private": "", "params": [{"type": "p_aArray", "name": "Array", "description": " to search."}, {"type": "p_nStartIndex", "name": "Number", "description": " indicating the index to \nstart searching the array."}], "guessedname": "getFirstItemIndex", "guessedtype": "function"}, "configURL": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"url\" configuration property of \nthe menu item changes.", "guessedname": "configURL", "guessedtype": "function"}, "focus": {"description": "Causes the menu item to receive the focus and fires the \nfocus event.", "guessedname": "focus", "guessedtype": "function"}, "_getFirstElement": {"return": {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-58190037\">HTMLElement<\/a>", "description": ""}, "description": "Returns an HTML element's first HTML element node.", "private": "", "params": [{"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-58190037\">HTMLElement<\/a>", "name": "p_oElement", "description": " Object \nreference specifying the element to be evaluated."}, {"type": "String", "name": "p_sTagName", "description": " Optional. String specifying the tagname of \nthe element to be retrieved."}], "guessedname": "_getFirstElement", "guessedtype": "function"}, "_checkDOMNode": {"return": {"type": "Boolean", "description": ""}, "description": "Determines if an object is an HTML element.", "private": "", "params": [{"type": "Object", "name": "p_oObject", "description": " Object to be evaluated."}], "guessedname": "_checkDOMNode", "guessedtype": "function"}, "configTarget": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"target\" configuration property \nof the menu item changes.", "guessedname": "configTarget", "guessedtype": "function"}, "configStrongEmphasis": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"strongemphasis\" configuration \nproperty of the menu item changes.", "guessedname": "configStrongEmphasis", "guessedtype": "function"}, "configSubmenu": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"submenu\" configuration property \nof the menu item changes.", "guessedname": "configSubmenu", "guessedtype": "function"}, "getPreviousEnabledSibling": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Finds the menu item's previous enabled sibling.", "guessedname": "getPreviousEnabledSibling", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;li&#62;<\/code> element of the menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-38450247\">HTMLOptGroupElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;<\/code> element of the menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-70901257\">HTMLOptionElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;option&#62;<\/code> element of the menu item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu item. See configuration class documentation \nfor more details."}], "description": "The MenuItem class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references \nfor pre-existing markup, and creates required markup if it is not \nalready present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu item.", "guessedname": "toString", "guessedtype": "function"}, "getNextArrayItem": {"return": {"type": "Object", "description": ""}, "description": "Finds the next item in an array.", "private": "", "params": [{"type": "p_aArray", "name": "Array", "description": " to search."}, {"type": "p_nStartIndex", "name": "Number", "description": " indicating the index to \nstart searching the array."}], "guessedname": "getNextArrayItem", "guessedtype": "function"}, "configHelpText": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"helptext\" configuration property \nof the menu item changes.", "guessedname": "configHelpText", "guessedtype": "function"}, "destroy": {"description": "Removes the menu item's <code>&#60;li&#62;<\/code> element \nfrom its parent <code>&#60;ul&#62;<\/code> element.", "guessedname": "destroy", "guessedtype": "function"}, "removeHelpText": {"private": "", "description": "Removes the \"hashelptext\" class and corresponding DOM element (EM).", "guessedname": "removeHelpText", "guessedtype": "function"}, "getPreviousArrayItem": {"return": {"type": "Object", "description": ""}, "description": "Returns the previous item in an array", "private": "", "params": [{"type": "p_aArray", "name": "Array", "description": " to search."}, {"type": "p_nStartIndex", "name": "Number", "description": " indicating the index to \nstart searching the array."}], "guessedname": "getPreviousArrayItem", "guessedtype": "function"}, "getNextEnabledSibling": {"return": {"type": "", "description": "YAHOO.widget.MenuItem"}, "description": "Finds the menu item's next enabled sibling.", "guessedname": "getNextEnabledSibling", "guessedtype": "function"}, "configEmphasis": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"emphasis\" configuration property\nof the menu item changes.", "guessedname": "configEmphasis", "guessedtype": "function"}, "configChecked": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"checked\" configuration property \nof the menu item changes.", "guessedname": "configChecked", "guessedtype": "function"}, "configDisabled": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"disabled\" configuration property \nof the menu item changes.", "guessedname": "configDisabled", "guessedtype": "function"}, "blur": {"description": "Causes the menu item to lose focus and fires the \nonblur event.", "guessedname": "blur", "guessedtype": "function"}, "_preloadImage": {"guessedname": "_preloadImage", "params": [{"type": "String", "name": "p_sPath", "description": " String specifying the path to the image."}], "description": "Preloads an image by creating an image element from the \nspecified path and appending the image to the body of the document.", "private": "", "guessedtype": "function"}, "_checkString": {"return": {"type": "Boolean", "description": ""}, "description": "Determines if an object is a string.", "private": "", "params": [{"type": "Object", "name": "p_oObject", "description": " Object to be evaluated."}], "guessedname": "_checkString", "guessedtype": "function"}, "configSelected": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"selected\" configuration property \nof the menu item changes.", "guessedname": "configSelected", "guessedtype": "function"}, "initHelpText": {"private": "", "description": "Adds the \"hashelptext\" class to the necessary nodes and refires the \n\"selected\" and \"disabled\" configuration events.", "guessedname": "initHelpText", "guessedtype": "function"}, "_initSubTree": {"description": "Iterates the source element's childNodes collection and uses \nthe child nodes to instantiate other menus.", "private": "", "guessedname": "_initSubTree", "guessedtype": "function"}, "configText": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item\nthat fired the event."}], "description": "Event handler for when the \"text\" configuration property of \nthe menu item changes.", "guessedname": "configText", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes an item's configurable properties.", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "file": "menuitem.js", "guessedtype": "function", "shortname": "MenuItem", "properties": {"IMG_ROOT": {"default": "\"http:\/\/us.i1.yimg.com\/us.yimg.com\/i\/\"", "type": "String", "description": "String representing the prefix path to use for \nnon-secure images.", "guessedname": "IMG_ROOT", "guessedtype": "property"}, "IMG_ROOT_SSL": {"default": "\"https:\/\/a248.e.akamai.net\/sec.yimg.com\/i\/\"", "type": "String", "description": "String representing the prefix path to use for securely \nserved images.", "guessedname": "IMG_ROOT_SSL", "guessedtype": "property"}, "CHECKED_IMAGE_PATH": {"description": "String representing the path to the image to be used for \nthe checked state.", "default": "\"nt\/ic\/ut\/bsc\/menuchk8_nrm_1.gif\"", "guessedname": "CHECKED_IMAGE_PATH", "guessedtype": "property", "type": "String", "final": ""}, "SELECTED_CHECKED_IMAGE_PATH": {"description": "String representing the path to the image to be used for \nthe selected checked state.", "default": "\"nt\/ic\/ut\/bsc\/menuchk8_hov_1.gif\"", "guessedname": "SELECTED_CHECKED_IMAGE_PATH", "guessedtype": "property", "type": "String", "final": ""}, "COLLAPSED_SUBMENU_INDICATOR_ALT_TEXT": {"description": "String representing the alt text for the image to be used \nfor the submenu arrow indicator.", "default": "\"Collapsed.  Click to expand.\"", "guessedname": "COLLAPSED_SUBMENU_INDICATOR_ALT_TEXT", "guessedtype": "property", "type": "String", "final": ""}, "index": {"default": "null", "type": "Number", "description": "Number indicating the ordinal position of the menu item in \nits group.", "guessedname": "index", "guessedtype": "property"}, "parent": {"default": "null", "type": "YAHOO.widget.Menu", "description": "Object reference to the menu item's parent menu.", "guessedname": "parent", "guessedtype": "property"}, "DISABLED_SUBMENU_INDICATOR_IMAGE_PATH": {"description": "String representing the path to the image to be used for the \nsubmenu arrow indicator when the menu item is disabled.", "default": "\"nt\/ic\/ut\/alt1\/menuarorght8_dim_1.gif\"", "guessedname": "DISABLED_SUBMENU_INDICATOR_IMAGE_PATH", "guessedtype": "property", "type": "String", "final": ""}, "CHECKED_IMAGE_ALT_TEXT": {"description": "String representing the alt text for the image to be used \nfor the checked image.", "default": "\"Checked.\"", "guessedname": "CHECKED_IMAGE_ALT_TEXT", "guessedtype": "property", "type": "String", "final": ""}, "SELECTED_SUBMENU_INDICATOR_IMAGE_PATH": {"description": "String representing the path to the image to be used for the \nsubmenu arrow indicator when the menu item is selected.", "default": "\"nt\/ic\/ut\/alt1\/menuarorght8_hov_1.gif\"", "guessedname": "SELECTED_SUBMENU_INDICATOR_IMAGE_PATH", "guessedtype": "property", "type": "String", "final": ""}, "imageRoot": {"type": "String", "description": "String representing the root path for all of the menu \nitem's images.", "guessedname": "imageRoot", "guessedtype": "property"}, "SUBMENU_INDICATOR_IMAGE_PATH": {"description": "String representing the path to the image to be used for the \nmenu item's submenu arrow indicator.", "default": "\"nt\/ic\/ut\/alt1\/menuarorght8_nrm_1.gif\"", "guessedname": "SUBMENU_INDICATOR_IMAGE_PATH", "guessedtype": "property", "type": "String", "final": ""}, "groupIndex": {"default": "null", "type": "Number", "description": "Number indicating the index of the group to which the menu \nitem belongs.", "guessedname": "groupIndex", "guessedtype": "property"}, "_oSubmenu": {"description": "Object reference to the menu item's submenu.", "default": "null", "private": "", "guessedname": "_oSubmenu", "guessedtype": "property", "type": "YAHOO.widget.Menu"}, "_oText": {"description": "Object reference to the menu item's text node.", "default": "null", "private": "", "guessedname": "_oText", "guessedtype": "property", "type": "TextNode"}, "CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the \n<code>&#60;li&#62;<\/code> element of the menu item.", "default": "\"yuimenuitem\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "SUBMENU_TYPE": {"final": "", "type": "YAHOO.widget.Menu", "description": "Object representing the type of menu to instantiate and \nadd when parsing the child nodes of the menu item's source HTML element.", "guessedname": "SUBMENU_TYPE", "guessedtype": "property"}, "DISABLED_SUBMENU_INDICATOR_ALT_TEXT": {"description": "String representing the alt text for the image to be used \nfor the submenu arrow indicator when the menu item is disabled.", "default": "\"Disabled.\"", "guessedname": "DISABLED_SUBMENU_INDICATOR_ALT_TEXT", "guessedtype": "property", "type": "String", "final": ""}, "srcElement": {"default": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-74680021\">HTMLLIElement<\/a>|<a href=\"http:\/\/www.\nw3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-html.html#ID-38450247\"\n>HTMLOptGroupElement<\/a>|<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-\nLevel-1-20000929\/level-one-html.html#ID-70901257\">HTMLOptionElement<\/a>", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>|<a href=\"http:\/\/www.w3.\norg\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-html.html#ID-38450247\">\nHTMLOptGroupElement<\/a>|<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-\nLevel-1-20000929\/level-one-html.html#ID-70901257\">HTMLOptionElement<\/a>", "description": "Object reference to the HTML element (either \n<code>&#60;li&#62;<\/code>, <code>&#60;optgroup&#62;<\/code> or \n<code>&#60;option&#62;<\/code>) used create the menu item.", "guessedname": "srcElement", "guessedtype": "property"}, "_checkImage": {"description": "Object reference to the menu item's checkmark image.", "default": "null", "private": "", "guessedname": "_checkImage", "guessedtype": "property", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-17701901\">HTMLImageElement<\/a>"}, "EXPANDED_SUBMENU_INDICATOR_ALT_TEXT": {"description": "String representing the alt text for the image to be used \nfor the submenu arrow indicator when the submenu is visible.", "default": "\"Expanded.  Click to collapse.\"", "guessedname": "EXPANDED_SUBMENU_INDICATOR_ALT_TEXT", "guessedtype": "property", "type": "String", "final": ""}, "isSecure": {"type": "Boolean", "description": "Boolean representing whether or not the current browsing \ncontext is secure (HTTPS).", "guessedname": "isSecure", "guessedtype": "property"}, "value": {"default": "null", "type": "Object", "description": "Object reference to the menu item's value.", "guessedname": "value", "guessedtype": "property"}, "element": {"default": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level\n-one-html.html#ID-74680021\">HTMLLIElement<\/a>", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>", "description": "Object reference to the menu item's \n<code>&#60;li&#62;<\/code> element.", "guessedname": "element", "guessedtype": "property"}, "DISABLED_CHECKED_IMAGE_PATH": {"description": "String representing the path to the image to be used for \nthe disabled checked state.", "default": "\"nt\/ic\/ut\/bsc\/menuchk8_dim_1.gif\"", "guessedname": "DISABLED_CHECKED_IMAGE_PATH", "guessedtype": "property", "type": "String", "final": ""}, "_oAnchor": {"description": "Object reference to the menu item's \n<code>&#60;a&#62;<\/code> element.", "default": "null", "private": "", "guessedname": "_oAnchor", "guessedtype": "property", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-48250443\">HTMLAnchorElement<\/a>"}, "constructor": {"default": "YAHOO.widget.MenuItem", "type": "YAHOO.widget.MenuItem", "description": "Object reference to the menu item's constructor function.", "guessedname": "constructor", "guessedtype": "property"}, "DISABLED_CHECKED_IMAGE_ALT_TEXT": {"description": "String representing the alt text for the image to be used \nfor the checked image when the item is disabled.", "default": "\"Checked. (Item disabled.)\"", "guessedname": "DISABLED_CHECKED_IMAGE_ALT_TEXT", "guessedtype": "property", "type": "String", "final": ""}, "submenuIndicator": {"default": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-17701901\">HTMLImageElement<\/a>", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-17701901\">HTMLImageElement<\/a>", "description": "Object reference to the <code>&#60;img&#62;<\/code> element \nused to create the submenu indicator for the menu item.", "guessedname": "submenuIndicator", "guessedtype": "property"}, "_oHelpTextEM": {"description": "Object reference to the menu item's help text \n<code>&#60;em&#62;<\/code> element.", "default": "null", "private": "", "guessedname": "_oHelpTextEM", "guessedtype": "property", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-58190037\">HTMLElement<\/a>"}, "browser": {"type": "String", "description": "String representing the browser.", "guessedname": "browser", "guessedtype": "property"}}, "description": "Creates an item for a menu."}, "YAHOO.widget.AutoComplete": {"name": "YAHOO.widget.AutoComplete", "constructors": [{"params": [{"type": "HTMLElement", "name": "elInput", "description": "  DOM element reference of an input field."}, {"type": "String", "name": "elInput", "description": "  String ID of an input field."}, {"type": "HTMLElement", "name": "elContainer", "description": "  DOM element reference of an existing DIV."}, {"type": "String", "name": "elContainer", "description": "  String ID of an existing DIV."}, {"type": "Object", "name": "oDataSource", "description": "  Instance of YAHOO.widget.DataSource for query\/results."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of configuration params."}], "description": "The AutoComplete class provides the customizable functionality of a plug-and-play DHTML\nauto completion widget.  Some key features:\n<ul>\n<li>Navigate with up\/down arrow keys and\/or mouse to pick a selection<\/li>\n<li>The drop down container can \"roll down\" or \"fly out\" via configurable\nanimation<\/li>\n<li>UI look-and-feel customizable through CSS, including container\nattributes, borders, position, fonts, etc<\/li>\n<\/ul>"}], "namespace": "YAHOO.widget", "module": "autocomplete", "events": {"dataErrorEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}], "description": "Fired when the AutoComplete instance does not receive query results from the\nDataSource due to an error.", "guessedname": "dataErrorEvent", "guessedtype": "property"}, "dataReturnEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Array", "name": "aResults", "description": "  Results array."}], "description": "Fired when the AutoComplete instance receives query results from the data\nsource.", "guessedname": "dataReturnEvent", "guessedtype": "property"}, "containerExpandEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the results container is expanded.", "guessedname": "containerExpandEvent", "guessedtype": "property"}, "itemArrowToEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt; element item arrowed to."}], "description": "Fired when result item has been arrowed to.", "guessedname": "itemArrowToEvent", "guessedtype": "property"}, "itemArrowFromEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt; element item arrowed from."}], "description": "Fired when result item has been arrowed away from.", "guessedname": "itemArrowFromEvent", "guessedtype": "property"}, "typeAheadEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "String", "name": "sPrefill", "description": "  The prefill string."}], "description": "Fired when the input field has been prefilled by the type-ahead\nfeature.", "guessedname": "typeAheadEvent", "guessedtype": "property"}, "textboxFocusEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the input field receives focus.", "guessedname": "textboxFocusEvent", "guessedtype": "property"}, "itemSelectEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The selected &lt;li&gt; element item."}, {"type": "Object", "name": "oData", "description": "  The data returned for the item, either as an object,\nor mapped from the schema into an array."}], "description": "Fired when an item is selected via mouse click, ENTER key, or TAB key.", "guessedname": "itemSelectEvent", "guessedtype": "property"}, "dataRequestEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}], "description": "Fired when the AutoComplete instance makes a query to the DataSource.", "guessedname": "dataRequestEvent", "guessedtype": "property"}, "itemMouseOverEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt element item moused to."}], "description": "Fired when result item has been moused over.", "guessedname": "itemMouseOverEvent", "guessedtype": "property"}, "_sLastTextboxValue": {"guessedname": "_sLastTextboxValue", "type": "String", "description": "Internal tracker to last known textbox value, used to determine whether or not\nto trigger a query via interval for certain IME users.", "private": "", "guessedtype": "property"}, "unmatchedItemSelectEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The user-typed query string."}], "description": "Fired when a user selection does not match any of the displayed result items.\nNote that this event may not behave as expected when delimiter characters\nhave been defined.", "guessedname": "unmatchedItemSelectEvent", "guessedtype": "property"}, "selectionEnforceEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired if forceSelection is enabled and the user's input has been cleared\nbecause it did not match one of the returned query results.", "guessedname": "selectionEnforceEvent", "guessedtype": "property"}, "textboxKeyEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "Number", "name": "nKeycode", "description": "  The keycode number."}], "description": "Fired when the input field receives key input.", "guessedname": "textboxKeyEvent", "guessedtype": "property"}, "textboxBlurEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the input field loses focus.", "guessedname": "textboxBlurEvent", "guessedtype": "property"}, "containerCollapseEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the results container is collapsed.", "guessedname": "containerCollapseEvent", "guessedtype": "property"}, "itemMouseOutEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt; element item moused from."}], "description": "Fired when result item has been moused out.", "guessedname": "itemMouseOutEvent", "guessedtype": "property"}}, "guessedname": "AutoComplete", "methods": {"_onTextboxKeyPress": {"guessedname": "_onTextboxKeyPress", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The keypress event."}, {"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles textbox keypress events.", "private": "", "guessedtype": "function"}, "_selectText": {"guessedname": "_selectText", "params": [{"type": "HTMLElement", "name": "oTextbox", "description": "  Text input box element in which to select text."}, {"type": "Number", "name": "nStart", "description": "  Starting index of text string to select."}, {"type": "Number", "name": "nEnd", "description": "  Ending index of text selection."}], "description": "Selects text in the input field.", "private": "", "guessedtype": "function"}, "_toggleContainerHelpers": {"guessedname": "_toggleContainerHelpers", "params": [{"type": "Boolean", "name": "bShow", "description": "  True if container is expanded, false if collapsed"}], "description": "Syncs results container with its helpers.", "private": "", "guessedtype": "function"}, "_initContainer": {"private": "", "description": "Initializes the results container once at object creation", "guessedname": "_initContainer", "guessedtype": "function"}, "_typeAhead": {"guessedname": "_typeAhead", "params": [{"type": "HTMLElement", "name": "oItem", "description": "  The &lt;li&gt; element item whose data populates the input field."}, {"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Updates in the text input box with the first query result as the user types,\nselecting the substring that the user has not typed.", "private": "", "guessedtype": "function"}, "getListItems": {"return": {"type": "HTMLElement[]", "description": "Array of &lt;li&gt; elements within the results container."}, "description": "Public accessor to the internal array of DOM &lt;li&gt; elements that\ndisplay query results within the results container.", "guessedname": "getListItems", "guessedtype": "function"}, "_toggleHighlight": {"guessedname": "_toggleHighlight", "params": [{"type": "HTMLElement", "name": "oNewItem", "description": "  The &lt;li&gt; element item to receive highlight behavior."}, {"type": "String", "name": "sType", "description": "  Type \"mouseover\" will toggle highlight on, and \"mouseout\" will toggle highlight off."}], "description": "Toggles the highlight on or off for an item in the container, and also cleans\nup highlighting of any previous item.", "private": "", "guessedtype": "function"}, "_onTextboxFocus": {"guessedname": "_onTextboxFocus", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The focus event."}, {"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles text input box receiving focus.", "private": "", "guessedtype": "function"}, "_initList": {"private": "", "description": "Clears out contents of container body and creates up to\nYAHOO.widget.AutoComplete#maxResultsDisplayed &lt;li&gt; elements in an\n&lt;ul&gt; element.", "guessedname": "_initList", "guessedtype": "function"}, "_isIgnoreKey": {"return": {"type": "Boolean", "description": "True if key should be ignored, false otherwise."}, "description": "Whether or not key is functional or should be ignored. Note that the right\narrow key is NOT an ignored key since it triggers queries for certain intl\ncharsets.", "private": "", "params": [{"type": "Number", "name": "nKeycode", "description": "  Code of key pressed."}], "guessedname": "_isIgnoreKey", "guessedtype": "function"}, "_onContainerMouseover": {"guessedname": "_onContainerMouseover", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseover event."}, {"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container mouseover events.", "private": "", "guessedtype": "function"}, "_togglePrehighlight": {"guessedname": "_togglePrehighlight", "params": [{"type": "HTMLElement", "name": "oNewItem", "description": "  The &lt;li&gt; element item to receive highlight behavior."}, {"type": "String", "name": "sType", "description": "  Type \"mouseover\" will toggle highlight on, and \"mouseout\" will toggle highlight off."}], "description": "Toggles the pre-highlight on or off for an item in the container.", "private": "", "guessedtype": "function"}, "setBody": {"params": [{"type": "String", "name": "sHeader", "description": "  HTML markup for results container body."}], "description": "Sets HTML markup for the results container body. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"ac_bd\".", "guessedname": "setBody", "guessedtype": "function"}, "_updateValue": {"guessedname": "_updateValue", "params": [{"type": "HTMLElement", "name": "oItem", "description": "  The &lt;li&gt; element item with which to update the value."}], "description": "Updates the text input box value with selected query result. If a delimiter\nhas been defined, then the value gets appended with the delimiter.", "private": "", "guessedtype": "function"}, "_populateList": {"guessedname": "_populateList", "params": [{"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Array", "name": "aResults", "description": "  An array of query result objects from the DataSource."}, {"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Populates the array of &lt;li&gt; elements in the container with query\nresults. This method is passed to YAHOO.widget.DataSource#getResults as a\ncallback function so results from the DataSource instance are returned to the\nAutoComplete instance.", "private": "", "guessedtype": "function"}, "doBeforeExpandContainer": {"return": {"type": "Boolean", "description": "Return true to continue expanding container, false to cancel the expand."}, "description": "Overridable method called before container expands allows implementers to access data\nand DOM elements.", "guessedname": "doBeforeExpandContainer", "guessedtype": "function"}, "_moveSelection": {"guessedname": "_moveSelection", "params": [{"type": "Number", "name": "nKeyCode", "description": "  Code of key pressed."}], "description": "Triggered by up and down arrow keys, changes the current highlighted\n&lt;li&gt; element item. Scrolls container if necessary.", "private": "", "guessedtype": "function"}, "_initContainerHelpers": {"private": "", "description": "Initializes the results container helpers if they are enabled and do\nnot exist", "guessedname": "_initContainerHelpers", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the AutoComplete instance."}, "description": "Public accessor to the unique name of the AutoComplete instance.", "guessedname": "toString", "guessedtype": "function"}, "_onItemMouseout": {"guessedname": "_onItemMouseout", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseout event."}, {"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles &lt;li&gt; element mouseout events in the container.", "private": "", "guessedtype": "function"}, "getListItemData": {"return": {"type": "Object | Array", "description": "Object or array of result data or null"}, "description": "Public accessor to the data held in an &lt;li&gt; element of the\nresults container.", "guessedname": "getListItemData", "guessedtype": "function"}, "_sendQuery": {"guessedname": "_sendQuery", "params": [{"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Makes query request to the DataSource.", "private": "", "guessedtype": "function"}, "_onFormSubmit": {"guessedname": "_onFormSubmit", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The submit event."}, {"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles form submission event.", "private": "", "guessedtype": "function"}, "setFooter": {"params": [{"type": "String", "name": "sFooter", "description": "  HTML markup for results container footer."}], "description": "Sets HTML markup for the results container footer. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"ac_ft\".", "guessedname": "setFooter", "guessedtype": "function"}, "_selectItem": {"guessedname": "_selectItem", "params": [{"type": "HTMLElement", "name": "oItem", "description": "  The selected &lt;li&gt; element item."}], "description": "Selects a result item from the container", "private": "", "guessedtype": "function"}, "_enableIntervalDetection": {"private": "", "description": "Enables query triggers based on text input detection by intervals (rather\nthan by key events).", "guessedname": "_enableIntervalDetection", "guessedtype": "function"}, "sendQuery": {"params": [{"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Makes query request to the DataSource.", "guessedname": "sendQuery", "guessedtype": "function"}, "_toggleContainer": {"guessedname": "_toggleContainer", "params": [{"type": "Boolean", "name": "bShow", "description": "  True if container should be expanded, false if container should be collapsed"}], "description": "Animates expansion or collapse of the container.", "private": "", "guessedtype": "function"}, "_onContainerScroll": {"guessedname": "_onContainerScroll", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The scroll event."}, {"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container scroll events.", "private": "", "guessedtype": "function"}, "_clearSelection": {"private": "", "description": "When forceSelection is true and the user attempts\nleave the text input box without selecting an item from the query results,\nthe user selection is cleared.", "guessedname": "_clearSelection", "guessedtype": "function"}, "__initProps": {"private": "", "description": "Updates and validates latest public config properties.", "guessedname": "_initProps", "guessedtype": "function"}, "isContainerOpen": {"return": {"type": "Boolean", "description": "Returns true if container is in an expanded state, false otherwise."}, "description": "Returns true if container is in an expanded state, false otherwise.", "guessedname": "isContainerOpen", "guessedtype": "function"}, "_cancelIntervalDetection": {"guessedname": "_cancelIntervalDetection", "params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Cancels text input detection by intervals.", "private": "", "guessedtype": "function"}, "_initListItem": {"guessedname": "_initListItem", "params": [{"type": "HTMLElement", "name": "oItem", "description": "  The &lt;li&gt; DOM element."}, {"type": "Number", "name": "nItemIndex", "description": "  The index of the element."}], "description": "Initializes each &lt;li&gt; element in the container list.", "private": "", "guessedtype": "function"}, "formatResult": {"return": {"type": "String", "description": "HTML markup of formatted result data."}, "params": [{"type": "Object", "name": "oResultItem", "description": "  Result item representing one query result. Data is held in an array."}, {"type": "String", "name": "sQuery", "description": "  The current query string."}], "description": "Overridable method that converts a result item object into HTML markup\nfor display. Return data values are accessible via the oResultItem object,\nand the key return value will always be oResultItem[0]. Markup will be\ndisplayed within &lt;li&gt; element tags in the container.", "guessedname": "formatResult", "guessedtype": "function"}, "_textMatchesOption": {"guessedname": "_textMatchesOption", "return": {"type": "Boolean", "description": "True if user-input text matches a result, false otherwise."}, "description": "Whether or not user-typed value in the text input box matches any of the\nquery results.", "private": "", "guessedtype": "function"}, "_onItemMouseover": {"guessedname": "_onItemMouseover", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseover event."}, {"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles &lt;li&gt; element mouseover events in the container.", "private": "", "guessedtype": "function"}, "_onTextboxKeyDown": {"guessedname": "_onTextboxKeyDown", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The keydown event."}, {"type": "object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles textbox keydown events of functional keys, mainly for UI behavior.", "private": "", "guessedtype": "function"}, "_onItemMouseclick": {"guessedname": "_onItemMouseclick", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles &lt;li&gt; element click events in the container.", "private": "", "guessedtype": "function"}, "_onTextboxBlur": {"guessedname": "_onTextboxBlur", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The focus event."}, {"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles text input box losing focus.", "private": "", "guessedtype": "function"}, "_onTextboxKeyUp": {"guessedname": "_onTextboxKeyUp", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The keyup event."}, {"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles textbox keyup events that trigger queries.", "private": "", "guessedtype": "function"}, "_onContainerMouseout": {"guessedname": "_onContainerMouseout", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseout event."}, {"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container mouseout events.", "private": "", "guessedtype": "function"}, "_onIMEDetected": {"guessedname": "_onIMEDetected", "params": [{"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Enables interval detection for  Korean IME support.", "private": "", "guessedtype": "function"}, "_jumpSelection": {"private": "", "description": "For values updated by type-ahead, the right arrow key jumps to the end\nof the textbox, otherwise the container is closed.", "guessedname": "_jumpSelection", "guessedtype": "function"}, "setHeader": {"params": [{"type": "String", "name": "sHeader", "description": "  HTML markup for results container header."}], "description": "Sets HTML markup for the results container header. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"ac_hd\".", "guessedname": "setHeader", "guessedtype": "function"}, "_onContainerResize": {"guessedname": "_onContainerResize", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The resize event."}, {"type": "Object", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container resize events.", "private": "", "guessedtype": "function"}}, "file": "AutoComplete.js", "guessedtype": "function", "shortname": "AutoComplete", "properties": {"forceSelection": {"default": "false", "type": "Boolean", "description": "Whether or not to force the user's selection to match one of the query\nresults. Enabling this feature essentially transforms the input field into a\n&lt;select&gt; field. This feature is not recommended with delimiter character(s)\ndefined.", "guessedname": "forceSelection", "guessedtype": "property"}, "animHoriz": {"default": "false", "type": "Boolean", "description": "Whether or not to animate the expansion\/collapse of the results container in the\nhorizontal direction.", "guessedname": "animHoriz", "guessedtype": "property"}, "useShadow": {"default": "false", "type": "Boolean", "description": "Whether or not the results container should have a shadow.", "guessedname": "useShadow", "guessedtype": "property"}, "useIFrame": {"default": "false", "type": "Boolean", "description": "Whether or not to use an iFrame to layer over Windows form elements in\nIE. Set to true only when the results container will be on top of a\n&lt;select&gt; field in IE and thus exposed to the IE z-index bug (i.e.,\n5.5 < IE < 7).", "guessedname": "useIFrame", "guessedtype": "property"}, "_iFrameSrc": {"guessedname": "_iFrameSrc", "type": "String", "description": "Src to iFrame used when useIFrame = true. Supports implementations over SSL\nas well.", "private": "", "guessedtype": "property"}, "_nDelayID": {"guessedname": "_nDelayID", "type": "Number", "description": "Delay timeout ID.", "private": "", "guessedtype": "property"}, "_oAnim": {"guessedname": "_oAnim", "type": "Boolean", "description": "Animation instance for container expand\/collapse.", "private": "", "guessedtype": "property"}, "_queryInterval": {"guessedname": "_queryInterval", "type": "Object", "description": "For users typing via certain IMEs, queries must be triggered by intervals,\nsince key events yet supported across all browsers for all IMEs.", "private": "", "guessedtype": "property"}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Name of AutoComplete instance.", "private": "", "guessedtype": "property"}, "_maxResultsDisplayed": {"guessedname": "_maxResultsDisplayed", "type": "Number", "description": "Internal count of &lt;li&gt; elements displayed and hidden in results container.", "private": "", "guessedtype": "property"}, "_aListItems": {"guessedname": "_aListItems", "type": "Array", "description": "Array of &lt;li&gt; elements references that contain query results within the\nresults container.", "private": "", "guessedtype": "property"}, "_nKeyCode": {"guessedname": "_nKeyCode", "type": "Number", "description": "Key code of the last key pressed in textbox.", "private": "", "guessedtype": "property"}, "_oTextbox": {"guessedname": "_oTextbox", "type": "HTMLElement", "description": "Text input field DOM element.", "private": "", "guessedtype": "property"}, "typeAhead": {"default": "false", "type": "Boolean", "description": "Whether or not the input field should be automatically updated\nwith the first query result as the user types, auto-selecting the substring\nthat the user has not typed.", "guessedname": "typeAhead", "guessedtype": "property"}, "_nDisplayedItems": {"guessedname": "_nDisplayedItems", "type": "Number", "description": "Number of &lt;li&gt; elements currently displayed in results container.", "private": "", "guessedtype": "property"}, "_sCurQuery": {"guessedname": "_sCurQuery", "type": "String", "description": "Current query string", "private": "", "guessedtype": "property"}, "_bOverContainer": {"guessedname": "_bOverContainer", "type": "Boolean", "description": "Whether or not the mouse is currently over the results\ncontainer. This is necessary in order to prevent clicks on container items\nfrom being text input field blur events.", "private": "", "guessedtype": "property"}, "delimChar": {"type": "String | String[]", "description": "Query delimiter. A single character separator for multiple delimited\nselections. Multiple delimiter characteres may be defined as an array of\nstrings. A null value or empty string indicates that query results cannot\nbe delimited. This feature is not recommended if you need forceSelection to\nbe true.", "guessedname": "delimChar", "guessedtype": "property"}, "alwaysShowContainer": {"default": "false", "type": "Boolean", "description": "Whether or not the results container should always be displayed.\nEnabling this feature displays the container when the widget is instantiated\nand prevents the toggling of the container to a collapsed state.", "guessedname": "alwaysShowContainer", "guessedtype": "property"}, "minQueryLength": {"default": "1", "type": "Number", "description": "Number of characters that must be entered before querying for results. A negative value\neffectively turns off the widget. A value of 0 allows queries of null or empty string\nvalues.", "guessedname": "minQueryLength", "guessedtype": "property"}, "_oContainer": {"guessedname": "_oContainer", "type": "HTMLElement", "description": "Container DOM element.", "private": "", "guessedtype": "property"}, "prehighlightClassName": {"type": "String", "description": "Class name of a pre-highlighted item within results container.", "guessedname": "prehighlightClassName", "guessedtype": "property"}, "highlighClassName": {"default": "\"yui-ac-highlight\"", "type": "String", "description": "Class name of a highlighted item within results container.", "guessedname": "highlightClassName", "guessedtype": "property"}, "_sSavedQuery": {"guessedname": "_sSavedQuery", "type": "String", "description": "Past queries this session (for saving delimited queries).", "private": "", "guessedtype": "property"}, "_bItemSelected": {"guessedname": "_bItemSelected", "type": "Boolean", "description": "Whether or not an item has been selected since the container was populated\nwith results. Reset to false by _populateList, and set to true when item is\nselected.", "private": "", "guessedtype": "property"}, "dataSource": {"type": "Object", "description": "The DataSource object that encapsulates the data used for auto completion.\nThis object should be an inherited object from YAHOO.widget.DataSource.", "guessedname": "dataSource", "guessedtype": "property"}, "autoHighlight": {"default": "true", "type": "Boolean", "description": "Whether or not the first item in results container should be automatically highlighted\non expand.", "guessedname": "autoHighlight", "guessedtype": "property"}, "allowBrowserAutocomplete": {"default": "true", "type": "Boolean", "description": "Whether or not to allow browsers to cache user-typed input in the input\nfield. Disabling this feature will prevent the widget from setting the\nautocomplete=\"off\" on the input field. When autocomplete=\"off\"\nand users click the back button after form submission, user-typed input can\nbe prefilled by the browser from its cache. This caching of user input may\nnot be desired for sensitive data, such as credit card numbers, in which\ncase, implementers should consider setting allowBrowserAutocomplete to false.", "guessedname": "allowBrowserAutocomplete", "guessedtype": "property"}, "animVert": {"default": "true", "type": "Boolean", "description": "Whether or not to animate the expansion\/collapse of the results container in the\nvertical direction.", "guessedname": "animVert", "guessedtype": "property"}, "_nIndex": {"description": "Internal class variable to index multiple AutoComplete instances.", "default": "0", "private": "", "guessedname": "_nIndex", "guessedtype": "property", "type": "Number"}, "_bContainerOpen": {"guessedname": "_bContainerOpen", "type": "Boolean", "description": "Whether or not the results container is currently open.", "private": "", "guessedtype": "property"}, "animSpeed": {"default": "0.3", "type": "Number", "description": "Speed of container expand\/collapse animation, in seconds..", "guessedname": "animSpeed", "guessedtype": "property"}, "_oCurItem": {"guessedname": "_oCurItem", "type": "HTMLElement", "description": "Pointer to the currently highlighted &lt;li&gt; element in the container.", "private": "", "guessedtype": "property"}, "maxResultsDisplayed": {"default": "10", "type": "Number", "description": "Maximum number of results to display in results container.", "guessedname": "maxResultsDisplayed", "guessedtype": "property"}, "_bFocused": {"guessedname": "_bFocused", "type": "Boolean", "description": "Whether or not the input field is currently in focus. If query results come back\nbut the user has already moved on, do not proceed with auto complete behavior.", "private": "", "guessedtype": "property"}, "queryDelay": {"default": "0.5", "type": "Number", "description": "Number of seconds to delay before submitting a query request.  If a query\nrequest is received before a previous one has completed its delay, the\nprevious request is cancelled and the new request is set to the delay.", "guessedname": "queryDelay", "guessedtype": "property"}}, "description": "The AutoComplete class provides the customizable functionality of a plug-and-play DHTML\nauto completion widget.  Some key features:\n<ul>\n<li>Navigate with up\/down arrow keys and\/or mouse to pick a selection<\/li>\n<li>The drop down container can \"roll down\" or \"fly out\" via configurable\nanimation<\/li>\n<li>UI look-and-feel customizable through CSS, including container\nattributes, borders, position, fonts, etc<\/li>\n<\/ul>"}, "YAHOO.util.Region": {"name": "YAHOO.util.Region", "constructors": [{"params": [{"type": "Int", "name": "t", "description": " the top extent"}, {"type": "Int", "name": "r", "description": " the right extent"}, {"type": "Int", "name": "b", "description": " the bottom extent"}, {"type": "Int", "name": "l", "description": " the left extent"}], "description": "A region is a representation of an object on a grid.  It is defined\nby the top, right, bottom, left extents, so is rectangular by default.  If \nother shapes are required, this class could be extended to support it."}], "namespace": "YAHOO.util", "module": "dom", "guessedname": "Region", "methods": {"getArea": {"return": {"type": "Int", "description": "the region's area"}, "description": "Returns the area of the region", "guessedname": "getArea", "guessedtype": "function"}, "getRegion": {"return": {"type": "Region", "description": "The region that the element occupies"}, "description": "Returns a region that is occupied by the DOM element", "static": "", "guessedname": "getRegion", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": " The element"}]}, "contains": {"return": {"type": "Boolean", "description": "True if the region is contained with this region, \nelse false"}, "params": [{"type": "Region", "name": "region", "description": " The region to evaluate"}], "description": "Returns true if this region contains the region passed in", "guessedname": "contains", "guessedtype": "function"}, "union": {"return": {"type": "Region", "description": "The union region"}, "params": [{"type": "Region", "name": "region", "description": " The region that to create the union with"}], "description": "Returns the region representing the smallest region that can contain both\nthe passed in region and this region.", "guessedname": "union", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "string the region properties"}, "description": "toString", "guessedname": "toString", "guessedtype": "function"}, "intersect": {"return": {"type": "Region", "description": "The overlap region, or null if there is no overlap"}, "params": [{"type": "Region", "name": "region", "description": " The region that intersects"}], "description": "Returns the region where the passed in region overlaps with this one", "guessedname": "intersect", "guessedtype": "function"}}, "file": "Region.js", "guessedtype": "function", "shortname": "Region", "properties": {"right": {"type": "int", "description": "The region's right extent", "guessedname": "right", "guessedtype": "property"}, "bottom": {"type": "Int", "description": "The region's bottom extent", "guessedname": "bottom", "guessedtype": "property"}, "top": {"type": "Int", "description": "The region's top extent", "guessedname": "top", "guessedtype": "property"}, "1": {"type": "Int", "description": "The region's top extent as index, for symmetry with set\/getXY"}, "0": {"type": "Int", "description": "The region's left extent as index, for symmetry with set\/getXY"}, "left": {"type": "Int", "description": "The region's left extent", "guessedname": "left", "guessedtype": "property"}}, "description": "A region is a representation of an object on a grid.  It is defined\nby the top, right, bottom, left extents, so is rectangular by default.  If \nother shapes are required, this class could be extended to support it."}, "YAHOO.widget.SliderThumb": {"name": "YAHOO.widget.SliderThumb", "constructors": [{"params": [{"type": "String", "name": "id", "description": " the id of the slider html element"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop items"}, {"type": "int", "name": "iLeft", "description": " the number of pixels the element can move left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move right"}, {"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the element \nshould move a certain number pixels at a time."}], "description": "A drag and drop implementation to be used as the thumb of a slider."}], "namespace": "YAHOO.widget", "module": "slider", "guessedname": "SliderThumb", "methods": {"onChange": {"private": "", "description": "The onchange event for the handle\/thumb is delegated to the YAHOO.widget.Slider\ninstance it belongs to.", "guessedname": "onChange", "guessedtype": "function"}, "getValue": {"return": {"type": "int", "description": "the number of pixels (positive or negative) the\nslider has moved from the start position."}, "description": "Gets the current offset from the element's start position in\npixels.", "guessedname": "getValue", "guessedtype": "function"}, "getOffsetFromParent": {"type": "[int, int]", "params": [{"type": "[int, int]", "name": "parentPos", "description": " Optionally accepts the position of the parent"}], "description": "Returns the difference between the location of the thumb and its parent.", "guessedname": "getOffsetFromParent", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the instance"}, "description": "Thumb toString", "guessedname": "toString", "guessedtype": "function"}, "getYValue": {"return": {"type": "int", "description": "the number of pixels (positive or negative) the\nslider has moved vertically from the start position."}, "description": "Gets the current Y offset from the element's start position in\npixels.", "guessedname": "getYValue", "guessedtype": "function"}, "initSlider": {"params": [{"type": "int", "name": "iLeft", "description": " the number of pixels the element can move left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move right"}, {"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " the width of the tick interval."}], "description": "Set up the slider, must be called in the constructor of all subclasses", "guessedname": "initSlider", "guessedtype": "function"}, "getXValue": {"return": {"type": "int", "description": "the number of pixels (positive or negative) the\nslider has moved horizontally from the start position."}, "description": "Gets the current X offset from the element's start position in\npixels.", "guessedname": "getXValue", "guessedtype": "function"}, "clearTicks": {"description": "Clear's the slider's ticks", "guessedname": "clearTicks", "guessedtype": "function"}}, "extends": "YAHOO.util.DD", "superclass": "YAHOO.widget.YAHOO.util.DD", "file": "SliderThumb.js", "guessedtype": "function", "shortname": "SliderThumb", "properties": {"isTarget": {"private": "", "description": "Overrides the isTarget property in YAHOO.util.DragDrop", "guessedname": "isTarget", "guessedtype": "property"}, "maintainOffset": {"guessedname": "maintainOffset", "type": "boolean", "description": "Informs the drag and drop util that the offsets should remain when\nresetting the constraints.  This preserves the slider value when\nthe constraints are reset", "private": "", "guessedtype": "property"}, "parentElId": {"type": "string", "description": "The id of the thumbs parent HTML element (the slider background \nelement).", "guessedname": "parentElId", "guessedtype": "property"}, "_isHoriz": {"guessedname": "_isHoriz", "type": "boolean", "description": "Flag used to figure out if this is a horizontal or vertical slider", "private": "", "guessedtype": "property"}, "tickSize": {"guessedname": "tickSize", "type": "int", "description": "The tick size for this slider", "private": "", "guessedtype": "property"}, "_prevVal": {"guessedname": "_prevVal", "type": "int", "description": "Cache the last value so we can check for change", "private": "", "guessedtype": "property"}, "startOffset": {"type": "[int, int]", "description": "The (X and Y) difference between the thumb location and its parent \n(the slider background) when the control is instantiated.", "guessedname": "startOffset", "guessedtype": "property"}, "_graduated": {"guessedname": "_graduated", "type": "boolean", "description": "The slider is _graduated if there is a tick interval defined", "private": "", "guessedtype": "property"}, "scroll": {"private": "", "description": "Turns off the autoscroll feature in drag and drop", "guessedname": "scroll", "guessedtype": "property"}}, "description": "A drag and drop implementation to be used as the thumb of a slider."}, "YAHOO.widget.ContainerEffect": {"name": "YAHOO.widget.ContainerEffect", "constructors": [{"params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": "\t\tThe Overlay that the animation should be associated with"}, {"type": "Object", "name": "attrIn", "description": "\t\tThe object literal representing the animation arguments to be used for the animate-in transition. The arguments for this literal are: attributes(object, see YAHOO.util.Anim for description), duration(Number), and method(i.e. YAHOO.util.Easing.easeIn)."}, {"type": "Object", "name": "attrOut", "description": "\t\tThe object literal representing the animation arguments to be used for the animate-out transition. The arguments for this literal are: attributes(object, see YAHOO.util.Anim for description), duration(Number), and method(i.e. YAHOO.util.Easing.easeIn)."}, {"type": "HTMLElement", "name": "targetElement", "description": "\tOptional. The target element that should be animated during the transition. Defaults to overlay.element."}, {"type": "class", "name": "Optional.", "description": " The animation class to instantiate. Defaults to YAHOO.util.Anim. Other options include YAHOO.util.Motion."}], "description": "ContainerEffect encapsulates animation transitions that are executed when an Overlay is shown or hidden."}], "namespace": "YAHOO.widget", "module": "container", "guessedname": "ContainerEffect", "methods": {"handleStartAnimateIn": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "The default onStart handler for the in-animation.", "guessedname": "handleStartAnimateIn", "guessedtype": "function"}, "handleStartAnimateOut": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "The default onStart handler for the out-animation.", "guessedname": "handleStartAnimateOut", "guessedtype": "function"}, "animateOut": {"description": "Triggers the out-animation.", "guessedname": "animateOut", "guessedtype": "function"}, "SLIDE": {"return": {"type": "ContainerEffect", "description": "The configured ContainerEffect object"}, "description": "A pre-configured ContainerEffect instance that can be used for sliding an overlay in and out.", "static": "", "guessedname": "SLIDE", "guessedtype": "function", "params": [{"type": "Overlay", "name": "overlay", "description": "\tThe Overlay object to animate"}, {"type": "Number", "name": "dur", "description": "\tThe duration of the animation"}]}, "handleCompleteAnimateOut": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "The default onComplete handler for the out-animation.", "guessedname": "handleCompleteAnimateOut", "guessedtype": "function"}, "handleTweenAnimateIn": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "The default onTween handler for the in-animation.", "guessedname": "handleTweenAnimateIn", "guessedtype": "function"}, "handleTweenAnimateOut": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "The default onTween handler for the out-animation.", "guessedname": "handleTweenAnimateOut", "guessedtype": "function"}, "init": {"description": "Initializes the animation classes and events.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the ContainerEffect"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "FADE": {"return": {"type": "ContainerEffect", "description": "The configured ContainerEffect object"}, "description": "A pre-configured ContainerEffect instance that can be used for fading an overlay in and out.", "static": "", "guessedname": "FADE", "guessedtype": "function", "params": [{"type": "Overlay", "name": "overlay", "description": "\tThe Overlay object to animate"}, {"type": "Number", "name": "dur", "description": "\tThe duration of the animation"}]}, "handleCompleteAnimateIn": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "The default onComplete handler for the in-animation.", "guessedname": "handleCompleteAnimateIn", "guessedtype": "function"}, "animateIn": {"description": "Triggers the in-animation.", "guessedname": "animateIn", "guessedtype": "function"}}, "file": "ContainerEffect.js", "guessedtype": "function", "shortname": "ContainerEffect", "properties": {"attrOut": {"type": "Object", "description": "The animation attributes to use when transitioning out of view", "guessedname": "attrOut", "guessedtype": "property"}, "animClass": {"type": "class", "description": "The animation class to use for animating the overlay", "guessedname": "animClass", "guessedtype": "property"}, "targetElement": {"type": "HTMLElement", "description": "The target element to be animated", "guessedname": "targetElement", "guessedtype": "property"}, "attrIn": {"type": "Object", "description": "The animation attributes to use when transitioning into view", "guessedname": "attrIn", "guessedtype": "property"}, "overlay": {"type": "YAHOO.widget.Overlay", "description": "The overlay to animate", "guessedname": "overlay", "guessedtype": "property"}}, "description": "ContainerEffect encapsulates animation transitions that are executed when an Overlay is shown or hidden."}, "YAHOO.util.AttributeProvider": {"name": "YAHOO.util.AttributeProvider", "namespace": "YAHOO.util", "module": "tabview", "guessedname": "AttributeProvider", "methods": {"set": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "params": [{"type": "String", "name": "key", "description": " The name of the attribute"}, {"type": "Any", "name": "value", "description": " The value to apply to the attribute"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Sets the value of a config.", "guessedname": "set", "guessedtype": "function"}, "fireBeforeChangeEvent": {"params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Obj", "name": "e", "description": " The event object to pass to handlers."}], "description": "Fires the attribute's beforeChange event.", "guessedname": "fireBeforeChangeEvent", "guessedtype": "function"}, "resetValue": {"return": {"type": "Boolean", "description": "Whether or not the value was set"}, "params": [{"type": "String", "name": "key", "description": " The name of the attribute"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Resets the specified attribute's value to its initial value.", "guessedname": "resetValue", "guessedtype": "function"}, "get": {"params": [{"type": "String", "name": "key", "description": " The attribute whose value will be returned."}], "description": "Returns the current value of the attribute.", "guessedname": "get", "guessedtype": "function"}, "resetAttributeConfig": {"guessedname": "resetAttributeConfig", "params": [{"type": "String", "name": "key", "description": " The attribute's name."}], "description": "Resets an attribute to its intial configuration.", "private": "", "guessedtype": "function"}, "register": {"params": [{"type": "String", "name": "key", "description": " The attribute's name"}, {"type": "Object", "name": "map", "description": " A key-value map containing the\nattribute's properties."}], "description": "Adds an Attribute to the AttributeProvider instance.", "guessedname": "register", "guessedtype": "function"}, "getAttributeConfig": {"return": {"type": "object", "description": "A key-value map containing all of the\nattribute's properties."}, "description": "Returns the attribute's properties.", "private": "", "params": [{"type": "String", "name": "key", "description": " The attribute's name"}], "guessedname": "getAttributeConfig", "guessedtype": "function"}, "refresh": {"params": [{"type": "String | Array", "name": "key", "description": " The attribute(s) to refresh"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Sets the attribute's value to its current value.", "guessedname": "refresh", "guessedtype": "function"}, "configureAttribute": {"params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Object", "name": "map", "description": " A key-value map of attribute properties"}, {"type": "Boolean", "name": "init", "description": " Whether or not this should become the intial config."}], "description": "Sets or updates an Attribute instance's properties.", "guessedname": "configureAttribute", "guessedtype": "function"}, "getAttributeKeys": {"return": {"type": "Array", "description": "An array of attribute names."}, "description": "Returns an array of attribute names.", "guessedname": "getAttributeKeys", "guessedtype": "function"}, "fireChangeEvent": {"params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Obj", "name": "e", "description": " The event object to pass to the handlers."}], "description": "Fires the attribute's change event.", "guessedname": "fireChangeEvent", "guessedtype": "function"}, "setAttributes": {"params": [{"type": "Object", "name": "map", "description": "  A key-value map of attributes"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Sets multiple attribute values.", "guessedname": "setAttributes", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "file": "AttributeProvider.js", "guessedtype": "function", "shortname": "AttributeProvider", "properties": {"_configs": {"description": "A key-value map of Attribute configurations", "private": "", "protected": "", "guessedname": "_configs", "guessedtype": "property", "type": "{Object}"}}, "description": "Provides and manages YAHOO.util.Attribute instances"}, "YAHOO.util.Attribute": {"name": "YAHOO.util.Attribute", "constructors": [{"params": [{"type": "Object", "name": "hash", "description": "  The intial Attribute."}, {"type": "YAHOO.util.AttributeProvider", "name": "The", "description": " owner of the Attribute instance."}], "description": "Provides Attribute configurations."}], "namespace": "YAHOO.util", "module": "tabview", "guessedname": "Attribute", "methods": {"setValue": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "params": [{"type": "Any", "name": "value", "description": " The value to apply to the attribute."}, {"type": "Boolean", "name": "silent", "description": " If true the change events will not be fired."}], "description": "Sets the value of the attribute and fires beforeChange and change events.", "guessedname": "setValue", "guessedtype": "function"}, "configure": {"params": [{"type": "Object", "name": "map", "description": " A key-value map of Attribute properties."}, {"type": "Boolean", "name": "init", "description": " Whether or not this should become the initial config."}], "description": "Allows for configuring the Attribute's properties.", "guessedname": "configure", "guessedtype": "function"}, "resetValue": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "description": "Resets the value to the initial config value.", "guessedname": "resetValue", "guessedtype": "function"}, "refresh": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "description": "Resets the value to the current value.\nUseful when values may have gotten out of sync with actual properties.", "guessedname": "refresh", "guessedtype": "function"}, "getValue": {"return": {"type": "any", "description": "The current value of the attribute."}, "description": "Retrieves the current value of the attribute.", "guessedname": "getValue", "guessedtype": "function"}, "resetConfig": {"description": "Resets the attribute config to the initial config state.", "guessedname": "resetConfig", "guessedtype": "function"}}, "file": "Attribute.js", "guessedtype": "function", "shortname": "Attribute", "properties": {"_written": {"guessedname": "_written", "type": "Boolean", "description": "Whether or not the attribute's value has been set.", "private": "", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the attribute.", "guessedname": "name", "guessedtype": "property"}, "writeOnce": {"type": "Boolean", "description": "Whether or not the attribute can only be written once.", "guessedname": "writeOnce", "guessedtype": "property"}, "_initialConfig": {"guessedname": "_initialConfig", "type": "Object", "description": "The attribute's initial configuration.", "private": "", "guessedtype": "property"}, "value": {"type": "String", "description": "The value of the attribute.", "guessedname": "value", "guessedtype": "property"}, "readOnly": {"type": "Boolean", "description": "Whether or not the attribute is read only.", "guessedname": "readOnly", "guessedtype": "property"}, "validator": {"type": "Function", "return": "Boolean", "description": "The validator to use when setting the attribute's value.", "guessedname": "validator", "guessedtype": "property"}, "owner": {"type": "YAHOO.util.AttributeProvider", "description": "The owner of the attribute.", "guessedname": "owner", "guessedtype": "property"}, "method": {"type": "Function", "description": "The method to use when setting the attribute's value.\nThe method recieves the new value as the only argument.", "guessedname": "method", "guessedtype": "property"}}, "description": "Provides Attribute configurations."}, "YAHOO.util.Motion": {"name": "YAHOO.util.Motion", "constructors": [{"params": [{"type": "String | HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Anim subclass for moving elements along a path defined by the \"points\" \nmember of \"attributes\".  All \"points\" are arrays with x, y coordinates.\n<p>Usage: <code>var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);<\/code><\/p>"}], "namespace": "YAHOO.util", "module": "animation", "extends": "YAHOO.util.Anim", "superclass": "YAHOO.util.Anim", "file": "Motion.js", "shortname": "Motion", "requires": "YAHOO.util.Anim", "description": "Anim subclass for moving elements along a path defined by the \"points\" \nmember of \"attributes\".  All \"points\" are arrays with x, y coordinates.\n<p>Usage: <code>var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);<\/code><\/p>"}, "YAHOO.widget.ContextMenuItem": {"name": "YAHOO.widget.ContextMenuItem", "constructors": [{"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the context menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>", "name": "p_oObject", "description": " Object specifying the \n<code>&#60;li&#62;<\/code> element of the context menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-38450247\">HTMLOptGroupElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;<\/code> element of the context \nmenu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-70901257\">HTMLOptionElement<\/a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;option&#62;<\/code> element of the context menu item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the context menu item. See configuration class \ndocumentation for more details."}], "description": "Creates an item for a context menu."}], "namespace": "YAHOO.widget", "module": "menu", "guessedname": "ContextMenuItem", "methods": {"init": {"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the context menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>", "name": "p_oObject", "description": " Object specifying the \n<code>&#60;li&#62;<\/code> element of the context menu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-38450247\">HTMLOptGroupElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;<\/code> element of the context \nmenu item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-70901257\">HTMLOptionElement<\/a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;option&#62;<\/code> element of the context menu item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the context menu item. See configuration class \ndocumentation for more details."}], "description": "The ContextMenuItem class's initialization method. This method \nis automatically called by the constructor, and sets up all DOM references \nfor pre-existing markup, and creates required markup if it is not \nalready present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the context menu item.", "guessedname": "toString", "guessedtype": "function"}}, "extends": "YAHOO.widget.MenuItem", "superclass": "YAHOO.widget.MenuItem", "file": "contextmenuitem.js", "guessedtype": "function", "shortname": "ContextMenuItem", "description": "Creates an item for a context menu."}, "YAHOO.widget.DataSource": {"name": "YAHOO.widget.DataSource", "constructors": [{"description": "The DataSource classes manages sending a request and returning response from a live\r\ndatabase. Supported data include local JavaScript arrays and objects and databases\r\naccessible via XHR connections. Supported response formats include JavaScript arrays,\r\nJSON, XML, and flat-file textual data."}], "namespace": "YAHOO.widget", "module": "autocomplete", "events": {"dataErrorEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The DataSource instance."}, {"type": "Object", "name": "oParent", "description": "  The requesting object."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "String", "name": "sMsg", "description": "  Error message string"}], "description": "Fired when an error is encountered with the live data source.", "guessedname": "dataErrorEvent", "guessedtype": "property"}, "getCachedResultsEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The DataSource instance."}, {"type": "Object", "name": "oParent", "description": "  The requesting object."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object[]", "name": "aResults", "description": "  Array of result objects."}], "description": "Fired when data is retrieved from the local cache.", "guessedname": "getCachedResultsEvent", "guessedtype": "property"}, "cacheQueryEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The DataSource instance."}, {"type": "Object", "name": "oParent", "description": "  The requesting object."}, {"type": "String", "name": "sQuery", "description": "  The query string."}], "description": "Fired when a query is made to the local cache.", "guessedname": "cacheQueryEvent", "guessedtype": "property"}, "queryEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The DataSource instance."}, {"type": "Object", "name": "oParent", "description": "  The requesting object."}, {"type": "String", "name": "sQuery", "description": "  The query string."}], "description": "Fired when a query is made to the live data source.", "guessedname": "queryEvent", "guessedtype": "property"}, "cacheFlushEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The DataSource instance"}], "description": "Fired when the local cache is flushed.", "guessedname": "cacheFlushEvent", "guessedtype": "property"}, "getResultsEvent": {"params": [{"type": "Object", "name": "oSelf", "description": "  The DataSource instance."}, {"type": "Object", "name": "oParent", "description": "  The requesting object."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object[]", "name": "aResults", "description": "  Array of result objects."}], "description": "Fired when data is retrieved from the live data source.", "guessedname": "getResultsEvent", "guessedtype": "property"}}, "guessedname": "DataSource", "methods": {"flushCache": {"description": "Flushes cache.", "guessedname": "flushCache", "guessedtype": "function"}, "getResults": {"params": [{"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function defined by oParent object to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Retrieves query results, first checking the local cache, then making the\r\nquery request to the live data source as defined by the function doQuery.", "guessedname": "getResults", "guessedtype": "function"}, "_init": {"private": "", "description": "Initializes DataSource instance.", "guessedname": "_init", "guessedtype": "function"}, "doQuery": {"params": [{"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function implemented by oParent to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Abstract method implemented by subclasses to make a query to the live data\r\nsource. Must call the callback function with the response returned from the\r\nquery. Populates cache (if enabled).", "guessedname": "doQuery", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the DataSource instance"}, "description": "Public accessor to the unique name of the DataSource instance.", "guessedname": "toString", "guessedtype": "function"}, "_doQueryCache": {"return": {"type": "Object[]", "description": "aResults  Array of results from local cache if found, otherwise null."}, "description": "Queries the local cache for results. If query has been cached, the callback\r\nfunction is called with the results, and the cached is refreshed so that it\r\nis now the newest element.", "private": "", "params": [{"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function defined by oParent object to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "guessedname": "_doQueryCache", "guessedtype": "function"}, "_addCacheElem": {"guessedname": "_addCacheElem", "params": [{"type": "Object", "name": "oResult", "description": "  Data result object, including array of results."}], "description": "Adds a result object to the local cache, evicting the oldest element if the \r\ncache is full. Newer items will have higher indexes, the oldest item will have\r\nindex of 0.", "private": "", "guessedtype": "function"}}, "file": "DataSource.js", "guessedtype": "function", "shortname": "DataSource", "properties": {"_nIndex": {"description": "Internal class variable to index multiple DataSource instances.", "private": "", "static": "", "guessedname": "_nIndex", "guessedtype": "property", "type": "Number"}, "maxCacheEntries": {"default": "15", "type": "Number", "description": "Max size of the local cache.  Set to 0 to turn off caching.  Caching is\r\nuseful to reduce the number of server connections.  Recommended only for data\r\nsources that return comprehensive results for queries or when stale data is\r\nnot an issue.", "guessedname": "maxCacheEntries", "guessedtype": "property"}, "queryMatchSubset": {"default": "false", "type": "Boolean", "description": "Enables query subset matching. If caching is on and queryMatchSubset is\r\ntrue, substrings of queries will return matching cached results. For\r\ninstance, if the first query is for \"abc\" susequent queries that start with\r\n\"abc\", like \"abcd\", will be queried against the cache, and not the live data\r\nsource. Recommended only for DataSources that return comprehensive results\r\nfor queries with very few characters.", "guessedname": "queryMatchSubset", "guessedtype": "property"}, "_aCache": {"guessedname": "_aCache", "type": "Object[]", "description": "Local cache of data result objects indexed chronologically.", "private": "", "guessedtype": "property"}, "ERROR_DATANULL": {"description": "Error message for null data responses.", "static": "", "guessedname": "ERROR_DATANULL", "guessedtype": "property", "type": "String", "final": ""}, "queryMatchCase": {"default": "false", "type": "Boolean", "description": "Enables query case-sensitivity matching. If caching is on and\r\nqueryMatchCase is true, queries will only return results for case-sensitive\r\nmatches.", "guessedname": "queryMatchCase", "guessedtype": "property"}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Name of DataSource instance.", "private": "", "guessedtype": "property"}, "queryMatchContains": {"default": "false", "type": "Boolean", "description": "Use this to equate cache matching with the type of matching done by your live\r\ndata source. If caching is on and queryMatchContains is true, the cache\r\nreturns results that \"contain\" the query string. By default,\r\nqueryMatchContains is set to false, meaning the cache only returns results\r\nthat \"start with\" the query string.", "guessedname": "queryMatchContains", "guessedtype": "property"}, "ERROR_DATAPARSE": {"description": "Error message for data responses with parsing errors.", "static": "", "guessedname": "ERROR_DATAPARSE", "guessedtype": "property", "type": "String", "final": ""}}, "description": "The DataSource classes manages sending a request and returning response from a live\r\ndatabase. Supported data include local JavaScript arrays and objects and databases\r\naccessible via XHR connections. Supported response formats include JavaScript arrays,\r\nJSON, XML, and flat-file textual data."}, "YAHOO.util.DragDropMgr.ElementWrapper": {"name": "YAHOO.util.DragDropMgr.ElementWrapper", "for": "DragDropMgr", "innerClasses": ["YAHOO.util.DragDropMgr"], "deprecated": "", "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "ElementWrapper", "private": "", "file": "DragDropMgr.js", "guessedtype": "function", "shortname": "DragDropMgr.ElementWrapper", "properties": {"el": {"description": "The element", "guessedname": "el", "guessedtype": "property"}, "id": {"description": "The element id", "guessedname": "id", "guessedtype": "property"}, "css": {"description": "A reference to the style property", "guessedname": "css", "guessedtype": "property"}}, "description": "Inner class for cached elements"}, "YAHOO.widget.TreeView": {"methods": {"animateExpand": {"return": {"type": "boolean", "description": "true if animation could be invoked, false otherwise"}, "params": [{"type": "HTMLElement", "name": "el", "description": "  the element to animate"}, {"type": "YAHOO.util.Node", "name": "node", "description": "  the node that was expanded"}], "description": "Perform the expand animation if configured, or just show the\nelement if not configured or too many animations are in progress", "guessedname": "animateExpand", "guessedtype": "function"}, "setDynamicLoad": {"params": [{"type": "function", "name": "fnDataLoader", "description": " the function that will be called to get the data"}, {"type": "int", "name": "iconMode", "description": "  configures the icon that is displayed when a dynamic\nload node is expanded the first time without children.  By default, the \n\"collapse\" icon will be used.  If set to 1, the leaf node icon will be\ndisplayed."}], "description": "Configures this tree to dynamically load all child data", "guessedname": "setDynamicLoad", "guessedtype": "function"}, "getNodeByIndex": {"return": {"type": "Node", "description": "the node with index=nodeIndex, null if no match"}, "params": [{"type": "int", "name": "nodeIndex", "description": " the index of the node wanted"}], "description": "Returns a node in the tree that has the specified index (this index\nis created internally, so this function probably will only be used\nin html generated for a given node.)", "guessedname": "getNodeByIndex", "guessedtype": "function"}, "YAHOO.widget.TreeView.addHandler": {"static": "", "params": [{"type": "", "name": "el", "description": " the elment to bind the handler to"}, {"type": "string", "name": "sType", "description": " the type of event handler"}, {"type": "function", "name": "fn", "description": " the callback to invoke"}], "description": "Add a DOM event", "guessedname": "addHandler", "guessedtype": "function"}, "collapseComplete": {"description": "Function executed when the collapse animation completes", "guessedname": "collapseComplete", "guessedtype": "function"}, "regNode": {"guessedname": "regNode", "params": [{"type": "Node", "name": "node", "description": "  the node to register"}], "description": "Nodes register themselves with the tree instance when they are created.", "private": "", "guessedtype": "function"}, "onExpand": {"deprecated": "use treeobj.subscribe(\"expand\") instead", "params": [{"type": "Node", "name": "node", "description": "  the node that was expanded"}], "description": "Abstract method that is executed when a node is expanded", "guessedname": "onExpand", "guessedtype": "function"}, "YAHOO.widget.TreeView.removeHandler": {"static": "", "params": [{"type": "", "name": "el", "description": " the elment to bind the handler to"}, {"type": "string", "name": "sType", "description": " the type of event handler"}, {"type": "function", "name": "fn", "description": " the callback to invoke"}], "description": "Remove a DOM event", "guessedname": "removeHandler", "guessedtype": "function"}, "YAHOO.widget.TreeView.preload": {"static": "", "params": [{"type": "string", "name": "prefix", "description": " the prefix to use to generate the names of the\nimages to preload, default is ygtv"}], "description": "Attempts to preload the images defined in the styles used to draw the tree by\nrendering off-screen elements that use the styles.", "guessedname": "preload", "guessedtype": "function"}, "setExpandAnim": {"params": [{"type": "string", "name": "type", "description": " the type of animation (acceptable values defined \nin YAHOO.widget.TVAnim)"}], "description": "Sets up the animation for expanding children", "guessedname": "setExpandAnim", "guessedtype": "function"}, "YAHOO.widget.TreeView.getTree": {"return": {"type": "TreeView", "description": "the tree instance requested, null if not found."}, "description": "Global method for getting a tree by its id.  Used in the generated\ntree html.", "static": "", "guessedname": "getTree", "guessedtype": "function", "params": [{"type": "String", "name": "treeId", "description": "  the id of the tree instance"}]}, "removeNode": {"return": {"type": "boolean", "description": "False is there was a problem, true otherwise."}, "params": [{"type": "Node", "name": "The", "description": " node to remove"}, {"type": "boolean", "name": "autoRefresh", "description": " automatically refreshes branch if true"}], "description": "Removes the node and its children, and optionally refreshes the \nbranch of the tree that was affected.", "guessedname": "removeNode", "guessedtype": "function"}, "popNode": {"params": [{"type": "Node", "name": "the", "description": " node to remove"}], "description": "Removes the node from the tree, preserving the child collection \nto make it possible to insert the branch into another part of the \ntree, or another tree.", "guessedname": "popNode", "guessedtype": "function"}, "onCollapse": {"deprecated": "use treeobj.subscribe(\"collapse\") instead", "params": [{"type": "Node", "name": "node", "description": "  the node that was collapsed."}], "description": "Abstract method that is executed when a node is collapsed.", "guessedname": "onCollapse", "guessedtype": "function"}, "init": {"guessedname": "init", "parm": "{string|HTMLElement} id the id of the element that will hold the tree", "description": "Initializes the tree", "private": "", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": "the host element"}, "description": "Returns the tree's host element", "guessedname": "getEl", "guessedtype": "function"}, "removeChildren": {"params": [{"type": "Node", "name": "node", "description": " the node to purge"}], "description": "Deletes this nodes child collection, recursively.  Also collapses\nthe node, and resets the dynamic load flag.  The primary use for\nthis method is to purge a node and allow it to fetch its data\ndynamically again.", "guessedname": "removeChildren", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the tree"}, "description": "TreeView instance toString", "guessedname": "toString", "guessedtype": "function"}, "animateCollapse": {"return": {"type": "boolean", "description": "true if animation could be invoked, false otherwise"}, "params": [{"type": "HTMLElement", "name": "el", "description": "  the element to animate"}, {"type": "YAHOO.util.Node", "name": "node", "description": "  the node that was expanded"}], "description": "Perform the collapse animation if configured, or just show the\nelement if not configured or too many animations are in progress", "guessedname": "animateCollapse", "guessedtype": "function"}, "expandAll": {"description": "Expands all child nodes.  Note: this conflicts with the \"multiExpand\"\nnode property.  If expand all is called in a tree with nodes that\ndo not allow multiple siblings to be displayed, only the last sibling\nwill be expanded.", "guessedname": "expandAll", "guessedtype": "function"}, "draw": {"description": "Renders the tree boilerplate and visible nodes", "guessedname": "draw", "guessedtype": "function"}, "YAHOO.widget.TreeView.getNode": {"return": {"type": "Node", "description": "the node instance requested, null if not found"}, "description": "Global method for getting a node by its id.  Used in the generated\ntree html.", "static": "", "guessedname": "getNode", "guessedtype": "function", "params": [{"type": "String", "name": "treeId", "description": "  the id of the tree instance"}, {"type": "String", "name": "nodeIndex", "description": "  the index of the node to return"}]}, "getNodeByProperty": {"return": {"type": "Node", "description": "the matching node, null if no match"}, "params": [{"type": "object", "name": "property", "description": " the property to search (usually a string)"}, {"type": "object", "name": "value", "description": " the value we want to find (usuall an int or string)"}], "description": "Returns a node that has a matching property and value in the data\nobject that was passed into its constructor.", "guessedname": "getNodeByProperty", "guessedtype": "function"}, "getNodesByProperty": {"return": {"type": "Array", "description": "the matching collection of nodes, null if no match"}, "params": [{"type": "object", "name": "property", "description": " the property to search (usually a string)"}, {"type": "object", "name": "value", "description": " the value we want to find (usuall an int or string)"}], "description": "Returns a collection of nodes that have a matching property \nand value in the data object that was passed into its constructor.", "guessedname": "getNodesByProperty", "guessedtype": "function"}, "_deleteNode": {"private": "", "description": "Deletes the node and recurses children", "guessedname": "_deleteNode", "guessedtype": "function"}, "getRoot": {"return": {"type": "Node", "description": "the root node"}, "description": "Returns the root node of this tree", "guessedname": "getRoot", "guessedtype": "function"}, "setUpLabel": {"params": [{"type": "", "name": "oData", "description": " string containing the label, or an object with a label property"}], "description": "Sets up the node label", "guessedname": "setUpLabel", "guessedtype": "function"}, "setCollapseAnim": {"params": [{"type": "string", "name": "the", "description": " type of animation (acceptable values defined in \nYAHOO.widget.TVAnim)"}], "description": "Sets up the animation for collapsing children", "guessedname": "setCollapseAnim", "guessedtype": "function"}, "generateId": {"private": "", "description": "Generates an unique id for an element if it doesn't yet have one", "guessedname": "generateId", "guessedtype": "function"}, "expandComplete": {"description": "Function executed when the expand animation completes", "guessedname": "expandComplete", "guessedtype": "function"}, "collapseAll": {"description": "Collapses all expanded child nodes in the entire tree.", "guessedname": "collapseAll", "guessedtype": "function"}}, "description": "Contains the tree view state data and the root node.", "constructors": [{"params": [{"type": "string|HTMLElement", "name": "id", "description": " The id of the element, or the element\nitself that the tree will be inserted into."}], "description": "Contains the tree view state data and the root node."}], "namespace": "YAHOO.widget", "module": "treeview", "properties": {"YAHOO.widget.TreeView.nodeCount": {"type": "int", "static": "", "description": "Count of all nodes in all trees", "guessedname": "nodeCount", "guessedtype": "property"}, "locked": {"type": "boolean", "description": "We lock the tree control while waiting for the dynamic loader to return", "guessedname": "locked", "guessedtype": "property"}, "_expandAnim": {"guessedname": "_expandAnim", "type": "string", "description": "The animation to use for expanding children, if any", "private": "", "guessedtype": "property"}, "_collapseAnim": {"guessedname": "_collapseAnim", "type": "string", "description": "The animation to use for collapsing children, if any", "private": "", "guessedtype": "property"}, "_el": {"private": "", "description": "The host element for this tree", "guessedname": "_el", "guessedtype": "property"}, "YAHOO.widget.TreeView.counter": {"guessedname": "counter", "static": "", "description": "Counter for generating a new unique element id", "private": "", "guessedtype": "property"}, "YAHOO.widget.TreeView.trees": {"description": "Global cache of tree instances", "private": "", "static": "", "guessedname": "trees", "guessedtype": "property", "type": "Array"}, "_nodes": {"guessedname": "_nodes", "type": "Node[]", "description": "Flat collection of all nodes in this tree", "private": "", "guessedtype": "property"}, "_animCount": {"guessedname": "_animCount", "type": "int", "description": "The current number of animations that are executing", "private": "", "guessedtype": "property"}, "maxAnim": {"type": "int", "description": "The maximum number of animations to run at one time.", "guessedname": "maxAnim", "guessedtype": "property"}, "id": {"type": "String", "description": "The id of tree container element", "guessedname": "id", "guessedtype": "property"}}, "guessedname": "TreeView", "file": "TreeView.js", "guessedtype": "function", "shortname": "TreeView", "events": {"labelClick": {"params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node clicked"}], "description": "Custom event that is fired when the text node label is clicked.  The\ncustom event is defined on the tree instance, so there is a single\nevent that handles all nodes in the tree.  The node clicked is \nprovided as an argument"}, "animComplete": {"type": "CustomEvent", "parm": "{String} type the type of animation (\"expand\" or \"collapse\")", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that is expanding\/collapsing"}], "description": "When animation is enabled, this event fires when the animation\ncompletes"}, "animStart": {"type": "CustomEvent", "parm": "{String} type the type of animation (\"expand\" or \"collapse\")", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that is expanding\/collapsing"}], "description": "When animation is enabled, this event fires when the animation\nstarts"}, "collapse": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that is expanding\/collapsing"}], "description": "Fires when a node is going to be expanded.  Return false to stop\nthe expand."}, "expand": {"type": "CustomEvent", "params": [{"type": "YAHOO.widget.Node", "name": "node", "description": " the node that is expanding\/collapsing"}], "description": "Fires when a node is going to be collapsed.  Return false to stop\nthe collapse."}}, "name": "YAHOO.widget.TreeView"}, "YAHOO.widget.Calendar": {"name": "YAHOO.widget.Calendar", "configs": {"SHOW_WEEKDAYS": {"default": "true", "type": "Boolean", "description": "True if the Calendar should show weekday labels. True by default.", "guessedname": "value", "guessedtype": "property"}, "MDY_DAY_POSITION": {"default": "2", "type": "Number", "description": "The position of the day in a month\/day\/year date string", "guessedname": "value", "guessedtype": "property"}, "MY_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month\/year date string", "guessedname": "value", "guessedtype": "property"}, "MONTHS_SHORT": {"default": "[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]", "type": "String[]", "description": "The short month labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MULTI_SELECT": {"default": "false", "type": "Boolean", "description": "True if the Calendar should allow multiple selections. False by default.", "guessedname": "value", "guessedtype": "property"}, "DATE_FIELD_DELIMITER": {"default": "\"\/\"", "type": "String", "description": "The value used to delimit date fields in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "MY_YEAR_POSITION": {"default": "2", "type": "Number", "description": "The position of the year in a month\/year date string", "guessedname": "value", "guessedtype": "property"}, "close": {"default": "false", "type": "Boolean", "description": "Whether or not a close button should be displayed for this Calendar", "guessedname": "value", "guessedtype": "property"}, "MONTHS_LONG": {"default": "[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"", "type": "String[]", "description": "The long month labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_MEDIUM": {"default": "[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]", "type": "String[]", "description": "The medium weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "DATE_RANGE_DELIMITER": {"default": "\"-\"", "type": "String", "description": "The value used to delimit date ranges in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEK_HEADER": {"default": "false", "type": "Boolean", "description": "True if the Calendar should show week row headers. False by default.", "guessedname": "value", "guessedtype": "property"}, "title": {"default": "\"\"", "type": "String", "description": "The title to display above the Calendar's month header", "guessedname": "value", "guessedtype": "property"}, "maxdate": {"default": "null", "type": "String", "description": "The maximum selectable date in the current Calendar (mm\/dd\/yyyy)", "guessedname": "value", "guessedtype": "property"}, "selected": {"default": "[]", "type": "String", "description": "The date or range of dates representing the current Calendar selection", "guessedname": "value", "guessedtype": "property"}, "LOCALE_WEEKDAYS": {"default": "\"short\"", "type": "String", "description": "The setting that determines which length of weekday labels should be used. Possible values are \"1char\", \"short\", \"medium\", and \"long\".", "guessedname": "value", "guessedtype": "property"}, "NAV_ARROW_RIGHT": {"default": "YAHOO.widget.Calendar.IMG_ROOT + \"us\/tr\/calrt.gif\"", "type": "String", "description": "The image that should be used for the left navigation arrow.", "guessedname": "value", "guessedtype": "property"}, "HIDE_BLANK_WEEKS": {"default": "false", "type": "Boolean", "description": "True if the Calendar should suppress weeks that are not a part of the current month. False by default.", "guessedname": "value", "guessedtype": "property"}, "mindate": {"default": "null", "type": "String", "description": "The minimum selectable date in the current Calendar (mm\/dd\/yyyy)", "guessedname": "value", "guessedtype": "property"}, "START_WEEKDAY": {"default": "0", "type": "number", "description": "The weekday the week begins on. Default is 0 (Sunday).", "guessedname": "value", "guessedtype": "property"}, "SHOW_WEEK_FOOTER": {"default": "false", "type": "Boolean", "description": "True if the Calendar should show week row footers. False by default.", "guessedname": "value", "guessedtype": "property"}, "MDY_YEAR_POSITION": {"default": "3", "type": "Number", "description": "The position of the year in a month\/day\/year date string", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_LONG": {"default": "[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]", "type": "String[]", "description": "The long weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "MDY_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month\/day\/year date string", "guessedname": "value", "guessedtype": "property"}, "pagedate": {"default": "today's date", "type": "String", "description": "The month\/year representing the current visible Calendar date (mm\/yyyy)", "guessedname": "value", "guessedtype": "property"}, "MD_DAY_POSITION": {"default": "2", "type": "Number", "description": "The position of the day in a month\/year date string", "guessedname": "value", "guessedtype": "property"}, "NAV_ARROW_LEFT": {"default": "YAHOO.widget.Calendar.IMG_ROOT + \"us\/tr\/callt.gif\"", "type": "String", "description": "The image that should be used for the left navigation arrow.", "guessedname": "value", "guessedtype": "property"}, "MD_MONTH_POSITION": {"default": "1", "type": "Number", "description": "The position of the month in a month\/day date string", "guessedname": "value", "guessedtype": "property"}, "DATE_DELIMITER": {"default": "\",\"", "type": "String", "description": "The value used to delimit individual dates in a date string passed to various Calendar functions.", "guessedname": "value", "guessedtype": "property"}, "LOCALE_MONTHS": {"default": "\"long\"", "type": "String", "description": "The setting that determines which length of month labels should be used. Possible values are \"short\" and \"long\".", "guessedname": "value", "guessedtype": "property"}, "iframe": {"default": "true", "type": "Boolean", "description": "Whether or not an iframe shim should be placed under the Calendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_1CHAR": {"default": "[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]", "type": "String[]", "description": "The 1-character weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}, "WEEKDAYS_SHORT": {"default": "[\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]", "type": "String[]", "description": "The short weekday labels for the current locale.", "guessedname": "value", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "id", "description": "\t\t\tThe id of the table element that will represent the calendar widget"}, {"type": "String", "name": "containerId", "description": "\tThe id of the container div element that will wrap the calendar table"}, {"type": "Object", "name": "config", "description": "\t\tThe configuration object containing the Calendar's arguments"}], "description": "Calendar is the base class for the Calendar widget. In its most basic\nimplementation, it has the ability to render a calendar widget on the page\nthat can be manipulated to select a single date, move back and forth between\nmonths and years.\n<p>To construct the placeholder for the calendar widget, the code is as\nfollows:\n<xmp>\n<div id=\"cal1Container\"><\/div>\n<\/xmp>\nNote that the table can be replaced with any kind of element.\n<\/p>"}], "namespace": "YAHOO.widget", "module": "calendar", "events": {"beforeDeselectEvent": {"description": "Fired before a selection is made", "guessedname": "beforeDeselectEvent", "guessedtype": "property"}, "beforeRenderEvent": {"description": "Fired before the Calendar is rendered", "guessedname": "beforeRenderEvent", "guessedtype": "property"}, "beforeSelectEvent": {"description": "Fired before a selection is made", "guessedname": "beforeSelectEvent", "guessedtype": "property"}, "renderEvent": {"description": "Fired when the Calendar is rendered", "guessedname": "renderEvent", "guessedtype": "property"}, "changePageEvent": {"description": "Fired when the Calendar page is changed", "guessedname": "changePageEvent", "guessedtype": "property"}, "resetEvent": {"description": "Fired when the Calendar is reset", "guessedname": "resetEvent", "guessedtype": "property"}, "clearEvent": {"description": "Fired when the Calendar is cleared", "guessedname": "clearEvent", "guessedtype": "property"}, "selectEvent": {"params": [{"type": "Array", "name": "Array", "description": " of Date field arrays in the format [YYYY, MM, DD]."}], "description": "Fired when a selection is made", "guessedname": "selectEvent", "guessedtype": "property"}, "deselectEvent": {"params": [{"type": "Array", "name": "Array", "description": " of Date field arrays in the format [YYYY, MM, DD]."}], "description": "Fired when a selection is made", "guessedname": "deselectEvent", "guessedtype": "property"}}, "guessedname": "Calendar", "methods": {"onDeselect": {"deprecated": "Event handlers for this event should be susbcribed to deselectEvent.", "params": [{"type": "Array", "name": "selected", "description": "\tAn array of date field arrays representing which date or dates were deselected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]"}], "description": "Event executed when a date is deselected in the calendar widget.", "guessedname": "onDeselect", "guessedtype": "function"}, "deselectCell": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "Number", "name": "cellIndex", "description": "\tThe index of the cell to deselect in the current calendar."}], "description": "Deselects a date on the current calendar by referencing the index of the cell that should be deselected.\nThis method is used to easily deselect a single cell (usually with a mouse click) without having to do\na full render. The selected style is removed from the cell directly.", "guessedname": "deselectCell", "guessedtype": "function"}, "previousMonth": {"description": "Navigates to the previous month page in the calendar widget.", "guessedname": "previousMonth", "guessedtype": "function"}, "addWeekdayRenderer": {"params": [{"type": "Number", "name": "weekday", "description": "\t\tThe weekday (0-6) to associate with this renderer"}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "Adds a weekday to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the weekday passed to this method.", "guessedname": "addWeekdayRenderer", "guessedtype": "function"}, "configClose": {"description": "Default handler for the \"close\" property", "guessedname": "configClose", "guessedtype": "function"}, "render": {"description": "Renders the calendar after it has been configured. The render() method has a specific call chain that will execute\nwhen the method is called: renderHeader, renderBody, renderFooter.\nRefer to the documentation for those methods for information on \nindividual render tasks.", "guessedname": "render", "guessedtype": "function"}, "renderCellStyleSelected": {"return": {"type": "String", "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"}, "params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Applies the default style used for rendering selected dates to the current calendar cell", "guessedname": "renderCellStyleSelected", "guessedtype": "function"}, "nextYear": {"description": "Navigates to the next year in the currently selected month in the calendar widget.", "guessedname": "nextYear", "guessedtype": "function"}, "configLocale": {"description": "The default handler for all configuration locale properties", "guessedname": "configLocale", "guessedtype": "function"}, "_toFieldArray": {"return": {"type": "Array[](Number[])", "description": "Array of date field arrays"}, "description": "Converts a date (either a JavaScript Date object, or a date string) to the internal data structure\nused to represent dates: [[yyyy,mm,dd],[yyyy,mm,dd]].", "private": "", "params": [{"type": "String\/Date\/Date[]", "name": "date", "description": "\tThe date string of dates to deselect in the current calendar. Valid formats are\nindividual date(s) (12\/24\/2005,12\/26\/2005) or date range(s) (12\/24\/2005-1\/1\/2006).\nMultiple comma-delimited dates can also be passed to this method (12\/24\/2005,12\/11\/2005-12\/13\/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "guessedname": "_toFieldArray", "guessedtype": "function"}, "initStyles": {"description": "Defines the style constants for the Calendar", "guessedname": "initStyles", "guessedtype": "function"}, "addMonths": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of months to add to the current calendar"}], "description": "Adds the designated number of months to the current calendar month, and sets the current\ncalendar page date to the new month.", "guessedname": "addMonths", "guessedtype": "function"}, "subtractYears": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of years to subtract from the current calendar"}], "description": "Subtcats the designated number of years from the current calendar, and sets the current\ncalendar page date to the new month.", "guessedname": "subtractYears", "guessedtype": "function"}, "clear": {"description": "Clears the selected dates in the current calendar widget and sets the calendar\nto the current month and year.", "guessedname": "clear", "guessedtype": "function"}, "buildMonthLabel": {"return": {"type": "String", "description": "The formatted calendar month label"}, "description": "Builds the date label that will be displayed in the calendar header or\nfooter, depending on configuration.", "guessedname": "buildMonthLabel", "guessedtype": "function"}, "addMonthRenderer": {"params": [{"type": "Number", "name": "month", "description": "\t\tThe month (1-12) to associate with this renderer"}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "Adds a month to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the month passed to this method.", "guessedname": "addMonthRenderer", "guessedtype": "function"}, "buildWeekdays": {"return": {"type": "Array", "description": "The current working HTML array"}, "params": [{"type": "Array", "name": "html", "description": "\tThe current working HTML array"}], "description": "Renders the Calendar's weekday headers.", "guessedname": "buildWeekdays", "guessedtype": "function"}, "clearElement": {"params": [{"type": "HTMLTableCellElement", "name": "The", "description": " cell to clear"}], "description": "Clears the inner HTML, CSS class and style information from the specified cell.", "guessedname": "clearElement", "guessedtype": "function"}, "renderCellDefault": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders a single standard calendar cell in the calendar widget table.\nAll logic for determining how a standard default cell will be rendered is \nencapsulated in this method, and must be accounted for when extending the\nwidget class.", "guessedname": "renderCellDefault", "guessedtype": "function"}, "_toDate": {"return": {"type": "Date", "description": "JavaScript Date object representing the date field array"}, "description": "Converts a date field array [yyyy,mm,dd] to a JavaScript Date object.", "private": "", "params": [{"type": "Number[]", "name": "dateFieldArray", "description": "\tThe date field array to convert to a JavaScript Date."}], "guessedname": "_toDate", "guessedtype": "function"}, "getSelectedDates": {"return": {"type": "Date[]", "description": "An array of currently selected JavaScript Date objects."}, "description": "Gets the list of currently selected dates from the calendar.", "guessedname": "getSelectedDates", "guessedtype": "function"}, "buildDayLabel": {"return": {"type": "String", "description": "The formatted day label"}, "params": [{"type": "Date", "name": "workingDate", "description": "\tThe current working date"}], "description": "Builds the date digit that will be displayed in calendar cells", "guessedname": "buildDayLabel", "guessedtype": "function"}, "select": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "String\/Date\/Date[]", "name": "date", "description": "\tThe date string of dates to select in the current calendar. Valid formats are\nindividual date(s) (12\/24\/2005,12\/26\/2005) or date range(s) (12\/24\/2005-1\/1\/2006).\nMultiple comma-delimited dates can also be passed to this method (12\/24\/2005,12\/11\/2005-12\/13\/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "description": "Selects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once selection has completed, render must be \ncalled for the changes to be reflected visually.", "guessedname": "select", "guessedtype": "function"}, "renderOutOfBoundsDate": {"return": {"type": "String", "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"}, "params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders a cell that falls before the minimum date or after the maximum date.\nwidget class.", "guessedname": "renderOutOfBoundsDate", "guessedtype": "function"}, "refreshLocale": {"private": "", "description": "Refreshes the locale values used to build the Calendar.", "guessedname": "refreshLocale", "guessedtype": "function"}, "_indexOfSelectedFieldArray": {"return": {"type": "Number", "description": "The index of the date field array within the collection of selected dates.\n-1 will be returned if the date is not found."}, "description": "Gets the index of a date field array [yyyy,mm,dd] in the current list of selected dates.", "private": "", "params": [{"type": "Number[]", "name": "find", "description": "\tThe date field array to search for"}], "guessedname": "_indexOfSelectedFieldArray", "guessedtype": "function"}, "onClear": {"deprecated": "Event handlers for this event should be susbcribed to clearEvent.", "description": "Event executed when the calendar widget is completely cleared to the current month with no selections.", "guessedname": "onClear", "guessedtype": "function"}, "initEvents": {"description": "Initializes Calendar's built-in CustomEvents", "guessedname": "initEvents", "guessedtype": "function"}, "previousYear": {"description": "Navigates to the previous year in the currently selected month in the calendar widget.", "guessedname": "previousYear", "guessedtype": "function"}, "nextMonth": {"description": "Navigates to the next month page in the calendar widget.", "guessedname": "nextMonth", "guessedtype": "function"}, "onReset": {"deprecated": "Event handlers for this event should be susbcribed to resetEvemt.", "description": "Event executed when the calendar widget is reset to its original state.", "guessedname": "onReset", "guessedtype": "function"}, "configPageDate": {"description": "The default handler for the \"pagedate\" property", "guessedname": "configPageDate", "guessedtype": "function"}, "renderBody": {"return": {"type": "Array", "description": "The current working HTML array"}, "params": [{"type": "Date", "name": "workingDate", "description": "\tThe current working Date being used for the render process"}, {"type": "Array", "name": "html", "description": "\tThe current working HTML array"}], "description": "Renders the calendar body.", "guessedname": "renderBody", "guessedtype": "function"}, "configOptions": {"description": "The default handler for all configuration options properties", "guessedname": "configOptions", "guessedtype": "function"}, "clearAllBodyCellStyles": {"params": [{"type": "style", "name": "The", "description": " CSS class name to remove from all calendar body cells"}], "description": "Removes all styles from all body cells in the current calendar table.", "guessedname": "clearAllBodyCellStyles", "guessedtype": "function"}, "_parseRange": {"return": {"type": "", "description": "An array of date field arrays"}, "description": "Converts a date range to the full list of included dates", "private": "", "params": [{"type": "Number[]", "name": "startDate", "description": "\tDate field array representing the first date in the range"}, {"type": "Number[]", "name": "endDate", "description": "\t\tDate field array representing the last date in the range"}], "guessedname": "_parseRange", "guessedtype": "function", "type": "Array[](Number[])"}, "init": {"params": [{"type": "String", "name": "id", "description": "\t\t\tThe id of the table element that will represent the calendar widget"}, {"type": "String", "name": "containerId", "description": "\tThe id of the container div element that will wrap the calendar table"}, {"type": "Object", "name": "config", "description": "\t\tThe configuration object containing the Calendar's arguments"}], "description": "Initializes the Calendar widget.", "guessedname": "init", "guessedtype": "function"}, "onBeforeDeselect": {"deprecated": "Event handlers for this event should be susbcribed to beforeDeselectEvent.", "description": "Event executed before a date is deselected in the calendar widget.", "guessedname": "onBeforeDeselect", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "A string representation of the Calendar object."}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "resetRenderers": {"description": "Resets the render stack of the current calendar to its original pre-render value.", "guessedname": "resetRenderers", "guessedtype": "function"}, "isDateOOM": {"return": {"type": "Boolean", "description": "true if the date is OOM"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date object for which to check the OOM status"}], "description": "Determines whether a given date is OOM (out of month).", "guessedname": "isDateOOM", "guessedtype": "function"}, "show": {"description": "Shows the Calendar's outer container.", "guessedname": "show", "guessedtype": "function"}, "getDateFieldsByCellId": {"return": {"type": "Array", "description": "The array of Date fields for the specified Calendar cell"}, "params": [{"type": "String", "name": "id", "description": "\tThe id of the cell"}], "description": "Retrieves the Date object for the specified Calendar cell", "guessedname": "getDateFieldsByCellId", "guessedtype": "function"}, "addRenderer": {"params": [{"type": "String", "name": "sDates", "description": "\t\tA date string to associate with the specified renderer. Valid formats\ninclude date (12\/24\/2005), month\/day (12\/24), and range (12\/1\/2004-1\/1\/2005)"}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "Adds a renderer to the render stack. The function reference passed to this method will be executed\nwhen a date cell matches the conditions specified in the date string for this renderer.", "guessedname": "addRenderer", "guessedtype": "function"}, "renderCellNotThisMonth": {"return": {"type": "String", "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"}, "params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Applies the default style used for rendering dates that are not a part of the current\nmonth (preceding or trailing the cells for the current month)", "guessedname": "renderCellNotThisMonth", "guessedtype": "function"}, "doSelectCell": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe event"}, {"type": "Calendar", "name": "cal", "description": "\tA reference to the calendar passed by the Event utility"}], "description": "The default event function that is attached to a date link within a calendar cell\nwhen the calendar is rendered.", "guessedname": "doSelectCell", "guessedtype": "function"}, "configLocaleValues": {"description": "The default handler for all configuration locale field length properties", "guessedname": "configLocaleValues", "guessedtype": "function"}, "onBeforeSelect": {"deprecated": "Event handlers for this event should be susbcribed to beforeSelectEvent.", "description": "Event executed before a date is selected in the calendar widget.", "guessedname": "onBeforeSelect", "guessedtype": "function"}, "configTitle": {"description": "Default handler for the \"title\" property", "guessedname": "configTitle", "guessedtype": "function"}, "renderRowHeader": {"params": [{"type": "Number", "name": "weekNum", "description": "\tThe week number of the current row"}, {"type": "Array", "name": "cell", "description": "\tThe current working HTML array"}], "description": "Renders the row header for a week.", "guessedname": "renderRowHeader", "guessedtype": "function"}, "selectCell": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "Number", "name": "cellIndex", "description": "\tThe index of the cell to select in the current calendar."}], "description": "Selects a date on the current calendar by referencing the index of the cell that should be selected.\nThis method is used to easily select a single cell (usually with a mouse click) without having to do\na full render. The selected style is applied to the cell directly.", "guessedname": "selectCell", "guessedtype": "function"}, "deselect": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected."}, "params": [{"type": "String\/Date\/Date[]", "name": "date", "description": "\tThe date string of dates to deselect in the current calendar. Valid formats are\nindividual date(s) (12\/24\/2005,12\/26\/2005) or date range(s) (12\/24\/2005-1\/1\/2006).\nMultiple comma-delimited dates can also be passed to this method (12\/24\/2005,12\/11\/2005-12\/13\/2005).\nThis method can also take a JavaScript Date object or an array of Date objects."}], "description": "Deselects a date or a collection of dates on the current calendar. This method, by default,\ndoes not call the render method explicitly. Once deselection has completed, render must be \ncalled for the changes to be reflected visually.", "guessedname": "deselect", "guessedtype": "function"}, "_parseDates": {"return": {"type": "", "description": "An array of date field arrays"}, "description": "Converts a multi or single-date string to an array of date field arrays", "private": "", "params": [{"type": "String", "name": "sDates", "description": "\t\tDate string with one or more comma-delimited dates. Valid formats are mm\/dd, mm\/dd\/yyyy, mm\/dd\/yyyy-mm\/dd\/yyyy"}], "guessedname": "_parseDates", "guessedtype": "function", "type": "Array[](Number[])"}, "applyListeners": {"description": "Applies the Calendar's DOM listeners to applicable elements.", "guessedname": "applyListeners", "guessedtype": "function"}, "validate": {"type": "Boolean", "return": {"type": "", "description": "Should return true if the widget validates, and false if\nit doesn't."}, "description": "Validates the calendar widget. This method has no default implementation\nand must be extended by subclassing the widget.", "guessedname": "validate", "guessedtype": "function"}, "renderFooter": {"return": {"type": "Array", "description": "The current working HTML array"}, "params": [{"type": "Array", "name": "html", "description": "\tThe current working HTML array"}], "description": "Renders the calendar footer. In the default implementation, there is\nno footer.", "guessedname": "renderFooter", "guessedtype": "function"}, "configMaxDate": {"description": "The default handler for the \"maxdate\" property", "guessedname": "configMaxDate", "guessedtype": "function"}, "configSelected": {"description": "The default handler for the \"selected\" property", "guessedname": "configSelected", "guessedtype": "function"}, "_addRenderer": {"guessedname": "_addRenderer", "params": [{"type": "String", "name": "type", "description": "\t\tThe type string that indicates the type of date renderer being added.\nValues are YAHOO.widget.Calendar.DATE, YAHOO.widget.Calendar.MONTH_DAY, YAHOO.widget.Calendar.WEEKDAY,\nYAHOO.widget.Calendar.RANGE, YAHOO.widget.Calendar.MONTH"}, {"type": "Array", "name": "aDates", "description": "\t\tAn array of dates used to construct the renderer. The format varies based\non the renderer type"}, {"type": "Function", "name": "fnRender", "description": "\tThe function executed to render cells that match the render rules for this renderer."}], "description": "The private method used for adding cell renderers to the local render stack.\nThis method is called by other methods that set the renderer type prior to the method call.", "private": "", "guessedtype": "function"}, "configMinDate": {"description": "The default handler for the \"mindate\" property", "guessedname": "configMinDate", "guessedtype": "function"}, "hide": {"description": "Hides the Calendar's outer container from view.", "guessedname": "hide", "guessedtype": "function"}, "renderRowFooter": {"params": [{"type": "Number", "name": "weekNum", "description": "\tThe week number of the current row"}, {"type": "Array", "name": "cell", "description": "\tThe current working HTML array"}], "description": "Renders the row footer for a week.", "guessedname": "renderRowFooter", "guessedtype": "function"}, "onRender": {"deprecated": "Event handlers for this event should be susbcribed to renderEvent.", "description": "Event executed when the calendar widget is rendered.", "guessedname": "onRender", "guessedtype": "function"}, "onSelect": {"deprecated": "Event handlers for this event should be susbcribed to selectEvent.", "params": [{"type": "Array", "name": "selected", "description": "\tAn array of date field arrays representing which date or dates were selected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]"}], "description": "Event executed when a date is selected in the calendar widget.", "guessedname": "onSelect", "guessedtype": "function"}, "renderCellStyleToday": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Applies the default style used for rendering today's date to the current calendar cell", "guessedname": "renderCellStyleToday", "guessedtype": "function"}, "getDateByCellId": {"return": {"type": "Date", "description": "The Date object for the specified Calendar cell"}, "params": [{"type": "String", "name": "id", "description": "\tThe id of the cell"}], "description": "Retrieves the Date object for the specified Calendar cell", "guessedname": "getDateByCellId", "guessedtype": "function"}, "reset": {"description": "Resets the calendar widget to the originally selected month and year, and \nsets the calendar to the initial selection(s).", "guessedname": "reset", "guessedtype": "function"}, "deselectAll": {"return": {"type": "Date[]", "description": "Array of JavaScript Date objects representing all individual dates that are currently selected.\nAssuming that this function executes properly, the return value should be an empty array.\nHowever, the empty array is returned for the sake of being able to check the selection status\nof the calendar."}, "description": "Deselects all dates on the current calendar.", "guessedname": "deselectAll", "guessedtype": "function"}, "setMonth": {"params": [{"type": "Number", "name": "month", "description": "\t\tThe numeric month, from 0 (January) to 11 (December)"}], "description": "Sets the calendar's month explicitly", "guessedname": "setMonth", "guessedtype": "function"}, "_fieldArraysAreEqual": {"return": {"type": "Boolean", "description": "The boolean that represents the equality of the two arrays"}, "description": "Converts a date field array [yyyy,mm,dd] to a JavaScript Date object.", "private": "", "params": [{"type": "Number[]", "name": "array1", "description": "\tThe first date field array to compare"}, {"type": "Number[]", "name": "array2", "description": "\tThe first date field array to compare"}], "guessedname": "_fieldArraysAreEqual", "guessedtype": "function"}, "styleCellDefault": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Styles a selectable cell.", "guessedname": "styleCellDefault", "guessedtype": "function"}, "renderBodyCellRestricted": {"return": {"type": "String", "description": "YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated"}, "params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders the current calendar cell as a non-selectable \"black-out\" date using the default\nrestricted style.", "guessedname": "renderBodyCellRestricted", "guessedtype": "function"}, "configIframe": {"description": "Renders the built-in IFRAME shim for the IE6 and below", "guessedname": "configIframe", "guessedtype": "function"}, "subtractMonths": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of months to subtract from the current calendar"}], "description": "Subtracts the designated number of months from the current calendar month, and sets the current\ncalendar page date to the new month.", "guessedname": "subtractMonths", "guessedtype": "function"}, "renderCellStyleHighlight2": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders a single standard calendar cell using the CSS hightlight2 style", "guessedname": "renderCellStyleHighlight2", "guessedtype": "function"}, "renderCellStyleHighlight3": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders a single standard calendar cell using the CSS hightlight3 style", "guessedname": "renderCellStyleHighlight3", "guessedtype": "function"}, "onChangePage": {"deprecated": "Event handlers for this event should be susbcribed to changePageEvent.", "description": "Event executed when the user navigates to a different calendar page.", "guessedname": "onChangePage", "guessedtype": "function"}, "renderCellStyleHighlight1": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders a single standard calendar cell using the CSS hightlight1 style", "guessedname": "renderCellStyleHighlight1", "guessedtype": "function"}, "setYear": {"params": [{"type": "Number", "name": "year", "description": "\t\tThe numeric 4-digit year"}], "description": "Sets the calendar's year explicitly.", "guessedname": "setYear", "guessedtype": "function"}, "renderCellStyleHighlight4": {"params": [{"type": "Date", "name": "workingDate", "description": "\t\tThe current working Date object being used to generate the calendar"}, {"type": "HTMLTableCellElement", "name": "cell", "description": "\t\t\tThe current working cell in the calendar"}], "description": "Renders a single standard calendar cell using the CSS hightlight4 style", "guessedname": "renderCellStyleHighlight4", "guessedtype": "function"}, "_parseDate": {"return": {"type": "", "description": "A date field array representing the string passed to the method"}, "description": "Converts a date string to a date field array", "private": "", "params": [{"type": "String", "name": "sDate", "description": "\t\t\tDate string. Valid formats are mm\/dd and mm\/dd\/yyyy."}], "guessedname": "_parseDate", "guessedtype": "function", "type": "Array[](Number[])"}, "doCellMouseOver": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe event"}, {"type": "Calendar", "name": "cal", "description": "\tA reference to the calendar passed by the Event utility"}], "description": "The event that is executed when the user hovers over a cell", "guessedname": "doCellMouseOver", "guessedtype": "function"}, "doCellMouseOut": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe event"}, {"type": "Calendar", "name": "cal", "description": "\tA reference to the calendar passed by the Event utility"}], "description": "The event that is executed when the user moves the mouse out of a cell", "guessedname": "doCellMouseOut", "guessedtype": "function"}, "renderHeader": {"return": {"type": "Array", "description": "The current working HTML array"}, "params": [{"type": "Array", "name": "html", "description": "\tThe current working HTML array"}], "description": "Renders the calendar header.", "guessedname": "renderHeader", "guessedtype": "function"}, "addYears": {"params": [{"type": "Number", "name": "count", "description": "\tThe number of years to add to the current calendar"}], "description": "Adds the designated number of years to the current calendar, and sets the current\ncalendar page date to the new month.", "guessedname": "addYears", "guessedtype": "function"}}, "file": "Calendar.js", "guessedtype": "function", "shortname": "Calendar", "properties": {"Style": {"description": "Collection of Style constants for the Calendar", "guessedname": "Style", "guessedtype": "property"}, "Style.CSS_HEADER_TEXT": {"guessedname": "CSS_HEADER_TEXT", "guessedtype": "property"}, "Style.CSS_CELL_RIGHT": {"guessedname": "CSS_CELL_RIGHT", "guessedtype": "property"}, "YAHOO.widget.Calendar.WEEKDAY": {"description": "Type constant used for renderers to represent a weekday", "static": "", "guessedname": "WEEKDAY", "guessedtype": "property", "type": "String", "final": ""}, "Style.CSS_CELL_BOTTOM": {"guessedname": "CSS_CELL_BOTTOM", "guessedtype": "property"}, "cfg": {"type": "YAHOO.util.Config", "description": "The Config object used to hold the configuration variables for the Calendar", "guessedname": "cfg", "guessedtype": "property"}, "Style.CSS_HEADER": {"guessedname": "CSS_HEADER", "guessedtype": "property"}, "Style.CSS_CELL_HIGHLIGHT4": {"guessedname": "CSS_CELL_HIGHLIGHT4", "guessedtype": "property"}, "Style.CSS_CONTAINER": {"guessedname": "CSS_CONTAINER", "guessedtype": "property"}, "YAHOO.widget.Calendar.MONTH_DAY": {"description": "Type constant used for renderers to represent an individual date across any year (M\/D)", "static": "", "guessedname": "MONTH_DAY", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Calendar.IMG_ROOT": {"type": "String", "static": "", "description": "The path to be used for images loaded for the Calendar", "guessedname": "IMG_ROOT", "guessedtype": "property"}, "Style.CSS_NAV_RIGHT": {"guessedname": "CSS_NAV_RIGHT", "guessedtype": "property"}, "Config": {"description": "The configuration object used to set up the calendars various locale and style options.", "deprecated": "Configuration properties should be set by calling Calendar.cfg.setProperty.", "private": "", "guessedname": "Config", "guessedtype": "property", "type": "Object"}, "id": {"type": "String", "description": "The id that uniquely identifies this calendar. This id should match the id of the placeholder element on the page.", "guessedname": "id", "guessedtype": "property"}, "Style.CSS_CELL_TOP": {"guessedname": "CSS_CELL_TOP", "guessedtype": "property"}, "index": {"type": "Number", "description": "The index of this item in the parent group", "guessedname": "index", "guessedtype": "property"}, "Style.CSS_CELL_LEFT": {"guessedname": "CSS_CELL_LEFT", "guessedtype": "property"}, "YAHOO.widget.Calendar.STOP_RENDER": {"description": "Constant used for halting the execution of the remainder of the render stack", "static": "", "guessedname": "STOP_RENDER", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Calendar.MONTH": {"description": "Type constant used for renderers to represent a month across any year", "static": "", "guessedname": "MONTH", "guessedtype": "property", "type": "String", "final": ""}, "Style.CSS_CELL": {"guessedname": "CSS_CELL", "guessedtype": "property"}, "renderStack": {"type": "Array[]", "description": "The list of render functions, along with required parameters, used to render cells.", "guessedname": "renderStack", "guessedtype": "property"}, "Style.CSS_CELL_HIGHLIGHT3": {"guessedname": "CSS_CELL_HIGHLIGHT3", "guessedtype": "property"}, "Style.CSS_CELL_HIGHLIGHT2": {"guessedname": "CSS_CELL_HIGHLIGHT2", "guessedtype": "property"}, "Style.CSS_CELL_HIGHLIGHT1": {"guessedname": "CSS_CELL_HIGHLIGHT1", "guessedtype": "property"}, "Style.CSS_SINGLE": {"guessedname": "CSS_SINGLE", "guessedtype": "property"}, "_renderStack": {"guessedname": "_renderStack", "type": "Array", "description": "A copy of the initial render functions created before rendering.", "private": "", "guessedtype": "property"}, "today": {"type": "Date", "description": "A Date object representing today's date.", "guessedname": "today", "guessedtype": "property"}, "Style.CSS_WEEKDAY_CELL": {"guessedname": "CSS_WEEKDAY_CELL", "guessedtype": "property"}, "Style.CSS_CALENDAR": {"guessedname": "CSS_CALENDAR", "guessedtype": "property"}, "_selectedDates": {"guessedname": "_selectedDates", "type": "Array", "description": "The private list of initially selected dates.", "private": "", "guessedtype": "property"}, "parent": {"type": "CalendarGroup", "description": "The parent CalendarGroup, only to be set explicitly by the parent group", "guessedname": "parent", "guessedtype": "property"}, "Style.CSS_CELL_OOM": {"guessedname": "CSS_CELL_OOM", "guessedtype": "property"}, "Style.CSS_CELL_OOB": {"guessedname": "CSS_CELL_OOB", "guessedtype": "property"}, "oDomContainer": {"type": "HTMLElement", "description": "The DOM element reference that points to this calendar's container element. The calendar will be inserted into this element when the shell is rendered.", "guessedname": "oDomContainer", "guessedtype": "property"}, "Style.CSS_CELL_TODAY": {"guessedname": "CSS_CELL_TODAY", "guessedtype": "property"}, "Style.CSS_FOOTER": {"guessedname": "CSS_FOOTER", "guessedtype": "property"}, "Style.CSS_CELL_SELECTABLE": {"guessedname": "CSS_CELL_SELECTABLE", "guessedtype": "property"}, "YAHOO.widget.Calendar.RANGE": {"description": "Type constant used for renderers to represent a range of individual dates (M\/D\/Y-M\/D\/Y)", "static": "", "guessedname": "RANGE", "guessedtype": "property", "type": "String", "final": ""}, "Style.CSS_CELL_HOVER": {"guessedname": "CSS_CELL_HOVER", "guessedtype": "property"}, "Options": {"type": "Object", "description": "The local object which contains the Calendar's options", "guessedname": "Options", "guessedtype": "property"}, "Style.CSS_WEEKDAY_ROW": {"guessedname": "CSS_WEEKDAY_ROW", "guessedtype": "property"}, "Style.CSS_CELL_RESTRICTED": {"guessedname": "CSS_CELL_RESTRICTED", "guessedtype": "property"}, "cellDates": {"type": "Array[](Number[])", "description": "The collection of calendar cell dates that is parallel to the cells collection. The array contains dates field arrays in the format of [YYYY, M, D].", "guessedname": "cellDates", "guessedtype": "property"}, "Style.CSS_ROW_HEADER": {"guessedname": "CSS_ROW_HEADER", "guessedtype": "property"}, "Locale": {"type": "Object", "description": "The local object which contains the Calendar's locale settings", "guessedname": "Locale", "guessedtype": "property"}, "cells": {"type": "HTMLTableCellElement[]", "description": "The collection of calendar table cells", "guessedname": "cells", "guessedtype": "property"}, "Style.CSS_CELL_SELECTED": {"guessedname": "CSS_CELL_SELECTED", "guessedtype": "property"}, "YAHOO.widget.Calendar.DATE": {"description": "Type constant used for renderers to represent an individual date (M\/D\/Y)", "static": "", "guessedname": "DATE", "guessedtype": "property", "type": "String", "final": ""}, "domEventMap": {"type": "Object", "description": "A map of DOM event handlers to attach to cells associated with specific CSS class names", "guessedname": "domEventMap", "guessedtype": "property"}, "YAHOO.widget.Calendar.DISPLAY_DAYS": {"description": "Constant that represents the total number of date cells that are displayed in a given month", "static": "", "guessedname": "DISPLAY_DAYS", "guessedtype": "property", "type": "Number", "final": ""}, "_pageDate": {"guessedname": "_pageDate", "type": "Date", "description": "A Date object representing the month\/year that the calendar is initially set to", "private": "", "guessedtype": "property"}, "Style.CSS_NAV_LEFT": {"guessedname": "CSS_NAV_LEFT", "guessedtype": "property"}, "browser": {"type": "String", "description": "Returns a string representing the current browser.", "guessedname": "browser", "guessedtype": "function"}, "Style.CSS_ROW_FOOTER": {"guessedname": "CSS_ROW_FOOTER", "guessedtype": "property"}}, "description": "Calendar is the base class for the Calendar widget. In its most basic\nimplementation, it has the ability to render a calendar widget on the page\nthat can be manipulated to select a single date, move back and forth between\nmonths and years.\n<p>To construct the placeholder for the calendar widget, the code is as\nfollows:\n<xmp>\n<div id=\"cal1Container\"><\/div>\n<\/xmp>\nNote that the table can be replaced with any kind of element.\n<\/p>"}, "YAHOO.widget.LogWriter": {"name": "YAHOO.widget.LogWriter", "constructors": [{"params": [{"type": "String", "name": "sSource", "description": "  Source of LogWriter instance."}], "description": "The LogWriter class provides a mechanism to log messages through\r\nYAHOO.widget.Logger from a named source."}], "namespace": "YAHOO.widget", "module": "logger", "guessedname": "LogWriter", "methods": {"getSource": {"return": {"type": "String", "description": "The LogWriter source."}, "description": "Public accessor to get the source name.", "guessedname": "getSource", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the LogWriter instance."}, "description": "Public accessor to the unique name of the LogWriter instance.", "guessedname": "toString", "guessedtype": "function"}, "log": {"params": [{"type": "String", "name": "sMsg", "description": "  The log message."}, {"type": "String", "name": "sCategory", "description": "  Category name."}], "description": "Logs a message attached to the source of the LogWriter.", "guessedname": "log", "guessedtype": "function"}, "setSource": {"params": [{"type": "String", "name": "sSource", "description": "  Source of LogWriter instance."}], "description": "Public accessor to set the source name.", "guessedname": "setSource", "guessedtype": "function"}}, "file": "LogWriter.js", "guessedtype": "function", "shortname": "LogWriter", "properties": {"_source": {"guessedname": "_source", "type": "String", "description": "Source of the LogWriter instance.", "private": "", "guessedtype": "property"}}, "description": "The LogWriter class provides a mechanism to log messages through\r\nYAHOO.widget.Logger from a named source."}, "YAHOO.widget.Calendar_Core": {"name": "YAHOO.widget.Calendar_Core", "deprecated": "The old Calendar_Core class is no longer necessary.", "namespace": "YAHOO.widget", "module": "calendar", "guessedname": "Calendar_Core", "extends": "YAHOO.widget.Calendar", "superclass": "YAHOO.widget.Calendar", "file": "Calendar.js", "guessedtype": "property", "shortname": "Calendar_Core"}, "YAHOO.widget.MenuManager": {"name": "YAHOO.widget.MenuManager", "namespace": "YAHOO.widget", "module": "menu", "guessedname": "MenuManager", "methods": {"addMenu": {"params": [{"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object specifying the Menu instance \nto be added."}], "description": "Adds a menu to the collection of known menus.", "guessedname": "addMenu", "guessedtype": "function"}, "onDOMEvent": {"guessedname": "onDOMEvent", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object representing the DOM event object passed \nback by the event utility (YAHOO.util.Event)."}], "description": "Generic, global event handler for all of a menu's DOM-based \nevents.  This listens for events against the document object.  If the \ntarget of a given event is a member of a menu or menu item's DOM, the \ninstance's corresponding Custom Event is fired.", "private": "", "guessedtype": "function"}, "getMenu": {"return": {"type": "YAHOO.widget.Menu", "description": ""}, "params": [{"type": "String", "name": "p_sId", "description": " String specifying the id of the menu to\nbe retrieved."}], "description": "Returns a menu with the specified id.", "guessedname": "getMenu", "guessedtype": "function"}, "onMenuVisibleConfigChange": {"guessedname": "onMenuVisibleConfigChange", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"visible\" configuration property \nof a Menu instance changes.", "private": "", "guessedtype": "function"}, "getMenuRootElement": {"guessedname": "getMenuRootElement", "params": [{"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-58190037\">HTMLElement<\/a>", "name": "p_oElement", "description": " Object specifying \nan HTML element."}], "description": "Finds the root DIV node of a menu or the root LI node of a menu item.", "private": "", "guessedtype": "function"}, "addItem": {"guessedname": "addItem", "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object specifying the MenuItem \ninstance to be added."}], "description": "Adds an item to the collection of known menu items.", "private": "", "guessedtype": "function"}, "onMenuDestroy": {"guessedname": "onMenuDestroy", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"destroy\" event handler for a menu.", "private": "", "guessedtype": "function"}, "onItemRemoved": {"guessedname": "onItemRemoved", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"itemremoved\" event handler for a Menu instance.", "private": "", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu manager.", "guessedname": "toString", "guessedtype": "function"}, "removeItem": {"guessedname": "removeItem", "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object specifying the MenuItem \ninstance to be removed."}], "description": "Removes an item from the collection of known menu items.", "private": "", "guessedtype": "function"}, "getMenus": {"return": {"type": "Array", "description": ""}, "description": "Returns an array of all menus registered with the \nmenu manger.", "guessedname": "getMenus", "guessedtype": "function"}, "onItemDestroy": {"guessedname": "onItemDestroy", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item \nthat fired the event."}], "description": "\"destroy\" event handler for a MenuItem instance.", "private": "", "guessedtype": "function"}, "onItemAdded": {"guessedname": "onItemAdded", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"itemadded\" event handler for a Menu instance.", "private": "", "guessedtype": "function"}, "hideVisible": {"description": "Hides all visible, dynamically positioned menus.", "guessedname": "hideVisible", "guessedtype": "function"}, "removeMenu": {"params": [{"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object specifying the Menu instance \nto be removed."}], "description": "Removes a menu from the collection of known menus.", "guessedname": "removeMenu", "guessedtype": "function"}}, "static": "", "file": "menumanager.js", "guessedtype": "function", "shortname": "MenuManager", "description": "Singleton that manages a collection of all menus and menu items.  Listens for \nDOM events at the document level and dispatches the events to the \ncorresponding menu or menu item."}, "YAHOO.widget.Menubar": {"name": "YAHOO.widget.Menubar", "configs": {"position": {"default": "static", "type": "String", "description": "String indicating how a menu bar should be positioned on the \nscreen.  Possible values are \"static\" and \"dynamic.\"  Static menu bars \nare visible by default and reside in the normal flow of the document \n(CSS position: static).  Dynamic menu bars are hidden by default, reside\nout of the normal flow of the document (CSS position: absolute), and can \noverlay other elements on the screen."}, "submenualignment": {"default": "[\"tl\",\"bl\"]", "type": "Array", "description": "Array defining how submenus should be aligned to their \nparent menu bar item. The format is: [itemCorner, submenuCorner].", "guessedname": "value", "guessedtype": "property"}, "autosubmenudisplay": {"default": "false", "type": "Boolean", "description": "Boolean indicating if submenus are automatically made \nvisible when the user mouses over the menu bar's items."}}, "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the menu bar."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element to be used as the data source for the \nmenu bar."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object specifying \nthe <code>&#60;div&#62;<\/code> element of the menu bar."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-94282980\">HTMLSelectElement<\/a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;select&#62;<\/code> element to be used as the data \nsource for the menu bar."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu bar. See configuration class documentation for\nmore details."}], "description": "Horizontal collection of items, each of which can contain a submenu."}], "namespace": "YAHOO.widget", "module": "menu", "guessedname": "MenuBar", "methods": {"_onClick": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuBar", "name": "p_oMenuBar", "description": " Object representing the menu bar \nthat fired the event."}], "description": "\"click\" event handler for the menu bar.", "guessedname": "_onClick", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the menu bar."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element to be used as the data source for the \nmenu bar."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object specifying \nthe <code>&#60;div&#62;<\/code> element of the menu bar."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-94282980\">HTMLSelectElement<\/a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;select&#62;<\/code> element to be used as the data \nsource for the menu bar."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu bar. See configuration class documentation for\nmore details."}], "description": "The MenuBar class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references for \npre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "_onKeyDown": {"guessedname": "_onKeyDown", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuBar", "name": "p_oMenuBar", "description": " Object representing the menu bar \nthat fired the event."}], "description": "\"keydown\" Custom Event handler for the menu bar.", "private": "", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu bar.", "guessedname": "toString", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be\nchanged using the menu bar's Config object (\"cfg\").", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Menu", "superclass": "YAHOO.widget.Menu", "file": "menubar.js", "guessedtype": "function", "shortname": "Menubar", "properties": {"CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the menu \nbar's <code>&#60;div&#62;<\/code> element.", "default": "\"yuimenubar\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Horizontal collection of items, each of which can contain a submenu."}, "YAHOO.util.Element": {"name": "YAHOO.util.Element", "configs": {"element": {"type": "HTMLElement", "description": "The HTMLElement the Element instance refers to."}}, "constructors": [{"params": [{"type": "HTMLElement | String", "name": "el", "description": "  The html element that \nrepresents the Element."}, {"type": "Object", "name": "map", "description": " A key-value map of initial config names and values"}], "description": "Element provides an interface to an HTMLElement's attributes and common\nmethods.  Other commonly used attributes are added as well."}], "namespace": "YAHOO.util", "module": "tabview", "events": {"available": {"description": "Fires when the Element's HTMLElement can be retrieved by Id.\n<p>See: <a href=\"#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> available<br>\n<code>&lt;HTMLElement&gt;\ntarget<\/code> the HTMLElement bound to this Element instance<br>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('available', handler);<\/code><\/p>"}, "contentReady": {"description": "Fires when the Element's HTMLElement subtree is rendered.\n<p>See: <a href=\"#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> contentReady<br>\n<code>&lt;HTMLElement&gt;\ntarget<\/code> the HTMLElement bound to this Element instance<br>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('contentReady', handler);<\/code><\/p>"}}, "guessedname": "Element", "methods": {"fireQueue": {"description": "Apply any queued set calls.", "guessedname": "fireQueue", "guessedtype": "function"}, "appendChild": {"params": [{"type": "Boolean", "name": "deep", "description": " Whether or not to do a deep clone"}], "description": "Wrapper for HTMLElement method.", "guessedname": "appendChild", "guessedtype": "function"}, "addListener": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Any", "name": "obj", "description": " A variable to pass to the handler"}, {"type": "Object", "name": "scope", "description": " The object to use for the scope of the handler"}], "description": "Adds a listener for the given event.  These may be DOM or \ncustomEvent listeners.  Any event that is fired via fireEvent\ncan be listened for.  All handlers receive an event object.", "guessedname": "addListener", "guessedtype": "function"}, "removeClass": {"params": [{"type": "String", "name": "className", "description": " The className to remove"}], "description": "Wrapper for Dom method.", "guessedname": "removeClass", "guessedtype": "function"}, "insertBefore": {"params": [{"type": "HTMLElement", "name": "element", "description": " The HTMLElement to insert"}, {"type": "HTMLElement", "name": "before", "description": " The HTMLElement to insert\nthe element before."}], "description": "Wrapper for HTMLElement method.", "guessedname": "insertBefore", "guessedtype": "function"}, "on": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The function call when the event fires"}, {"type": "Any", "name": "obj", "description": " A variable to pass to the handler"}, {"type": "Object", "name": "scope", "description": " The object to use for the scope of the handler"}], "description": "Alias for addListener", "guessedname": "on", "guessedtype": "function"}, "getElementsByTagName": {"params": [{"type": "String", "name": "tag", "description": " The tagName to collect"}], "description": "Wrapper for HTMLElement method.", "guessedname": "getElementsByTagName", "guessedtype": "function"}, "getElementsByClassName": {"return": {"type": "Array", "description": "Array of HTMLElements"}, "params": [{"type": "String", "name": "className", "description": " The className to collect"}, {"type": "String", "name": "tag", "description": " (optional) The tag to use in\nconjunction with class name"}], "description": "Wrapper for Dom method.", "guessedname": "getElementsByClassName", "guessedtype": "function"}, "replaceClass": {"params": [{"type": "String", "name": "oldClassName", "description": " The className to replace"}, {"type": "String", "name": "newClassName", "description": " The className to add"}], "description": "Wrapper for Dom method.", "guessedname": "replaceClass", "guessedtype": "function"}, "appendTo": {"params": [{"type": "HTMLElement | Element", "name": "parentNode", "description": " The node to append to"}, {"type": "HTMLElement | Element", "name": "before", "description": " An optional node to insert before"}], "description": "Appends the HTMLElement into either the supplied parentNode.", "guessedname": "appendTo", "guessedtype": "function"}, "getStyle": {"return": {"type": "String", "description": "The current value of the property"}, "params": [{"type": "String", "name": "property", "description": " The style property to retrieve"}], "description": "Wrapper for Dom method.", "guessedname": "getStyle", "guessedtype": "function"}, "setStyle": {"params": [{"type": "String", "name": "property", "description": " The style property to set"}, {"type": "String", "name": "value", "description": " The value to apply to the style property"}], "description": "Wrapper for Dom method.", "guessedname": "setStyle", "guessedtype": "function"}, "removeChild": {"params": [{"type": "HTMLElement", "name": "child", "description": " The HTMLElement to remove"}], "description": "Wrapper for HTMLElement method.", "guessedname": "removeChild", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "map", "description": " A key-value map of initial attribute configs"}], "description": "Registers Element specific attributes.", "guessedname": "initAttributes", "guessedtype": "function"}, "hasChildNodes": {"return": {"type": "Boolean", "description": "Whether or not the element has childNodes"}, "description": "Wrapper for HTMLElement method.", "guessedname": "hasChildNodes", "guessedtype": "function"}, "replaceChild": {"params": [{"type": "HTMLElement", "name": "newNode", "description": " The HTMLElement to insert"}, {"type": "HTMLElement", "name": "oldNode", "description": " The HTMLElement to replace"}], "description": "Wrapper for HTMLElement method.", "guessedname": "replaceChild", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean", "description": "Whether or not the element has the class name"}, "params": [{"type": "String", "name": "className", "description": " The className to add"}], "description": "Wrapper for Dom method.", "guessedname": "hasClass", "guessedtype": "function"}, "_registerHTMLAttr": {"guessedname": "_registerHTMLAttr", "params": [{"type": "YAHOO.util.Element", "name": "element", "description": " The Element instance to\nregister the config to."}, {"type": "String", "name": "key", "description": " The name of the config to register"}, {"type": "Object", "name": "map", "description": " A key-value map of the config's params"}], "description": "Sets the value of the property and fires beforeChange and change events.", "private": "", "guessedtype": "function"}, "removeListener": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The function call when the event fires"}], "description": "Remove an event listener", "guessedname": "removeListener", "guessedtype": "function"}, "addClass": {"params": [{"type": "String", "name": "className", "description": " The className to add"}], "description": "Wrapper for Dom method.", "guessedname": "addClass", "guessedtype": "function"}}, "uses": ["YAHOO.util.AttributeProvider"], "file": "Element.js", "guessedtype": "function", "shortname": "Element", "properties": {"DOM_EVENTS": {"type": "Object", "description": "Dom events supported by the Element instance.", "guessedname": "DOM_EVENTS", "guessedtype": "property"}}, "description": "Element provides an interface to an HTMLElement's attributes and common\nmethods.  Other commonly used attributes are added as well."}, "YAHOO.widget.DateMath": {"name": "YAHOO.widget.DateMath", "namespace": "YAHOO.widget", "module": "calendar", "guessedname": "DateMath", "methods": {"isYearOverlapWeek": {"return": {"type": "Boolean", "description": "true if the date overlaps two different years."}, "params": [{"type": "Date", "name": "weekBeginDate", "description": "\tThe JavaScript Date representing the first day of the week."}], "description": "Determines if a given week overlaps two different years.", "guessedname": "isYearOverlapWeek", "guessedtype": "function"}, "getWeekNumber": {"return": {"type": "Number", "description": "The week number of the given date."}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript date for which to find the week number"}, {"type": "Number", "name": "calendarYear", "description": "\tOPTIONAL - The calendar year to use for determining the week number. Default is\nthe calendar year of parameter \"date\"."}, {"type": "Number", "name": "weekStartsOn", "description": "\tOPTIONAL - The integer (0-6) representing which day a week begins on. Default is 0 (for Sunday)."}], "description": "Calculates the week number for the given date. This function assumes that week 1 is the\nweek in which January 1 appears, regardless of whether the week consists of a full 7 days.\nThe calendar year can be specified to help find what a the week number would be for a given\ndate if the date overlaps years. For instance, a week may be considered week 1 of 2005, or\nweek 53 of 2004. Specifying the optional calendarYear allows one to make this distinction\neasily.", "guessedname": "getWeekNumber", "guessedtype": "function"}, "getDayOffset": {"return": {"type": "Number", "description": "The number of days since January 1 of the given year"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript date for which to find the offset"}, {"type": "Number", "name": "calendarYear", "description": "\tThe calendar year to use for determining the offset"}], "description": "Calculates the number of days the specified date is from January 1 of the specified calendar year.\nPassing January 1 to this function would return an offset value of zero.", "guessedname": "getDayOffset", "guessedtype": "function"}, "findMonthEnd": {"return": {"type": "Date", "description": "The JavaScript Date representing the last day of the month"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date used to calculate the month end"}], "description": "Gets the last day of a month containing a given date.", "guessedname": "findMonthEnd", "guessedtype": "function"}, "after": {"return": {"type": "Boolean", "description": "true if the date occurs after the compared date; false if not."}, "params": [{"type": "Date", "name": "date", "description": "\t\tThe Date object to compare with the compare argument"}, {"type": "Date", "name": "compareTo", "description": "\tThe Date object to use for the comparison"}], "description": "Determines whether a given date is after another date on the calendar.", "guessedname": "after", "guessedtype": "function"}, "clearTime": {"return": {"type": "Date", "description": "The JavaScript Date cleared of all time fields"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date for which the time fields will be cleared"}], "description": "Clears the time fields from a given date, effectively setting the time to midnight.", "guessedname": "clearTime", "guessedtype": "function"}, "isMonthOverlapWeek": {"return": {"type": "Boolean", "description": "true if the date overlaps two different months."}, "params": [{"type": "Date", "name": "weekBeginDate", "description": "\tThe JavaScript Date representing the first day of the week."}], "description": "Determines if a given week overlaps two different months.", "guessedname": "isMonthOverlapWeek", "guessedtype": "function"}, "add": {"return": {"type": "Date", "description": "The resulting Date object"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date object to perform addition on"}, {"type": "String", "name": "field", "description": "\tThe field constant to be used for performing addition."}, {"type": "Number", "name": "amount", "description": "\tThe number of units (measured in the field constant) to add to the date."}], "description": "Adds the specified amount of time to the this instance.", "guessedname": "add", "guessedtype": "function"}, "getJan1": {"return": {"type": "Date", "description": "January 1 of the calendar year specified."}, "params": [{"type": "Number", "name": "calendarYear", "description": "\t\tThe calendar year for which to retrieve January 1"}], "description": "Retrieves a JavaScript Date object representing January 1 of any given year.", "guessedname": "getJan1", "guessedtype": "function"}, "between": {"return": {"type": "Boolean", "description": "true if the date occurs between the compared dates; false if not."}, "params": [{"type": "Date", "name": "date", "description": "\t\tThe date to check for"}, {"type": "Date", "name": "dateBegin", "description": "\tThe start of the range"}, {"type": "Date", "name": "dateEnd", "description": "\t\tThe end of the range"}], "description": "Determines whether a given date is between two other dates on the calendar.", "guessedname": "between", "guessedtype": "function"}, "findMonthStart": {"return": {"type": "Date", "description": "The JavaScript Date representing the first day of the month"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date used to calculate the month start"}], "description": "Gets the first day of a month containing a given date.", "guessedname": "findMonthStart", "guessedtype": "function"}, "subtract": {"return": {"type": "Date", "description": "The resulting Date object"}, "params": [{"type": "Date", "name": "date", "description": "\tThe JavaScript Date object to perform subtraction on"}, {"type": "Number", "name": "field", "description": "\tThe this field constant to be used for performing subtraction."}, {"type": "Number", "name": "amount", "description": "\tThe number of units (measured in the field constant) to subtract from the date."}], "description": "Subtracts the specified amount of time from the this instance.", "guessedname": "subtract", "guessedtype": "function"}, "before": {"return": {"type": "Boolean", "description": "true if the date occurs before the compared date; false if not."}, "params": [{"type": "Date", "name": "date", "description": "\t\tThe Date object to compare with the compare argument"}, {"type": "Date", "name": "compareTo", "description": "\tThe Date object to use for the comparison"}], "description": "Determines whether a given date is before another date on the calendar.", "guessedname": "before", "guessedtype": "function"}}, "file": "DateMath.js", "guessedtype": "property", "shortname": "DateMath", "properties": {"WEEK": {"description": "Constant field representing Week", "static": "", "guessedname": "WEEK", "guessedtype": "property", "type": "String", "final": ""}, "MONTH": {"description": "Constant field representing Month", "static": "", "guessedname": "MONTH", "guessedtype": "property", "type": "String", "final": ""}, "ONE_DAY_MS": {"description": "Constant field representing one day, in milliseconds", "static": "", "guessedname": "ONE_DAY_MS", "guessedtype": "property", "type": "Number", "final": ""}, "DAY": {"description": "Constant field representing Day", "static": "", "guessedname": "DAY", "guessedtype": "property", "type": "String", "final": ""}, "YEAR": {"description": "Constant field representing Year", "static": "", "guessedname": "YEAR", "guessedtype": "property", "type": "String", "final": ""}}, "description": "YAHOO.widget.DateMath is used for simple date manipulation. The class is a static utility\nused for adding, subtracting, and comparing dates."}, "YAHOO.widget.MenuBarItem": {"name": "YAHOO.widget.MenuBarItem", "constructors": [{"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the menu bar item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>", "name": "p_oObject", "description": " Object specifying the \n<code>&#60;li&#62;<\/code> element of the menu bar item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-38450247\">HTMLOptGroupElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;<\/code> element of the menu bar item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-70901257\">HTMLOptionElement<\/a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;option&#62;<\/code> element of the menu bar item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu bar item. See configuration class documentation \nfor more details."}], "description": "Creates an item for a menu bar."}], "namespace": "YAHOO.widget", "module": "menu", "guessedname": "MenuBarItem", "methods": {"init": {"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the menu bar item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-74680021\">HTMLLIElement<\/a>", "name": "p_oObject", "description": " Object specifying the \n<code>&#60;li&#62;<\/code> element of the menu bar item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-38450247\">HTMLOptGroupElement<\/a>", "name": "p_oObject", "description": " Object \nspecifying the <code>&#60;optgroup&#62;<\/code> element of the menu bar item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-\none-html.html#ID-70901257\">HTMLOptionElement<\/a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;option&#62;<\/code> element of the menu bar item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu bar item. See configuration class documentation \nfor more details."}], "description": "The MenuBarItem class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references for \npre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu bar item.", "guessedname": "toString", "guessedtype": "function"}}, "extends": "YAHOO.widget.MenuItem", "superclass": "YAHOO.widget.MenuItem", "file": "menubaritem.js", "guessedtype": "function", "shortname": "MenuBarItem", "properties": {"SELECTED_SUBMENU_INDICATOR_IMAGE_PATH": {"description": "String representing the path to the image to be used for the \nsubmenu arrow indicator when the menu bar item is selected.", "default": "\"nt\/ic\/ut\/alt1\/menuarodwn8_hov_1.gif\"", "guessedname": "SELECTED_SUBMENU_INDICATOR_IMAGE_PATH", "guessedtype": "property", "type": "String", "final": ""}, "DISABLED_SUBMENU_INDICATOR_IMAGE_PATH": {"description": "String representing the path to the image to be used for the \nsubmenu arrow indicator when the menu bar item is disabled.", "default": "\"nt\/ic\/ut\/alt1\/menuarodwn8_dim_1.gif\"", "guessedname": "DISABLED_SUBMENU_INDICATOR_IMAGE_PATH", "guessedtype": "property", "type": "String", "final": ""}, "CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the \n<code>&#60;li&#62;<\/code> element of the menu bar item.", "default": "\"yuimenubaritem\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "SUBMENU_INDICATOR_IMAGE_PATH": {"description": "String representing the path to the image to be used for the \nmenu bar item's submenu arrow indicator.", "default": "\"nt\/ic\/ut\/alt1\/menuarodwn8_nrm_1.gif\"", "guessedname": "SUBMENU_INDICATOR_IMAGE_PATH", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Creates an item for a menu bar."}, "YAHOO.widget.MenuNode": {"name": "YAHOO.widget.MenuNode", "constructors": [{"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node"}, {"type": "YAHOO.widget.Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded\/collapsed state"}], "description": "A menu-specific implementation that differs from TextNode in that only \none sibling can be expanded at a time."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "MenuNode", "extends": "YAHOO.widget.TextNode", "superclass": "YAHOO.widget.TextNode", "file": "MenuNode.js", "guessedtype": "function", "shortname": "MenuNode", "description": "A menu-specific implementation that differs from TextNode in that only \none sibling can be expanded at a time."}, "YAHOO.widget.TabView": {"name": "YAHOO.widget.TabView", "configs": {"tabs": {"type": "Array", "description": "The Tabs belonging to the TabView instance."}, "activeIndex": {"type": "Int", "description": "The index of the tab currently active."}, "activeTab": {"type": "YAHOO.widget.Tab", "description": "The tab currently active."}, "orientation": {"default": "\"top\"", "type": "String", "description": "How the Tabs should be oriented relative to the TabView."}}, "constructors": [{"params": [{"type": "HTMLElement | String | Object", "name": "el(optional)", "description": " The html \nelement that represents the TabView, or the attribute object to use. \nAn element will be created if none provided."}, {"type": "Object", "name": "attr", "description": " (optional) A key map of the tabView's \ninitial attributes.  Ignored if first arg is attributes object."}], "description": "A widget to control tabbed views."}], "namespace": "YAHOO.widget", "module": "tabview", "events": {"beforeActiveTabChange": {"description": "Fires before the activeTab is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeActiveTabChange<br>\n<code>&lt;<a href=\"YAHOO.widget.Tab.html\">YAHOO.widget.Tab<\/a>&gt;\nprevValue<\/code> the currently active tab<br>\n<code>&lt;<a href=\"YAHOO.widget.Tab.html\">YAHOO.widget.Tab<\/a>&gt;\nnewValue<\/code> the tab to be made active<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeActiveTabChange', handler);<\/code><\/p>"}, "orientationChange": {"description": "Fires after the orientation is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> orientationChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the former orientation<br>\n<code>&lt;String&gt;\nnewValue<\/code> the new orientation<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('orientationChange', handler);<\/code><\/p>"}, "activeTabChange": {"description": "Fires after the activeTab is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> activeTabChange<br>\n<code>&lt;<a href=\"YAHOO.widget.Tab.html\">YAHOO.widget.Tab<\/a>&gt;\nprevValue<\/code> the formerly active tab<br>\n<code>&lt;<a href=\"YAHOO.widget.Tab.html\">YAHOO.widget.Tab<\/a>&gt;\nnewValue<\/code> the new active tab<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('activeTabChange', handler);<\/code><\/p>"}, "beforeOrientationChange": {"description": "Fires before the orientation is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeOrientationChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the current orientation<br>\n<code>&lt;String&gt;\nnewValue<\/code> the new orientation to be applied<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeOrientationChange', handler);<\/code><\/p>"}}, "guessedname": "TabView", "methods": {"getTabIndex": {"return": {"type": "", "description": "int"}, "params": [{"type": "YAHOO.widget.Tab", "name": "tab", "description": " The tab whose index will be returned."}], "description": "Returns the index of given tab.", "guessedname": "getTabIndex", "guessedtype": "function"}, "removeTab": {"return": {"type": "", "description": "void"}, "params": [{"type": "YAHOO.widget.Tab", "name": "item", "description": " The Tab instance to be removed."}], "description": "Removes the specified Tab from the TabView.", "guessedname": "removeTab", "guessedtype": "function"}, "contentTransition": {"description": "The transiton to use when switching between tabs.", "guessedname": "contentTransition", "guessedtype": "function"}, "createTabs": {"return": {"type": "", "description": "void"}, "description": "Creates Tab instances from a collection of HTMLElements.", "private": "", "params": [{"type": "Array|HTMLCollection", "name": "elements", "description": " The elements to use for Tabs."}], "guessedname": "_initTabs", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Hash of initial attributes"}], "description": "Registers TabView specific properties.", "guessedname": "initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "String"}, "description": "Provides a readable name for the TabView instance.", "guessedname": "toString", "guessedtype": "function"}, "DOMEventHandler": {"return": {"type": "", "description": "void"}, "params": [{"type": "event", "name": "e", "description": " The Dom event that is being handled."}], "description": "Routes childNode events.", "guessedname": "DOMEventHandler", "guessedtype": "function"}, "addTab": {"return": {"type": "", "description": "void"}, "params": [{"type": "YAHOO.widget.Tab", "name": "tab", "description": " A Tab instance to add."}, {"type": "Integer", "name": "index", "description": " The position to add the tab."}], "description": "Adds a Tab to the TabView instance.  \nIf no index is specified, the tab is added to the end of the tab list.", "guessedname": "addTab", "guessedtype": "function"}, "getTab": {"return": {"type": "", "description": "YAHOO.widget.Tab"}, "params": [{"type": "Integer", "name": "index", "description": " The position of the Tab."}], "description": "Returns the Tab instance at the specified index.", "guessedname": "getTab", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.widget.YAHOO.util.Element", "file": "TabView.js", "guessedtype": "function", "shortname": "TabView", "properties": {"CLASSNAME": {"default": "\"navset\"", "description": "The className to add when building from scratch.", "guessedname": "CLASSNAME", "guessedtype": "property"}, "TAB_PARENT_CLASSNAME": {"default": "\"nav\"", "description": "The className of the HTMLElement containing the TabView's tab elements\nto look for when building from existing markup, or to add when building\nfrom scratch. \nAll childNodes of the tab container are treated as Tabs when building\nfrom existing markup.", "guessedname": "TAB_PARENT_CLASSNAME", "guessedtype": "property"}, "CONTENT_PARENT_CLASSNAME": {"default": "\"nav-content\"", "description": "The className of the HTMLElement containing the TabView's label elements\nto look for when building from existing markup, or to add when building\nfrom scratch. \nAll childNodes of the content container are treated as content elements when\nbuilding from existing markup.", "guessedname": "CONTENT_PARENT_CLASSNAME", "guessedtype": "property"}, "_tabParent": {"guessedname": "_tabParent", "type": "HTMLElement", "description": "The container of the tabView's label elements.", "private": "", "guessedtype": "property"}, "_contentParent": {"guessedname": "_contentParent", "type": "HTMLElement", "description": "The container of the tabView's content elements.", "private": "", "guessedtype": "property"}}, "description": "A widget to control tabbed views."}, "YAHOO.widget.Module": {"name": "YAHOO.widget.Module", "configs": {"visible": {"default": "true", "type": "Boolean", "description": "Specifies whether the Module is visible on the page.", "guessedname": "value", "guessedtype": "property"}, "monitorresize": {"default": "true", "type": "Boolean", "description": "Specifies whether to create a special proxy iframe to monitor for user font resizing in the document", "guessedname": "value", "guessedtype": "property"}, "effect": {"default": "null", "type": "Object", "description": "Object or array of objects representing the ContainerEffect classes that are active for animating the container.", "guessedname": "suppressEvent", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": "\t\t\tThe element ID representing the Module <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\t\tThe element representing the Module"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration Object literal containing the configuration that should be set for this module. See configuration documentation for more details."}], "description": "Module is a JavaScript representation of the Standard Module Format. Standard Module Format is a simple standard for markup containers where child nodes representing the header, body, and footer of the content are denoted using the CSS classes \"hd\", \"bd\", and \"ft\" respectively. Module is the base class for all other classes in the YUI Container package."}], "namespace": "YAHOO.widget", "module": "container", "events": {"initEvent": {"params": [{"type": "class", "name": "classRef", "description": "\tclass reference of the initializing class, such as this.beforeInitEvent.fire(YAHOO.widget.Module)"}], "description": "CustomEvent fired after class initalization.", "guessedname": "initEvent", "guessedtype": "property"}, "hideEvent": {"description": "CustomEvent fired after the Module is hidden", "guessedname": "hideEvent", "guessedtype": "property"}, "beforeHideEvent": {"description": "CustomEvent fired before the Module is hidden", "guessedname": "beforeHideEvent", "guessedtype": "property"}, "changeBodyEvent": {"params": [{"type": "String\/HTMLElement", "name": "content", "description": "\tString\/element representing the new body content"}], "description": "CustomEvent fired when the body content of the Module is modified", "guessedname": "changeBodyEvent", "guessedtype": "property"}, "beforeRenderEvent": {"description": "CustomEvent fired before the Module is rendered", "guessedname": "beforeRenderEvent", "guessedtype": "property"}, "changeContentEvent": {"description": "CustomEvent fired when the content of the Module is modified", "guessedname": "changeContentEvent", "guessedtype": "property"}, "beforeShowEvent": {"description": "CustomEvent fired before the Module is shown", "guessedname": "beforeShowEvent", "guessedtype": "property"}, "changeFooterEvent": {"params": [{"type": "String\/HTMLElement", "name": "content", "description": "\tString\/element representing the new footer content"}], "description": "CustomEvent fired when the footer content of the Module is modified", "guessedname": "changeFooterEvent", "guessedtype": "property"}, "renderEvent": {"description": "CustomEvent fired after the Module is rendered", "guessedname": "renderEvent", "guessedtype": "property"}, "showEvent": {"description": "CustomEvent fired after the Module is shown", "guessedname": "showEvent", "guessedtype": "property"}, "beforeInitEvent": {"params": [{"type": "class", "name": "classRef", "description": "\tclass reference of the initializing class, such as this.beforeInitEvent.fire(YAHOO.widget.Module)"}], "description": "CustomEvent fired prior to class initalization.", "guessedname": "beforeInitEvent", "guessedtype": "property"}, "appendEvent": {"description": "CustomEvent fired when the Module is appended to the DOM", "guessedname": "appendEvent", "guessedtype": "property"}, "changeHeaderEvent": {"params": [{"type": "String\/HTMLElement", "name": "content", "description": "\tString\/element representing the new header content"}], "description": "CustomEvent fired when the header content of the Module is modified", "guessedname": "changeHeaderEvent", "guessedtype": "property"}, "destroyEvent": {"description": "CustomEvent fired when the Module is destroyed", "guessedname": "destroyEvent", "guessedtype": "property"}}, "guessedname": "Module", "methods": {"configMonitorResize": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "Default event handler for the \"monitorresize\" configuration property", "guessedname": "configMonitorResize", "guessedtype": "function"}, "appendToHeader": {"params": [{"type": "HTMLElement", "name": "element", "description": "\tThe element to append to the header"}], "description": "Appends the passed element to the header. If no header is present, one will be automatically created.", "guessedname": "appendToHeader", "guessedtype": "function"}, "setBody": {"params": [{"type": "String", "name": "bodyContent", "description": "\tThe HTML used to set the body <em>OR<\/em>"}, {"type": "HTMLElement", "name": "bodyContent", "description": "\tThe HTMLElement to append to the body"}], "description": "Sets the Module's body content to the HTML specified, or appends the passed element to the body. If no body is present, one will be automatically created.", "guessedname": "setBody", "guessedtype": "function"}, "hide": {"description": "Hides the Module element by setting the visible configuration property to false. Also fires two events: beforeHideEvent prior to the visibility change, and hideEvent after.", "guessedname": "hide", "guessedtype": "function"}, "render": {"return": {"type": "Boolean", "description": "Success or failure of the render"}, "params": [{"type": "String", "name": "appendToNode", "description": "\tThe element id to which the Module should be appended to prior to rendering <em>OR<\/em>"}, {"type": "HTMLElement", "name": "appendToNode", "description": "\tThe element to which the Module should be appended to prior to rendering"}, {"type": "HTMLElement", "name": "moduleElement", "description": "\tOPTIONAL. The element that represents the actual Standard Module container."}], "description": "Renders the Module by inserting the elements that are not already in the main Module into their correct places. Optionally appends the Module to the specified node prior to the render's execution. NOTE: For Modules without existing markup, the appendToNode argument is REQUIRED. If this argument is ommitted and the current element is not present in the document, the function will return false, indicating that the render was a failure.", "guessedname": "render", "guessedtype": "function"}, "onDomResize": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe DOM resize event"}, {"type": "Object", "name": "obj", "description": "\tThe scope object passed to the handler"}], "description": "Event handler fired when the resize monitor element is resized.", "guessedname": "onDomResize", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Module which are fired automatically at appropriate times by the Module class.", "guessedname": "initEvents", "guessedtype": "function"}, "setFooter": {"params": [{"type": "String", "name": "footerContent", "description": "\tThe HTML used to set the footer <em>OR<\/em>"}, {"type": "HTMLElement", "name": "footerContent", "description": "\tThe HTMLElement to append to the footer"}], "description": "Sets the Module's footer content to the HTML specified, or appends the passed element to the footer. If no footer is present, one will be automatically created.", "guessedname": "setFooter", "guessedtype": "function"}, "initResizeMonitor": {"description": "Initialized an empty IFRAME that is placed out of the visible area that can be used to detect text resize.", "guessedname": "initResizeMonitor", "guessedtype": "function"}, "appendToBody": {"params": [{"type": "HTMLElement", "name": "element", "description": "\tThe element to append to the body"}], "description": "Appends the passed element to the body. If no body is present, one will be automatically created.", "guessedname": "appendToBody", "guessedtype": "function"}, "appendToFooter": {"params": [{"type": "HTMLElement", "name": "element", "description": "\tThe element to append to the footer"}], "description": "Appends the passed element to the footer. If no footer is present, one will be automatically created.", "guessedname": "appendToFooter", "guessedtype": "function"}, "configVisible": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "Default event handler for changing the visibility property of a Module. By default, this is achieved by switching the \"display\" style between \"block\" and \"none\".\nThis method is responsible for firing showEvent and hideEvent.", "guessedname": "configVisible", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Module <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Module"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration Object literal containing the configuration that should be set for this module. See configuration documentation for more details."}], "description": "The Module class's initialization method, which is executed for Module and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Module"}, "description": "Returns a String representation of the Object.", "guessedname": "toString", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the custom events for Module which are fired automatically at appropriate times by the Module class.", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "show": {"description": "Shows the Module element by setting the visible configuration property to true. Also fires two events: beforeShowEvent prior to the visibility change, and showEvent after.", "guessedname": "show", "guessedtype": "function"}, "destroy": {"description": "Removes the Module element from the DOM and sets all child elements to null.", "guessedname": "destroy", "guessedtype": "function"}, "setHeader": {"params": [{"type": "String", "name": "headerContent", "description": "\tThe HTML used to set the header <em>OR<\/em>"}, {"type": "HTMLElement", "name": "headerContent", "description": "\tThe HTMLElement to append to the header"}], "description": "Sets the Module's header content to the HTML specified, or appends the passed element to the header. If no header is present, one will be automatically created.", "guessedname": "setHeader", "guessedtype": "function"}}, "file": "Module.js", "guessedtype": "function", "shortname": "Module", "properties": {"body": {"type": "HTMLElement", "description": "The body element, denoted with CSS class \"bd\"", "guessedname": "body", "guessedtype": "property"}, "isSecure": {"type": "Boolean", "description": "Boolean representing whether or not the current browsing context is secure (https)", "guessedname": "isSecure", "guessedtype": "function"}, "YAHOO.widget.Module.CSS_MODULE": {"description": "Constant for the default CSS class name that represents a Module", "static": "", "guessedname": "CSS_MODULE", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Module.CSS_HEADER": {"description": "Constant representing the module header", "static": "", "guessedname": "CSS_HEADER", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Module.CSS_FOOTER": {"description": "Constant representing the module footer", "static": "", "guessedname": "CSS_FOOTER", "guessedtype": "property", "type": "String", "final": ""}, "contructor": {"type": "Function", "description": "The class's constructor function", "guessedname": "constructor", "guessedtype": "property"}, "platform": {"type": "String", "description": "String representing the current user-agent platform", "guessedname": "platform", "guessedtype": "function"}, "element": {"type": "HTMLElement", "description": "The main module element that contains the header, body, and footer", "guessedname": "element", "guessedtype": "property"}, "YAHOO.widget.Module.RESIZE_MONITOR_SECURE_URL": {"description": "Constant representing the url for the \"src\" attribute of the iframe used to monitor changes to the browser's base font size", "static": "", "guessedname": "RESIZE_MONITOR_SECURE_URL", "guessedtype": "property", "type": "String", "final": ""}, "header": {"type": "HTMLElement", "description": "The header element, denoted with CSS class \"hd\"", "guessedname": "header", "guessedtype": "property"}, "YAHOO.widget.Module.IMG_ROOT": {"description": "Constant representing the prefix path to use for non-secure images", "static": "", "guessedname": "IMG_ROOT", "guessedtype": "property", "type": "String", "final": ""}, "imageRoot": {"type": "String", "description": "The String representing the image root", "guessedname": "imageRoot", "guessedtype": "property"}, "cfg": {"type": "YAHOO.util.Config", "description": "The Module's Config object used for monitoring configuration properties.", "guessedname": "cfg", "guessedtype": "property"}, "id": {"type": "String", "description": "The id of the element", "guessedname": "id", "guessedtype": "property"}, "footer": {"type": "HTMLElement", "description": "The footer element, denoted with CSS class \"ft\"", "guessedname": "footer", "guessedtype": "property"}, "YAHOO.widget.Module.IMG_ROOT_SSL": {"description": "Constant representing the prefix path to use for securely served images", "static": "", "guessedname": "IMG_ROOT_SSL", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Module.CSS_BODY": {"description": "Constant representing the module body", "static": "", "guessedname": "CSS_BODY", "guessedtype": "property", "type": "String", "final": ""}, "browser": {"type": "String", "description": "String representing the current user-agent browser", "guessedname": "browser", "guessedtype": "function"}}, "description": "Module is a JavaScript representation of the Standard Module Format. Standard Module Format is a simple standard for markup containers where child nodes representing the header, body, and footer of the content are denoted using the CSS classes \"hd\", \"bd\", and \"ft\" respectively. Module is the base class for all other classes in the YUI Container package."}, "YAHOO.util.DDTarget": {"name": "YAHOO.util.DDTarget", "constructors": [{"params": [{"type": "String", "name": "id", "description": " the id of the element that is a drop target"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop objects"}, {"type": "object", "name": "config", "description": " an object containing configurable attributes\nValid properties for DDTarget in addition to those in \nDragDrop: \nnone"}], "description": "A DragDrop implementation that does not move, but can be a drop \ntarget.  You would get the same result by simply omitting implementation \nfor the event callbacks, but this way we reduce the processing cost of the \nevent listener and the callbacks."}], "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "DDTarget", "extends": "YAHOO.util.DragDrop", "superclass": "YAHOO.util.DragDrop", "file": "DDTarget.js", "guessedtype": "function", "shortname": "DDTarget", "description": "A DragDrop implementation that does not move, but can be a drop \ntarget.  You would get the same result by simply omitting implementation \nfor the event callbacks, but this way we reduce the processing cost of the \nevent listener and the callbacks."}, "YAHOO.widget.TVFadeOut": {"name": "YAHOO.widget.TVFadeOut", "constructors": [{"params": [{"type": "HTMLElement", "name": "el", "description": "  the element to animate"}, {"type": "Function", "name": "callback", "description": "  function to invoke when the animation is finished"}], "description": "A 1\/2 second fade out animation."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "TVFadeOut", "methods": {"onComplete": {"description": "Clean up and invoke callback", "guessedname": "onComplete", "guessedtype": "function"}, "animate": {"description": "Performs the animation", "guessedname": "animate", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "the string representation of the instance"}, "description": "toString", "guessedname": "toString", "guessedtype": "function"}}, "file": "TVFadeOut.js", "guessedtype": "function", "shortname": "TVFadeOut", "properties": {"el": {"type": "HTMLElement", "description": "The element to animate", "guessedname": "el", "guessedtype": "property"}, "callback": {"type": "function", "description": "the callback to invoke when the animation is complete", "guessedname": "callback", "guessedtype": "property"}}, "description": "A 1\/2 second fade out animation."}, "YAHOO.widget.MenuModuleItem": {"name": "YAHOO.widget.MenuModuleItem", "deprecated": "As of version 0.12, all MenuModuleItem functionality has been \nimplemented directly in YAHOO.widget.MenuItem, making YAHOO.widget.MenuItem \nthe base class for all menu items.", "constructors": [{"params": [{"type": "String", "name": "p_oObject", "description": " String specifying the text of the menu module item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-\nhtml.html#ID-74680021\">HTMLLIElement<\/a>", "name": "p_oObject", "description": " Object specifying the \n<code>&#60;li&#62;<\/code> element of the menu module item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-\nhtml.html#ID-38450247\">HTMLOptGroupElement<\/a>", "name": "p_oObject", "description": " Object specifying \nthe <code>&#60;optgroup&#62;<\/code> element of the menu module item."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-\nhtml.html#ID-70901257\">HTMLOptionElement<\/a>", "name": "p_oObject", "description": " Object specifying the \n<code>&#60;option&#62;<\/code> element of the menu module item."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu module item. See configuration class documentation\nfor more details."}], "description": "Creates an item for a menu module."}], "namespace": "YAHOO.widget", "module": "menu", "guessedname": "MenuModuleItem", "file": "menumoduleitem.js", "guessedtype": "property", "shortname": "MenuModuleItem", "description": "Creates an item for a menu module."}, "YAHOO.util.ColorAnim": {"name": "YAHOO.util.ColorAnim", "constructors": [{"params": [{"type": "HTMLElement | String", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.\nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.\nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").\nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Anim subclass for color transitions.\n<p>Usage: <code>var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut);<\/code> Color values can be specified with either 112233, #112233, \n[255,255,255], or rgb(255,255,255)<\/p>"}], "namespace": "YAHOO.util", "module": "animation", "methods": {"parseColor": {"return": {"type": "Array", "description": "The 3-tuple of rgb values."}, "params": [{"type": "String", "name": "s", "description": " The string to parse."}], "description": "Attempts to parse the given string and return a 3-tuple.", "guessedname": "parseColor", "guessedtype": "function"}}, "extends": "YAHOO.util.Anim", "superclass": "YAHOO.util.Anim", "file": "ColorAnim.js", "shortname": "ColorAnim", "requires": "YAHOO.util.Anim", "description": "Anim subclass for color transitions.\n<p>Usage: <code>var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut);<\/code> Color values can be specified with either 112233, #112233, \n[255,255,255], or rgb(255,255,255)<\/p>"}, "YAHOO.util.DragDrop": {"name": "YAHOO.util.DragDrop", "constructors": [{"params": [{"type": "String", "name": "id", "description": " of the element that is linked to this instance"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop objects"}, {"type": "object", "name": "config", "description": " an object containing configurable attributes\nValid properties for DragDrop: \npadding, isTarget, maintainOffset, primaryButtonOnly"}], "description": "Defines the interface and base operation of items that that can be \ndragged or can be drop targets.  It was designed to be extended, overriding\nthe event handlers for startDrag, onDrag, onDragOver, onDragOut.\nUp to three html elements can be associated with a DragDrop instance:\n<ul>\n<li>linked element: the element that is passed into the constructor.\nThis is the element which defines the boundaries for interaction with \nother DragDrop objects.<\/li>\n<li>handle element(s): The drag operation only occurs if the element that \nwas clicked matches a handle element.  By default this is the linked \nelement, but there are times that you will want only a portion of the \nlinked element to initiate the drag operation, and the setHandleElId() \nmethod provides a way to define this.<\/li>\n<li>drag element: this represents an the element that would be moved along\nwith the cursor during a drag operation.  By default, this is the linked\nelement itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define\na separate element that would be moved, as in {@link YAHOO.util.DDProxy}\n<\/li>\n<\/ul>\nThis class should not be instantiated until the onload event to ensure that\nthe associated elements are available.\nThe following would define a DragDrop obj that would interact with any \nother DragDrop obj in the \"group1\" group:\n<pre>\ndd = new YAHOO.util.DragDrop(\"div1\", \"group1\");\n<\/pre>\nSince none of the event handlers have been implemented, nothing would \nactually happen if you were to run the code above.  Normally you would \noverride this class or one of the default implementations, but you can \nalso override the methods you want on an instance of the class...\n<pre>\ndd.onDragDrop = function(e, id) {\n&nbsp;&nbsp;alert(\"dd was dropped on \" + id);\n}\n<\/pre>"}], "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "DragDrop", "methods": {"addToGroup": {"params": [{"type": "string", "name": "sGroup", "description": "  the name of the group"}], "description": "Add this instance to a group of related drag\/drop objects.  All \ninstances belong to at least one group, and can belong to as many \ngroups as needed.", "guessedname": "addToGroup", "guessedtype": "function"}, "startDrag": {"params": [{"type": "int", "name": "X", "description": " click location"}, {"type": "int", "name": "Y", "description": " click location"}], "description": "Abstract method called after a drag\/drop object is clicked\nand the drag or mousedown time thresholds have beeen met.", "guessedname": "startDrag", "guessedtype": "function"}, "isValidHandleChild": {"return": {"type": "boolean", "description": "true if this is a valid tag type, false if not"}, "params": [{"type": "HTMLElement", "name": "node", "description": " the HTMLElement to evaluate"}], "description": "Checks the tag exclusion list to see if this click should be ignored", "guessedname": "isValidHandleChild", "guessedtype": "function"}, "b4Drag": {"private": "", "description": "Code that executes immediately before the onDrag event", "guessedname": "b4Drag", "guessedtype": "function"}, "lock": {"description": "Lock this instance", "guessedname": "lock", "guessedtype": "function"}, "onDragEnter": {"params": [{"type": "Event", "name": "e", "description": " the mousemove event"}, {"type": "String|DragDrop[]", "name": "id", "description": " In POINT mode, the element\nid this is hovering over.  In INTERSECT mode, an array of one or more \ndragdrop items being hovered over."}], "description": "Abstract method called when this element fist begins hovering over \nanother DragDrop obj", "guessedname": "onDragEnter", "guessedtype": "function"}, "b4StartDrag": {"private": "", "description": "Code that executes immediately before the startDrag event", "guessedname": "b4StartDrag", "guessedtype": "function"}, "onMouseDown": {"params": [{"type": "Event", "name": "e", "description": " the mousedown event"}], "description": "Event handler that fires when a drag\/drop obj gets a mousedown", "guessedname": "onMouseDown", "guessedtype": "function"}, "setOuterHandleElId": {"params": [{"type": "", "name": "id", "description": " the id of the element that will be used to initiate the drag"}], "description": "Allows you to set an element outside of the linked element as a drag \nhandle", "guessedname": "setOuterHandleElId", "guessedtype": "function"}, "unlock": {"description": "Unlock this instace", "guessedname": "unlock", "guessedtype": "function"}, "clearTicks": {"description": "Clears any tick interval defined for this instance", "guessedname": "clearTicks", "guessedtype": "function"}, "setStartPosition": {"guessedname": "setStartPosition", "params": [{"type": "", "name": "pos", "description": " current position (from previous lookup)"}], "description": "Sets the start position of the element.  This is set when the obj\nis initialized, the reset when a drag is started.", "private": "", "guessedtype": "function"}, "resetConstraints": {"params": [{"type": "boolean", "name": "maintainOffset", "description": ""}], "description": "resetConstraints must be called if you manually reposition a dd element.", "guessedname": "resetConstraints", "guessedtype": "function"}, "handleMouseDown": {"guessedname": "handleMouseDown", "params": [{"type": "Event", "name": "e", "description": ""}, {"type": "YAHOO.util.DragDrop", "name": "oDD", "description": " the clicked dd object (this dd obj)"}], "description": "Fired when this object is clicked", "private": "", "guessedtype": "function"}, "onDragOver": {"params": [{"type": "Event", "name": "e", "description": " the mousemove event"}, {"type": "String|DragDrop[]", "name": "id", "description": " In POINT mode, the element\nid this is hovering over.  In INTERSECT mode, an array of dd items \nbeing hovered over."}], "description": "Abstract method called when this element is hovering over another \nDragDrop obj", "guessedname": "onDragOver", "guessedtype": "function"}, "addInvalidHandleType": {"params": [{"type": "string", "name": "tagName", "description": " the type of element to exclude"}], "description": "Allows you to specify a tag name that should not start a drag operation\nwhen clicked.  This is designed to facilitate embedding links within a\ndrag handle that do something other than start the drag.", "guessedname": "addInvalidHandleType", "guessedtype": "function"}, "setDragElId": {"params": [{"type": "string", "name": "id", "description": "  the id of the element that will be used to initiate the drag"}], "description": "Allows you to specify that an element other than the linked element \nwill be moved with the cursor during a drag", "guessedname": "setDragElId", "guessedtype": "function"}, "setXConstraint": {"params": [{"type": "int", "name": "iLeft", "description": " the number of pixels the element can move to the left"}, {"type": "int", "name": "iRight", "description": " the number of pixels the element can move to the \nright"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the \nelement\nshould move iTickSize pixels at a time."}], "description": "By default, the element can be dragged any place on the screen.  Use \nthis method to limit the horizontal travel of the element.  Pass in \n0,0 for the parameters if you want to lock the drag to the y axis.", "guessedname": "setXConstraint", "guessedtype": "function"}, "getTick": {"return": {"type": "int", "description": "the closest tick"}, "description": "Normally the drag element is moved pixel by pixel, but we can specify \nthat it move a number of pixels at a time.  This method resolves the \nlocation when we have it set up like this.", "private": "", "params": [{"type": "int", "name": "val", "description": " where we want to place the object"}, {"type": "int[]", "name": "tickArray", "description": " sorted array of valid points"}], "guessedname": "getTick", "guessedtype": "function"}, "init": {"params": [{"type": "", "name": "id", "description": " the id of the linked element"}, {"type": "String", "name": "sGroup", "description": " the group of related items"}, {"type": "object", "name": "config", "description": " configuration attributes"}], "description": "Sets up the DragDrop object.  Must be called in the constructor of any\nYAHOO.util.DragDrop subclass", "guessedname": "init", "guessedtype": "function"}, "clearConstraints": {"description": "Clears any constraints applied to this instance.  Also clears ticks\nsince they can't exist independent of a constraint at this time.", "guessedname": "clearConstraints", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": "the html element"}, "description": "Returns a reference to the linked element", "guessedname": "getEl", "guessedtype": "function"}, "toString": {"return": {"type": "string", "description": "string representation of the dd obj"}, "description": "toString method", "guessedname": "toString", "guessedtype": "function"}, "onMouseUp": {"params": [{"type": "Event", "name": "e", "description": " the mouseup event"}], "description": "Event handler that fires when a drag\/drop obj gets a mouseup", "guessedname": "onMouseUp", "guessedtype": "function"}, "removeInvalidHandleType": {"params": [{"type": "string", "name": "tagName", "description": " the type of element to unexclude"}], "description": "Unsets an excluded tag name set by addInvalidHandleType", "guessedname": "removeInvalidHandleType", "guessedtype": "function"}, "setHandleElId": {"params": [{"type": "string", "name": "id", "description": "  the id of the element that will be used to \ninitiate the drag."}], "description": "Allows you to specify a child of the linked element that should be \nused to initiate the drag operation.  An example of this would be if \nyou have a content div with text and links.  Clicking anywhere in the \ncontent area would normally start the drag operation.  Use this method\nto specify that an element inside of the content div is the element \nthat starts the drag operation.", "guessedname": "setHandleElId", "guessedtype": "function"}, "onDragOut": {"params": [{"type": "Event", "name": "e", "description": " the mousemove event"}, {"type": "String|DragDrop[]", "name": "id", "description": " In POINT mode, the element\nid this was hovering over.  In INTERSECT mode, an array of dd items \nthat the mouse is no longer over."}], "description": "Abstract method called when we are no longer hovering over an element", "guessedname": "onDragOut", "guessedtype": "function"}, "onInvalidDrop": {"params": [{"type": "Event", "name": "e", "description": " the mouseup event"}], "description": "Abstract method called when this item is dropped on an area with no\ndrop target", "guessedname": "onInvalidDrop", "guessedtype": "function"}, "setInitialPosition": {"params": [{"type": "int", "name": "diffX", "description": "   the X offset, default 0"}, {"type": "int", "name": "diffY", "description": "   the Y offset, default 0"}], "description": "Stores the initial placement of the linked element.", "guessedname": "setInitPosition", "guessedtype": "function"}, "isTarget": {"type": "boolean", "description": "By default, all insances can be a drop target.  This can be disabled by\nsetting isTarget to false.", "guessedname": "isTarget", "guessedtype": "property"}, "b4DragDrop": {"private": "", "description": "Code that executes immediately before the onDragDrop event", "guessedname": "b4DragDrop", "guessedtype": "function"}, "removeFromGroup": {"params": [{"type": "string", "name": "sGroup", "description": "  The group to drop"}], "description": "Remove's this instance from the supplied interaction group", "guessedname": "removeFromGroup", "guessedtype": "function"}, "initTarget": {"params": [{"type": "", "name": "id", "description": " the id of the linked element"}, {"type": "String", "name": "sGroup", "description": " the group of related items"}, {"type": "object", "name": "config", "description": " configuration attributes"}], "description": "Initializes Targeting functionality only... the object does not\nget a mousedown handler.", "guessedname": "initTarget", "guessedtype": "function"}, "removeInvalidHandleClass": {"params": [{"type": "string", "name": "cssClass", "description": " the class of the element(s) you wish to \nre-enable"}], "description": "Unsets an invalid css class", "guessedname": "removeInvalidHandleClass", "guessedtype": "function"}, "onDragDrop": {"params": [{"type": "Event", "name": "e", "description": " the mouseup event"}, {"type": "String|DragDrop[]", "name": "id", "description": " In POINT mode, the element\nid this was dropped on.  In INTERSECT mode, an array of dd items this \nwas dropped on."}], "description": "Abstract method called when this item is dropped on another DragDrop \nobj", "guessedname": "onDragDrop", "guessedtype": "function"}, "setYTicks": {"private": "", "description": "Create the array of vertical tick marks if an interval was specified in \nsetYConstraint().", "guessedname": "setYTicks", "guessedtype": "function"}, "b4EndDrag": {"private": "", "description": "Code that executes immediately before the endDrag event", "guessedname": "b4EndDrag", "guessedtype": "function"}, "removeInvalidHandleId": {"params": [{"type": "string", "name": "id", "description": " the id of the element to re-enable"}], "description": "Unsets an invalid handle id", "guessedname": "removeInvalidHandleId", "guessedtype": "function"}, "onAvailable": {"description": "Override the onAvailable method to do what is needed after the initial\nposition was determined.", "guessedname": "onAvailable", "guessedtype": "function"}, "getDragEl": {"return": {"type": "HTMLElement", "description": "the html element"}, "description": "Returns a reference to the actual element to drag.  By default this is\nthe same as the html element, but it can be assigned to another \nelement. An example of this can be found in YAHOO.util.DDProxy", "guessedname": "getDragEl", "guessedtype": "function"}, "onDrag": {"params": [{"type": "Event", "name": "e", "description": " the mousemove event"}], "description": "Abstract method called during the onMouseMove event while dragging an \nobject.", "guessedname": "onDrag", "guessedtype": "function"}, "applyConfig": {"description": "Applies the configuration parameters that were passed into the constructor.\nThis is supposed to happen at each level through the inheritance chain.  So\na DDProxy implentation will execute apply config on DDProxy, DD, and \nDragDrop in order to get all of the parameters that are available in\neach object.", "guessedname": "applyConfig", "guessedtype": "function"}, "padding": {"type": "int[]", "description": "The padding configured for this drag and drop object for calculating\nthe drop zone intersection with this object.", "guessedname": "padding", "guessedtype": "property"}, "b4DragOver": {"private": "", "description": "Code that executes immediately before the onDragOver event", "guessedname": "b4DragOver", "guessedtype": "function"}, "setYConstraint": {"params": [{"type": "int", "name": "iUp", "description": " the number of pixels the element can move up"}, {"type": "int", "name": "iDown", "description": " the number of pixels the element can move down"}, {"type": "int", "name": "iTickSize", "description": " optional parameter for specifying that the \nelement should move iTickSize pixels at a time."}], "description": "By default, the element can be dragged any place on the screen.  Set \nthis to limit the vertical travel of the element.  Pass in 0,0 for the\nparameters if you want to lock the drag to the x axis.", "guessedname": "setYConstraint", "guessedtype": "function"}, "endDrag": {"params": [{"type": "Event", "name": "e", "description": " the mouseup event"}], "description": "Fired when we are done dragging the object", "guessedname": "endDrag", "guessedtype": "function"}, "isLocked": {"return": {"type": "boolean", "description": "true if this obj or all drag\/drop is locked, else \nfalse"}, "description": "Returns true if this instance is locked, or the drag drop mgr is locked\n(meaning that all drag\/drop is disabled on the page.)", "guessedname": "isLocked", "guessedtype": "function"}, "addInvalidHandleClass": {"params": [{"type": "string", "name": "cssClass", "description": " the class of the elements you wish to ignore"}], "description": "Lets you specify a css class of elements that will not initiate a drag", "guessedname": "addInvalidHandleClass", "guessedtype": "function"}, "handleOnAvailable": {"private": "", "description": "Executed when the linked element is available", "guessedname": "handleOnAvailable", "guessedtype": "function"}, "setPadding": {"params": [{"type": "int", "name": "iTop", "description": "    Top pad"}, {"type": "int", "name": "iRight", "description": "  Right pad"}, {"type": "int", "name": "iBot", "description": "    Bot pad"}, {"type": "int", "name": "iLeft", "description": "   Left pad"}], "description": "Configures the padding for the target zone in px.  Effectively expands\n(or reduces) the virtual object size for targeting calculations.  \nSupports css-style shorthand; if only one parameter is passed, all sides\nwill have that padding, and if only two are passed, the top and bottom\nwill have the first param, the left and right the second.", "guessedname": "setPadding", "guessedtype": "function"}, "unreg": {"description": "Remove all drag and drop hooks for this element", "guessedname": "unreg", "guessedtype": "function"}, "b4MouseDown": {"guessedname": "b4MouseDown", "params": [{"type": "Event", "name": "e", "description": " the mousedown event"}], "description": "Code executed immediately before the onMouseDown event", "private": "", "guessedtype": "function"}, "b4DragOut": {"private": "", "description": "Code that executes immediately before the onDragOut event", "guessedname": "b4DragOut", "guessedtype": "function"}, "addInvalidHandleId": {"params": [{"type": "string", "name": "id", "description": " the element id of the element you wish to ignore"}], "description": "Lets you to specify an element id for a child of a drag handle\nthat should not initiate a drag", "guessedname": "addInvalidHandleId", "guessedtype": "function"}, "setXTicks": {"private": "", "description": "Create the array of horizontal tick marks if an interval was specified\nin setXConstraint().", "guessedname": "setXTicks", "guessedtype": "function"}}, "file": "DragDrop.js", "guessedtype": "function", "shortname": "DragDrop", "properties": {"maxX": {"guessedname": "maxX", "type": "int", "description": "The right constraint", "private": "", "guessedtype": "property"}, "maxY": {"guessedname": "maxY", "type": "int", "description": "The down constraint", "private": "", "guessedtype": "property"}, "hasOuterHandles": {"default": "false", "type": "boolean", "description": "By default, drags can only be initiated if the mousedown occurs in the\nregion the linked element is.  This is done in part to work around a\nbug in some browsers that mis-report the mousedown if the previous\nmouseup happened outside of the window.  This property is set to true\nif outer handles are defined.", "guessedname": "hasOuterHandles", "guessedtype": "property"}, "yTicks": {"type": "int[]", "description": "Array of pixel locations the element will snap to if we specified a \nvertical graduation\/interval.  This array is generated automatically \nwhen you define a tick interval.", "guessedname": "yTicks", "guessedtype": "property"}, "startPageY": {"guessedname": "startPageY", "type": "int", "description": "The linked element's absolute X position at the time the drag was \nstarted", "private": "", "guessedtype": "property"}, "id": {"type": "String", "description": "The id of the element associated with this object.  This is what we \nrefer to as the \"linked element\" because the size and position of \nthis element is used to determine when the drag and drop objects have \ninteracted.", "guessedname": "id", "guessedtype": "property"}, "primaryButtonOnly": {"type": "boolean", "description": "By default the drag and drop instance will only respond to the primary\nbutton click (left button for a right-handed mouse).  Set to true to\nallow drag and drop to start with any mouse click that is propogated\nby the browser", "guessedname": "primaryButtonOnly", "guessedtype": "property"}, "__ygDragDrop": {"private": "", "description": "Internal typeof flag", "guessedname": "__ygDragDrop", "guessedtype": "property"}, "minX": {"guessedname": "minX", "type": "int", "description": "The left constraint", "private": "", "guessedtype": "property"}, "minY": {"guessedname": "minY", "type": "int", "description": "The up constraint", "private": "", "guessedtype": "property"}, "invalidHandleIds": {"type": "{string: string}", "description": "An associative array of ids for elements that will be ignored if clicked", "guessedname": "invalidHandleIds", "guessedtype": "property"}, "config": {"type": "object", "description": "Configuration attributes passed into the constructor", "guessedname": "config", "guessedtype": "property"}, "dragElId": {"guessedname": "dragElId", "type": "String", "description": "The id of the element that will be dragged.  By default this is same \nas the linked element , but could be changed to another element. Ex: \nYAHOO.util.DDProxy", "private": "", "guessedtype": "property"}, "available": {"type": "boolean", "description": "The availabe property is false until the linked dom element is accessible.", "guessedname": "available", "guessedtype": "property"}, "invalidHandleClasses": {"type": "string[]", "description": "An indexted array of css class names for elements that will be ignored\nif clicked.", "guessedname": "invalidHandleClasses", "guessedtype": "property"}, "_domRef": {"private": "", "description": "Cached reference to the linked element", "guessedname": "_domRef", "guessedtype": "property"}, "invalidHandleTypes": {"type": "{string: string}", "description": "An associative array of HTML tags that will be ignored if clicked.", "guessedname": "invalidHandleTypes", "guessedtype": "property"}, "startPageX": {"guessedname": "startPageX", "type": "int", "description": "The linked element's absolute X position at the time the drag was \nstarted", "private": "", "guessedtype": "property"}, "constrainY": {"guessedname": "constrainY", "type": "boolean", "description": "Set to true when vertical contraints are applied", "private": "", "guessedtype": "property"}, "constrainX": {"guessedname": "constrainX", "type": "boolean", "description": "Set to true when horizontal contraints are applied", "private": "", "guessedtype": "property"}, "xTicks": {"type": "int[]", "description": "Array of pixel locations the element will snap to if we specified a \nhorizontal graduation\/interval.  This array is generated automatically\nwhen you define a tick interval.", "guessedname": "xTicks", "guessedtype": "property"}, "groups": {"type": "{string: string}", "description": "The group defines a logical collection of DragDrop objects that are \nrelated.  Instances only get events when interacting with other \nDragDrop object in the same group.  This lets us define multiple \ngroups using a single DragDrop subclass if we want.", "guessedname": "groups", "guessedtype": "property"}, "locked": {"guessedname": "locked", "type": "boolean", "description": "Individual drag\/drop instances can be locked.  This will prevent \nonmousedown start drag.", "private": "", "guessedtype": "property"}, "handleElId": {"guessedname": "handleElId", "type": "String", "description": "the id of the element that initiates the drag operation.  By default \nthis is the linked element, but could be changed to be a child of this\nelement.  This lets us do things like only starting the drag when the \nheader element within the linked html element is clicked.", "private": "", "guessedtype": "property"}, "maintainOffset": {"type": "boolean", "description": "Maintain offsets when we resetconstraints.  Set to true when you want\nthe position of the element relative to its parent to stay the same\nwhen the page changes", "guessedname": "maintainOffset", "guessedtype": "property"}}, "description": "Defines the interface and base operation of items that that can be \ndragged or can be drop targets.  It was designed to be extended, overriding\nthe event handlers for startDrag, onDrag, onDragOver, onDragOut.\nUp to three html elements can be associated with a DragDrop instance:\n<ul>\n<li>linked element: the element that is passed into the constructor.\nThis is the element which defines the boundaries for interaction with \nother DragDrop objects.<\/li>\n<li>handle element(s): The drag operation only occurs if the element that \nwas clicked matches a handle element.  By default this is the linked \nelement, but there are times that you will want only a portion of the \nlinked element to initiate the drag operation, and the setHandleElId() \nmethod provides a way to define this.<\/li>\n<li>drag element: this represents an the element that would be moved along\nwith the cursor during a drag operation.  By default, this is the linked\nelement itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define\na separate element that would be moved, as in {@link YAHOO.util.DDProxy}\n<\/li>\n<\/ul>\nThis class should not be instantiated until the onload event to ensure that\nthe associated elements are available.\nThe following would define a DragDrop obj that would interact with any \nother DragDrop obj in the \"group1\" group:\n<pre>\ndd = new YAHOO.util.DragDrop(\"div1\", \"group1\");\n<\/pre>\nSince none of the event handlers have been implemented, nothing would \nactually happen if you were to run the code above.  Normally you would \noverride this class or one of the default implementations, but you can \nalso override the methods you want on an instance of the class...\n<pre>\ndd.onDragDrop = function(e, id) {\n&nbsp;&nbsp;alert(\"dd was dropped on \" + id);\n}\n<\/pre>"}, "YAHOO.widget.LogReader": {"name": "YAHOO.widget.LogReader", "constructors": [{"params": [{"type": "HTMLElement", "name": "elContainer", "description": "  (optional) DOM element reference of an existing DIV."}, {"type": "String", "name": "elContainer", "description": "  (optional) String ID of an existing DIV."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of configuration params."}], "description": "The LogReader class provides UI to read messages logged to YAHOO.widget.Logger."}], "namespace": "YAHOO.widget", "module": "logger", "guessedname": "LogReader", "methods": {"getLastTime": {"return": {"type": "Date", "description": "Timestamp of the last log."}, "description": "Gets timestamp of the last log.", "guessedname": "getLastTime", "guessedtype": "function"}, "_onReset": {"guessedname": "_onReset", "params": [{"type": "String", "name": "sType", "description": "  The event."}, {"type": "Object[]", "name": "aArgs", "description": "  Data passed from event firer."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles Logger's resetEvent.", "private": "", "guessedtype": "function"}, "show": {"description": "Shows UI of log reader. Logging functionality is not disrupted.", "guessedname": "show", "guessedtype": "function"}, "setTitle": {"params": [{"type": "String", "name": "sTitle", "description": "  New title."}], "description": "Updates title to given string.", "guessedname": "setTitle", "guessedtype": "function"}, "_clearConsole": {"private": "", "description": "Clears all outputted log messages from the console and resets the time of the\r\nlast output log message.", "guessedname": "_clearConsole", "guessedtype": "function"}, "_createSourceCheckbox": {"guessedname": "_createSourceCheckbox", "params": [{"type": "String", "name": "sSource", "description": "  Source name."}], "description": "Creates a checkbox in the log reader footer element to filter by source.", "private": "", "guessedtype": "function"}, "_onClickPauseBtn": {"guessedname": "_onClickPauseBtn", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles click events on the pause button.", "private": "", "guessedtype": "function"}, "pause": {"description": "Pauses output of log messages. While paused, log messages are not lost, but\r\nget saved to a buffer and then output upon resume of log reader.", "guessedname": "pause", "guessedtype": "function"}, "hide": {"description": "Hides UI of log reader. Logging functionality is not disrupted.", "guessedname": "hide", "guessedtype": "function"}, "_printToConsole": {"guessedname": "_printToConsole", "params": [{"type": "Object[]", "name": "aEntries", "description": "  Array of LogMsg objects to output to console."}], "description": "Cycles through an array of log messages, and outputs each one to the console\r\nif its category has not been filtered out.", "private": "", "guessedtype": "function"}, "_printBuffer": {"private": "", "description": "Sends buffer of log messages to output and clears buffer.", "guessedname": "_printBuffer", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the LogReader instance."}, "description": "Public accessor to the unique name of the LogReader instance.", "guessedname": "toString", "guessedtype": "function"}, "_onClickCollapseBtn": {"guessedname": "_onClickCollapseBtn", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance"}], "description": "Handles click events on the collapse button.", "private": "", "guessedtype": "function"}, "_onCategoryCreate": {"guessedname": "_onCategoryCreate", "params": [{"type": "String", "name": "sType", "description": "  The event."}, {"type": "Object[]", "name": "aArgs", "description": "  Data passed from event firer."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles Logger's categoryCreateEvent.", "private": "", "guessedtype": "function"}, "_onClickClearBtn": {"guessedname": "_onClickClearBtn", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles click events on the clear button.", "private": "", "guessedtype": "function"}, "resume": {"description": "Resumes output of log messages, including outputting any log messages that\r\nhave been saved to buffer while paused.", "guessedname": "resume", "guessedtype": "function"}, "_onSourceCreate": {"guessedname": "_onSourceCreate", "params": [{"type": "String", "name": "sType", "description": "  The event."}, {"type": "Object[]", "name": "aArgs", "description": "  Data passed from event firer."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles Logger's sourceCreateEvent.", "private": "", "guessedtype": "function"}, "_onNewLog": {"guessedname": "_onNewLog", "params": [{"type": "String", "name": "sType", "description": "  The event."}, {"type": "Object[]", "name": "aArgs", "description": "  Data passed from event firer."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles Logger's newLogEvent.", "private": "", "guessedtype": "function"}, "html2Text": {"guessedname": "html2Text", "params": [{"type": "String", "name": "sHtml", "description": "  String to convert."}], "description": "Converts input chars \"<\", \">\", and \"&\" to HTML entities.", "private": "", "guessedtype": "function"}, "_filterLogs": {"private": "", "description": "Reprints all log messages in the stack through filters.", "guessedname": "_filterLogs", "guessedtype": "function"}, "_onCheckCategory": {"guessedname": "_onCheckCategory", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The LogReader instance."}], "description": "Handles check events on the category filter checkboxes.", "private": "", "guessedtype": "function"}, "_onCheckSource": {"guessedname": "_onCheckSource", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "Object", "name": "oSelf", "description": "  The log reader instance."}], "description": "Handles check events on the category filter checkboxes.", "private": "", "guessedtype": "function"}, "formatMsg": {"return": {"type": "String", "description": "HTML-formatted message for output to console."}, "params": [{"type": "Object", "name": "oLogMsg", "description": "  Log message object."}], "description": "Formats message string to HTML for output to console.", "guessedname": "formatMsg", "guessedtype": "function"}, "_createCategoryCheckbox": {"guessedname": "_createCategoryCheckbox", "params": [{"type": "String", "name": "sCategory", "description": "  Category name."}], "description": "Creates the UI for a category filter in the log reader footer element.", "private": "", "guessedtype": "function"}}, "file": "LogReader.js", "guessedtype": "function", "shortname": "LogReader", "properties": {"right": {"type": "String", "description": "Public member to access CSS right position of the log reader container.", "guessedname": "right", "guessedtype": "property"}, "height": {"type": "String", "description": "Public member to access CSS height of the log reader container.", "guessedname": "height", "guessedtype": "property"}, "newestOnTop": {"type": "Boolean", "description": "Whether or not newest message is printed on top.", "guessedname": "newestOnTop", "guessedtype": "property"}, "_elCollapse": {"guessedname": "_elCollapse", "type": "HTMLElement", "description": "Log reader collapse element.", "private": "", "guessedtype": "property"}, "_elCategoryFilters": {"guessedname": "_elCategoryFilters", "type": "HTMLElement", "description": "Container element for log reader category filter checkboxes.", "private": "", "guessedtype": "property"}, "_memberName": {"description": "Internal class member to index multiple log reader instances.", "default": "0", "private": "", "static": "", "guessedname": "_index", "guessedtype": "property", "type": "Number"}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Name of LogReader instance.", "private": "", "guessedtype": "property"}, "logReaderEnabled": {"default": "true", "type": "Boolean", "description": "Whether or not the log reader is enabled to output log messages.", "guessedname": "logReaderEnabled", "guessedtype": "property"}, "thresholdMax": {"default": "500", "type": "Number", "description": "Maximum number of messages a LogReader console will display.", "guessedname": "thresholdMax", "guessedtype": "property"}, "_buffer": {"guessedname": "_buffer", "type": "Object[]", "description": "Buffer of log message objects for batch output.", "private": "", "guessedtype": "property"}, "bottom": {"type": "String", "description": "Public member to access CSS bottom position of the log reader container.", "guessedname": "bottom", "guessedtype": "property"}, "_elBtns": {"guessedname": "_elBtns", "type": "HTMLElement", "description": "Log reader buttons container element.", "private": "", "guessedtype": "property"}, "_btnClear": {"guessedname": "_btnClear", "type": "HTMLElement", "description": "Clear button element.", "private": "", "guessedtype": "property"}, "top": {"type": "String", "description": "Public member to access CSS top position of the log reader container.", "guessedname": "top", "guessedtype": "property"}, "_btnPause": {"guessedname": "_btnPause", "type": "HTMLElement", "description": "Log reader pause button element.", "private": "", "guessedtype": "property"}, "_elContainer": {"guessedname": "_elContainer", "type": "HTMLElement", "description": "Log reader container element.", "private": "", "guessedtype": "property"}, "_lastTime": {"guessedname": "_lastTime", "type": "Date", "description": "Date of last output log message.", "private": "", "guessedtype": "property"}, "fontSize": {"type": "String", "description": "Public member to access CSS font size of the log reader container.", "guessedname": "fontSize", "guessedtype": "property"}, "footerEnabled": {"default": "true", "type": "Boolean", "description": "Whether or not the footer UI is enabled for the log reader.", "guessedname": "footerEnabled", "guessedtype": "property"}, "verboseOutput": {"default": "true", "type": "Boolean", "description": "Whether or not output is verbose (more readable). Setting to true will make\r\noutput more compact (less readable).", "guessedname": "verboseOutput", "guessedtype": "property"}, "_sourceFilters": {"guessedname": "_sourceFilters", "type": "String[]", "description": "Array of filters for log message sources.", "private": "", "guessedtype": "property"}, "_categoryFilters": {"guessedname": "_categoryFilters", "type": "String[]", "description": "Array of filters for log message categories.", "private": "", "guessedtype": "property"}, "_consoleMsgCount": {"description": "Number of log messages output to console.", "default": "0", "private": "", "guessedname": "_consoleMsgCount", "guessedtype": "property", "type": "Number"}, "_elSourceFilters": {"guessedname": "_elSourceFilters", "type": "HTMLElement", "description": "Container element for log reader source filter checkboxes.", "private": "", "guessedtype": "property"}, "thresholdMin": {"default": "100", "type": "Number", "description": "When a LogReader console reaches its thresholdMax, it will clear out messages\r\nand print out the latest thresholdMin number of messages.", "guessedname": "thresholdMin", "guessedtype": "property"}, "_title": {"guessedname": "_title", "type": "HTMLElement", "description": "Log reader title header element.", "private": "", "guessedtype": "property"}, "_elDefaultContainer": {"guessedname": "_elDefaultContainer", "type": "HTMLElement", "description": "A class member shared by all log readers if a container needs to be\r\ncreated during instantiation. Will be null if a container element never needs to\r\nbe created on the fly, such as when the implementer passes in their own element.", "private": "", "guessedtype": "property"}, "_elFt": {"guessedname": "_elFt", "type": "HTMLElement", "description": "Log reader footer element.", "private": "", "guessedtype": "property"}, "_elHd": {"guessedname": "_elHd", "type": "HTMLElement", "description": "Log reader header element.", "private": "", "guessedtype": "property"}, "_elConsole": {"guessedname": "_elConsole", "type": "HTMLElement", "description": "Log reader console element.", "private": "", "guessedtype": "property"}, "_btnCollapse": {"guessedname": "_btnCollapse", "type": "HTMLElement", "description": "Log reader collapse button element.", "private": "", "guessedtype": "property"}, "_timeout": {"guessedname": "_timeout", "type": "Number", "description": "Batched output timeout ID.", "private": "", "guessedtype": "property"}, "width": {"type": "String", "description": "Public member to access CSS width of the log reader container.", "guessedname": "width", "guessedtype": "property"}, "left": {"type": "String", "description": "Public member to access CSS left position of the log reader container.", "guessedname": "left", "guessedtype": "property"}}, "description": "The LogReader class provides UI to read messages logged to YAHOO.widget.Logger."}, "YAHOO.widget.SimpleDialog": {"name": "YAHOO.widget.SimpleDialog", "configs": {"text": {"default": "\"\"", "type": "String", "description": "Sets the text for the SimpleDialog", "guessedname": "value", "guessedtype": "property"}, "icon": {"default": "\"none\"", "type": "String", "description": "Sets the informational icon for the SimpleDialog", "guessedname": "value", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the SimpleDialog <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the SimpleDialog"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this SimpleDialog. See configuration documentation for more details."}], "description": "SimpleDialog is a simple implementation of Dialog that can be used to submit a single value. Forms can be processed in 3 ways -- via an asynchronous Connection utility call, a simple form POST or GET, or manually."}], "namespace": "YAHOO.widget", "module": "container", "guessedname": "SimpleDialog", "methods": {"configIcon": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "Fired when the \"icon\" property is set.", "guessedname": "configIcon", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the SimpleDialog <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the SimpleDialog"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this SimpleDialog. See configuration documentation for more details."}], "description": "The SimpleDialog initialization method, which is executed for SimpleDialog and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the SimpleDialog"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "configText": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "Fired when the \"text\" property is set.", "guessedname": "configText", "guessedtype": "function"}, "registerForm": {"description": "Prepares the SimpleDialog's internal FORM object, creating one if one is not currently present, and adding the value hidden field.", "guessedname": "registerForm", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed using the SimpleDialog's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Dialog", "superclass": "YAHOO.widget.Dialog", "file": "SimpleDialog.js", "guessedtype": "function", "shortname": "SimpleDialog", "properties": {"YAHOO.widget.SimpleDialog.CSS_SIMPLEDIALOG": {"description": "Constant representing the default CSS class used for a SimpleDialog", "static": "", "guessedname": "CSS_SIMPLEDIALOG", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_INFO": {"description": "Constant for the standard network icon for info", "static": "", "guessedname": "ICON_INFO", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_BLOCK": {"description": "Constant for the standard network icon for a blocking action", "static": "", "guessedname": "ICON_BLOCK", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_WARN": {"description": "Constant for the standard network icon for warn", "static": "", "guessedname": "ICON_WARN", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_ALARM": {"description": "Constant for the standard network icon for alarm", "static": "", "guessedname": "ICON_ALARM", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_TIP": {"description": "Constant for the standard network icon for a tip", "static": "", "guessedname": "ICON_TIP", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_HELP": {"description": "Constant for the standard network icon for help", "static": "", "guessedname": "ICON_HELP", "guessedtype": "property", "type": "String", "final": ""}}, "description": "SimpleDialog is a simple implementation of Dialog that can be used to submit a single value. Forms can be processed in 3 ways -- via an asynchronous Connection utility call, a simple form POST or GET, or manually."}, "YAHOO.widget.DS_XHR": {"name": "YAHOO.widget.DS_XHR", "constructors": [{"params": [{"type": "String", "name": "sScriptURI", "description": "  Absolute or relative URI to script that returns query\r\nresults as JSON, XML, or delimited flat-file data."}, {"type": "String[]", "name": "aSchema", "description": "  Data schema definition of results."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of config params."}], "description": "Implementation of YAHOO.widget.DataSource using XML HTTP requests that return\r\nquery results."}], "namespace": "YAHOO.widget", "module": "autocomplete", "guessedname": "DS_XHR", "methods": {"parseResponse": {"returns": "{Object[]} Array of result objects.", "params": [{"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oResponse", "description": "  The raw response data to parse."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Parses raw response data into an array of result objects. The result data key\r\nis always stashed in the [0] element of each result object.", "guessedname": "parseResponse", "guessedtype": "function"}, "doQuery": {"params": [{"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function defined by oParent object to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Queries the live data source defined by scriptURI for results. Results are\r\npassed back to a callback function.", "guessedname": "doQuery", "guessedtype": "function"}}, "extends": "YAHOO.widget.DataSource", "superclass": "YAHOO.widget.DataSource", "file": "DataSource.js", "guessedtype": "function", "shortname": "DS_XHR", "requires": "connection", "properties": {"responseType": {"default": "YAHOO.widget.DS_XHR.TYPE_JSON", "type": "String", "description": "XHR response data type. Other types that may be defined are YAHOO.widget.DS_XHR.TYPE_XML\r\nand YAHOO.widget.DS_XHR.TYPE_FLAT.", "guessedname": "responseType", "guessedtype": "property"}, "scriptQueryAppend": {"default": "\"\"", "type": "String", "description": "String of key\/value pairs to append to requests made to scriptURI. Define\r\nthis string when you want to send additional query parameters to your script.\r\nWhen defined, queries will be sent to\r\n&#60;scriptURI&#62;?&#60;scriptQueryParam&#62;=userinput&#38;&#60;scriptQueryAppend&#62;", "guessedname": "scriptQueryAppend", "guessedtype": "property"}, "responseStripAfter": {"default": "\"\\n&#60;!-\"", "type": "String", "description": "String after which to strip results. If the results from the XHR are sent\r\nback as HTML, the gzip HTML comment appears at the end of the data and should\r\nbe ignored.", "guessedname": "responseStripAfter", "guessedtype": "property"}, "TYPE_XML": {"description": "XML data type.", "static": "", "guessedname": "TYPE_XML", "guessedtype": "property", "type": "Number", "final": ""}, "scriptURI": {"type": "String", "description": "Absolute or relative URI to script that returns query results. For instance,\r\nqueries will be sent to &#60;scriptURI&#62;?&#60;scriptQueryParam&#62;=userinput", "guessedname": "scriptURI", "guessedtype": "property"}, "connTimeout": {"default": "0", "type": "Number", "description": "Number of milliseconds the XHR connection will wait for a server response. A\r\na value of zero indicates the XHR connection will wait forever. Any value\r\ngreater than zero will use the Connection utility's Auto-Abort feature.", "guessedname": "connTimeout", "guessedtype": "property"}, "_oConn": {"guessedname": "_oConn", "type": "Object", "description": "XHR connection object.", "private": "", "guessedtype": "property"}, "ERROR_DATAXHR": {"description": "Error message for XHR failure.", "static": "", "guessedname": "ERROR_DATAXHR", "guessedtype": "property", "type": "String", "final": ""}, "TYPE_FLAT": {"description": "Flat-file data type.", "static": "", "guessedname": "TYPE_FLAT", "guessedtype": "property", "type": "Number", "final": ""}, "TYPE_JSON": {"description": "JSON data type.", "static": "", "guessedname": "TYPE_JSON", "guessedtype": "property", "type": "Number", "final": ""}, "scriptQueryParam": {"default": "\"query\"", "type": "String", "description": "Query string parameter name sent to scriptURI. For instance, queries will be\r\nsent to &#60;scriptURI&#62;?&#60;scriptQueryParam&#62;=userinput", "guessedname": "scriptQueryParam", "guessedtype": "property"}, "connMgr": {"default": "YAHOO.util.Connect", "type": "Object", "description": "Alias to YUI Connection Manager. Allows implementers to specify their own\r\nsubclasses of the YUI Connection Manager utility.", "guessedname": "connMgr", "guessedtype": "property"}}, "description": "Implementation of YAHOO.widget.DataSource using XML HTTP requests that return\r\nquery results."}, "YAHOO": {"name": "YAHOO", "namespace": "", "module": "yahoo", "guessedname": "YAHOO", "methods": {"augment": {"static": "", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "String*", "name": "arguments", "description": " zero or more properties methods to augment the\nreceiver with.  If none specified, everything\nin the supplier will be used unless it would\noverwrite an existing property in the receiver"}], "description": "Applies all prototype properties in the supplier to the receiver if the\nreceiver does not have these properties yet.  Optionally, one or more\nmethods\/properties can be specified (as additional parameters).  This\noption will overwrite the property if receiver has it already.", "guessedname": "augment", "guessedtype": "function"}, "namespace": {"return": {"type": "Object", "description": "A reference to the last namespace object created"}, "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nYAHOO.namespace(\"property.package\");\nYAHOO.namespace(\"YAHOO.property.package\");\n<\/pre>\nEither of the above would create YAHOO.property, then\nYAHOO.property.package\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nYAHOO.namespace(\"really.long.nested.namespace\");\n<\/pre>\nThis fails because \"long\" is a future reserved word in ECMAScript", "static": "", "guessedname": "namespace", "guessedtype": "function", "params": [{"type": "String*", "name": "arguments", "description": " 1-n namespaces to create"}]}, "log": {"return": {"type": "Boolean", "description": "True if the log operation was successful."}, "description": "Uses YAHOO.widget.Logger to output a log message, if the widget is available.", "static": "", "guessedname": "log", "guessedtype": "function", "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)"}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)"}]}, "extend": {"static": "", "params": [{"type": "Function", "name": "subc", "description": "   the object to modify"}, {"type": "Function", "name": "superc", "description": " the object to inherit"}, {"type": "String[]", "name": "overrides", "description": "  additional properties\/methods to add to the\nsubclass prototype.  These will override the\nmatching items obtained from the superclass \nif present."}], "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.", "guessedname": "extend", "guessedtype": "function"}}, "static": "", "file": "YAHOO.js", "guessedtype": "property", "shortname": "YAHOO", "description": "The YAHOO global namespace object"}, "YAHOO.widget.Logger": {"name": "YAHOO.widget.Logger", "namespace": "YAHOO.widget", "module": "logger", "guessedname": "Logger", "methods": {"reset": {"description": "Resets internal stack and startTime, enables Logger, and fires logResetEvent.", "guessedname": "reset", "guessedtype": "function"}, "_isNewSource": {"return": {"type": "Boolean", "description": "Returns true if source is unknown, else returns false."}, "description": "Checks to see if a source already exists.", "private": "", "params": [{"type": "String", "name": "sSource", "description": "  Source name."}], "guessedname": "_isNewSource", "guessedtype": "function"}, "getStack": {"return": {"type": "Object[]", "description": "Array of log message objects."}, "description": "Public accessor to internal stack of log message objects.", "guessedname": "getStack", "guessedtype": "function"}, "log": {"params": [{"type": "String", "name": "sMsg", "description": "  The log message."}, {"type": "String", "name": "sCategory", "description": "  Category of log message, or null."}, {"type": "String", "name": "sSource", "description": "  Source of LogWriter, or null if global."}], "description": "Saves a log message to the stack and fires newLogEvent. If the log message is\r\nassigned to an unknown category, creates a new category. If the log message is\r\nfrom an unknown source, creates a new source.  If browser console is enabled,\r\noutputs the log message to browser console.", "guessedname": "log", "guessedtype": "function"}, "_onWindowError": {"guessedname": "_onWindowError", "params": [{"type": "String", "name": "sMsg", "description": "  The error message."}, {"type": "String", "name": "sUrl", "description": "  URL of the error."}, {"type": "String", "name": "sLine", "description": "  Line number of the error."}], "description": "Handles logging of messages due to window error events.", "private": "", "guessedtype": "function"}, "_isNewCategory": {"return": {"type": "Boolean", "description": "Returns true if category is unknown, else returns false."}, "description": "Checks to see if a category has already been created.", "private": "", "params": [{"type": "String", "name": "sCategory", "description": "  Category name."}], "guessedname": "_isNewCategory", "guessedtype": "function"}, "_createNewCategory": {"guessedname": "_createNewCategory", "params": [{"type": "String", "name": "sCategory", "description": "  Category name."}], "description": "Creates a new category of log messages and fires categoryCreateEvent.", "private": "", "guessedtype": "function"}, "_printToBrowserConsole": {"guessedname": "_printToBrowserConsole", "params": [{"type": "Object", "name": "oEntry", "description": "  Log entry object."}], "description": "Outputs a log message to global console.log() function.", "private": "", "guessedtype": "function"}, "_createNewSource": {"guessedname": "_createNewSource", "params": [{"type": "String", "name": "sSource", "description": "  Source name."}], "description": "Creates a new source of log messages and fires sourceCreateEvent.", "private": "", "guessedtype": "function"}, "enableBrowserConsole": {"description": "Enables output to the browser's global console.log() function, which is used\r\nby the Firebug extension to Firefox as well as Safari.", "guessedname": "enableBrowserConsole", "guessedtype": "function"}, "disableBrowserConsole": {"description": "Disables output to the browser's global console.log() function, which is used\r\nby the Firebug extension to Firefox as well as Safari.", "guessedname": "disableBrowserConsole", "guessedtype": "function"}, "getStartTime": {"return": {"type": "Date", "description": "Internal date of when Logger singleton was initialized."}, "description": "Public accessor to internal start time.", "guessedname": "getStartTime", "guessedtype": "function"}}, "static": "", "file": "Logger.js", "guessedtype": "property", "shortname": "Logger", "events": {"logResetEvent": {"description": "Fired when the Logger has been reset has been created.", "guessedname": "logResetEvent", "guessedtype": "property"}, "newLogEvent": {"params": [{"type": "String", "name": "sMsg", "description": "  Log message."}], "description": "Fired when a new log message has been created.", "guessedname": "newLogEvent", "guessedtype": "property"}, "sourceCreateEvent": {"params": [{"type": "String", "name": "sSource", "description": "  Source name."}], "description": "Fired when a new source has been named.", "guessedname": "sourceCreateEvent", "guessedtype": "property"}, "categoryCreateEvent": {"params": [{"type": "String", "name": "sCategory", "description": "  Category name."}], "description": "Fired when a new category has been created.", "guessedname": "categoryCreateEvent", "guessedtype": "property"}}, "description": "The singleton Logger class provides core log management functionality. Saves\r\nlogs written through the global YAHOO.log function or written by a LogWriter\r\ninstance. Provides access to logs for reading by a LogReader instance or\r\nnative browser console such as the Firebug extension to Firefox or Safari's\r\nJavaScript console through integration with the console.log() method."}, "YAHOO.util.Anim": {"name": "YAHOO.util.Anim", "constructors": [{"params": [{"type": "String | HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Base animation class that provides the interface for building animated effects.\n<p>Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);<\/p>"}], "namespace": "YAHOO.util", "module": "animation", "events": {"onComplete": {"description": "Custom event that fires when animation ends\nListen via subscribe method (e.g. myAnim.onComplete.subscribe(someFunction)", "guessedname": "onComplete", "guessedtype": "property"}, "onStart": {"description": "Custom event that fires when animation begins\nListen via subscribe method (e.g. myAnim.onStart.subscribe(someFunction)", "guessedname": "onStart", "guessedtype": "property"}, "onTween": {"description": "Custom event that fires between each frame\nListen via subscribe method (e.g. myAnim.onTween.subscribe(someFunction)", "guessedname": "onTween", "guessedtype": "property"}}, "guessedname": "Anim", "methods": {"isAnimated": {"return": {"type": "Boolean", "description": "current value of isAnimated."}, "description": "Checks whether the element is currently animated.", "guessedname": "isAnimated", "guessedtype": "function"}, "setRuntimeAttribute\nShould only be needed for subclass use.": {"guessedname": "setRuntimeAttribute", "params": [{"type": "Object", "name": "attr", "description": " The attribute object"}], "description": "Sets the actual values to be used during the animation.", "private": "", "guessedtype": "function"}, "getAttribute": {"return": {"type": "Number", "description": "val The current value of the attribute."}, "params": [{"type": "String", "name": "attr", "description": " The name of the attribute."}], "description": "Returns current value of the attribute.", "guessedname": "getAttribute", "guessedtype": "function"}, "setAttribute": {"params": [{"type": "String", "name": "attr", "description": " The name of the attribute."}, {"type": "Number", "name": "val", "description": " The value to be applied to the attribute."}, {"type": "String", "name": "unit", "description": " The unit ('px', '%', etc.) of the value."}], "description": "Applies a value to an attribute.", "guessedname": "setAttribute", "guessedtype": "function"}, "onTween": {"private": "", "description": "Feeds the starting and ending values for each animated attribute to doMethod once per frame, then applies the resulting value to the attribute(s).", "guessedname": "onTween", "guessedtype": "function"}, "doMethod": {"return": {"type": "Number", "description": "The Value to be applied to the attribute."}, "params": [{"type": "String", "name": "attr", "description": " The name of the attribute."}, {"type": "Number", "name": "start", "description": " The value this attribute should start from for this animation."}, {"type": "Number", "name": "end", "description": "  The value this attribute should end at for this animation."}], "description": "Returns the value computed by the animation's \"method\".", "guessedname": "doMethod", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": ""}, "description": "Returns a reference to the animated element.", "guessedname": "getEl", "guessedtype": "function"}, "stop": {"params": [{"type": "Boolean", "name": "finish", "description": " (optional) If true, animation will jump to final frame."}], "description": "Stops the animation.  Normally called by AnimMgr when animation completes.", "guessedname": "stop", "guessedtype": "function"}, "init": {"params": [{"type": "String | HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Constructor for Anim instance.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Provides a readable name for the Anim instance.", "guessedname": "toString", "guessedtype": "function"}, "getDefaultUnit": {"return": {"type": "String", "description": "The default unit to be used."}, "params": [{"type": "attr", "name": "attr", "description": " The name of the attribute."}], "description": "Returns the unit to use when none is supplied.", "guessedname": "getDefaultUnit", "guessedtype": "function"}, "animate": {"description": "Starts the animation by registering it with the animation manager.", "guessedname": "animate", "guessedtype": "function"}, "getStartTime": {"return": {"type": "Date", "description": "current value of startTime."}, "description": "Returns the animation start time.", "guessedname": "getStartTime", "guessedtype": "function"}}, "file": "Anim.js", "guessedtype": "function", "shortname": "Anim", "requires": "YAHOO.util.AnimMgr", "properties": {"isAnimated": {"guessedname": "isAnimated", "type": "Boolean", "description": "Whether or not the animation is running.", "private": "", "guessedtype": "property"}, "_onTween": {"private": "", "description": "Custom event that fires after onTween", "guessedname": "_onTween", "guessedtype": "property"}, "el": {"guessedname": "el", "type": "HTMLElement", "description": "The element to be animated.", "private": "", "guessedtype": "property"}, "actualFrames": {"guessedname": "actualFrames", "type": "Int", "description": "The number of frames this animation was able to execute.", "private": "", "guessedtype": "property"}, "useSeconds": {"type": "Boolean", "description": "Whether or not the duration should be treated as seconds.\nDefaults to true.", "guessedname": "useSeconds", "guessedtype": "property"}, "totalFrames": {"type": "Int", "description": "The total number of frames to be executed.\nIn time-based animations, this is used by AnimMgr to ensure the animation finishes on time.", "guessedname": "totalFrames", "guessedtype": "property"}, "_onStart": {"private": "", "description": "Custom event that fires after onStart, useful in subclassing", "guessedname": "_onStart", "guessedtype": "property"}, "_onComplete": {"private": "", "description": "Custom event that fires after onComplete", "guessedname": "_onComplete", "guessedtype": "property"}, "startTime": {"guessedname": "startTime", "type": "Date", "description": "A Date object that is created when the animation begins.", "private": "", "guessedtype": "property"}, "duration": {"type": "Number", "description": "The length of the animation.  Defaults to \"1\" (second).", "guessedname": "duration", "guessedtype": "property"}, "attributes": {"type": "Object", "description": "The collection of attributes to be animated.  \nEach attribute must have at least a \"to\" or \"by\" defined in order to animate.  \nIf \"to\" is supplied, the animation will end with the attribute at that value.  \nIf \"by\" is supplied, the animation will end at that value plus its starting value. \nIf both are supplied, \"to\" is used, and \"by\" is ignored. \nOptional additional member include \"from\" (the value the attribute should start animating from, defaults to current value), and \"unit\" (the units to apply to the values).", "guessedname": "attributes", "guessedtype": "property"}, "method": {"type": "Function", "description": "The method that will provide values to the attribute(s) during the animation. \nDefaults to \"YAHOO.util.Easing.easeNone\".", "guessedname": "method", "guessedtype": "property"}, "currentFrame": {"type": "Int", "description": "The location of the current animation on the timeline.\nIn time-based animations, this is used by AnimMgr to ensure the animation finishes on time.", "guessedname": "currentFrame", "guessedtype": "property"}}, "description": "Base animation class that provides the interface for building animated effects.\n<p>Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);<\/p>"}, "YAHOO.util.DDProxy": {"name": "YAHOO.util.DDProxy", "constructors": [{"params": [{"type": "String", "name": "id", "description": " the id of the linked html element"}, {"type": "String", "name": "sGroup", "description": " the group of related DragDrop objects"}, {"type": "object", "name": "config", "description": " an object containing configurable attributes\nValid properties for DDProxy in addition to those in DragDrop: \nresizeFrame, centerFrame, dragElId"}], "description": "A DragDrop implementation that inserts an empty, bordered div into\nthe document that follows the cursor during drag operations.  At the time of\nthe click, the frame div is resized to the dimensions of the linked html\nelement, and moved to the exact location of the linked element.\nReferences to the \"frame\" element refer to the single proxy element that\nwas created to be dragged in place of all DDProxy elements on the\npage."}], "namespace": "YAHOO.util", "module": "dragdrop", "guessedname": "DDProxy", "methods": {"createFrame": {"description": "Creates the proxy element if it does not yet exist", "guessedname": "createFrame", "guessedtype": "function"}, "initFrame": {"description": "Initialization for the drag frame element.  Must be called in the\nconstructor of all subclasses", "guessedname": "initFrame", "guessedtype": "function"}, "_resizeProxy": {"private": "", "description": "The proxy is automatically resized to the dimensions of the linked\nelement when a drag is initiated, unless resizeFrame is set to false", "guessedname": "_resizeProxy", "guessedtype": "function"}, "showFrame": {"guessedname": "showFrame", "params": [{"type": "int", "name": "iPageX", "description": " X click position"}, {"type": "int", "name": "iPageY", "description": " Y click position"}], "description": "Resizes the drag frame to the dimensions of the clicked object, positions \nit over the object, and finally displays it", "private": "", "guessedtype": "function"}}, "extends": "YAHOO.util.DD", "superclass": "YAHOO.util.DD", "file": "DDProxy.js", "guessedtype": "function", "shortname": "DDProxy", "properties": {"YAHOO.util.DDProxy.dragElId": {"type": "String", "static": "", "description": "The default drag frame div id", "guessedname": "dragElId", "guessedtype": "property"}, "resizeFrame": {"type": "boolean", "description": "By default we resize the drag frame to be the same size as the element\nwe want to drag (this is to get the frame effect).  We can turn it off\nif we want a different behavior.", "guessedname": "resizeFrame", "guessedtype": "property"}, "centerFrame": {"type": "boolean", "description": "By default the frame is positioned exactly where the drag element is, so\nwe use the cursor offset provided by YAHOO.util.DD.  Another option that works only if\nyou do not have constraints on the obj is to have the drag frame centered\naround the cursor.  Set centerFrame to true for this effect.", "guessedname": "centerFrame", "guessedtype": "property"}}, "description": "A DragDrop implementation that inserts an empty, bordered div into\nthe document that follows the cursor during drag operations.  At the time of\nthe click, the frame div is resized to the dimensions of the linked html\nelement, and moved to the exact location of the linked element.\nReferences to the \"frame\" element refer to the single proxy element that\nwas created to be dragged in place of all DDProxy elements on the\npage."}, "YAHOO.widget.Overlay": {"name": "YAHOO.widget.Overlay", "configs": {"iframe": {"default": "true for IE6 and below, false for all others", "type": "Boolean", "description": "True if the Overlay should have an IFRAME shim (for correcting the select z-index bug in IE6 and below).", "guessedname": "value", "guessedtype": "property"}, "constraintoviewport": {"default": "false", "type": "Boolean", "description": "True if the Overlay should be prevented from being positioned out of the viewport.", "guessedname": "value", "guessedtype": "property"}, "height": {"default": "null", "type": "String", "description": "CSS height of the Overlay.", "guessedname": "handler", "guessedtype": "property"}, "zIndex": {"default": "null", "type": "Number", "description": "CSS z-index of the Overlay.", "guessedname": "value", "guessedtype": "property"}, "width": {"default": "null", "type": "String", "description": "CSS width of the Overlay.", "guessedname": "handler", "guessedtype": "property"}, "xy": {"default": "null", "type": "Number[]", "description": "An array with the absolute x and y positions of the Overlay", "guessedname": "handler", "guessedtype": "property"}, "context": {"default": "null", "type": "Array", "description": "The array of context arguments for context-sensitive positioning. The format is: [id or element, element corner, context corner]. For example, setting this property to [\"img1\", \"tl\", \"bl\"] would align the Overlay's top left corner to the context element's bottom left corner.", "guessedname": "handler", "guessedtype": "property"}, "y": {"default": "null", "type": "Number", "description": "The absolute y-coordinate position of the Overlay", "guessedname": "handler", "guessedtype": "property"}, "x": {"default": "null", "type": "Number", "description": "The absolute x-coordinate position of the Overlay", "guessedname": "handler", "guessedtype": "property"}, "fixedcenter": {"default": "false", "type": "Boolean", "description": "True if the Overlay should be anchored to the center of the viewport.", "guessedname": "value", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Overlay <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Overlay"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing 10\/23\/2006the configuration that should be set for this Overlay. See configuration documentation for more details."}], "description": "Overlay is a Module that is absolutely positioned above the page flow. It has convenience methods for positioning and sizing, as well as options for controlling zIndex and constraining the Overlay's position to the current visible viewport. Overlay also contains a dynamicly generated IFRAME which is placed beneath it for Internet Explorer 6 and 5.x so that it will be properly rendered above SELECT elements."}], "namespace": "YAHOO.widget", "module": "container", "events": {"YAHOO.widget.Overlay.windowScrollEvent": {"description": "A singleton CustomEvent used for reacting to the DOM event for window scroll", "guessedname": "windowScrollEvent", "guessedtype": "property"}, "moveEvent": {"params": [{"type": "Number", "name": "x", "description": "\tx coordinate"}, {"type": "Number", "name": "y", "description": "\ty coordinate"}], "description": "CustomEvent fired after the Overlay is moved.", "guessedname": "moveEvent", "guessedtype": "property"}, "beforeMoveEvent": {"params": [{"type": "Number", "name": "x", "description": "\tx coordinate"}, {"type": "Number", "name": "y", "description": "\ty coordinate"}], "description": "CustomEvent fired before the Overlay is moved.", "guessedname": "beforeMoveEvent", "guessedtype": "property"}, "YAHOO.widget.Overlay.windowResizeEvent": {"description": "A singleton CustomEvent used for reacting to the DOM event for window resize", "guessedname": "windowResizeEvent", "guessedtype": "property"}}, "guessedname": "Overlay", "methods": {"moveTo": {"params": [{"type": "Number", "name": "x", "description": "\tThe Overlay's new x position"}, {"type": "Number", "name": "y", "description": "\tThe Overlay's new y position"}], "description": "Moves the Overlay to the specified position. This function is identical to calling this.cfg.setProperty(\"xy\", [x,y]);", "guessedname": "moveTo", "guessedtype": "function"}, "showIframe": {"description": "Shows the iframe shim, if it has been enabled", "guessedname": "showIframe", "guessedtype": "function"}, "configFixedCenter": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"fixedcenter\" property is changed.", "guessedname": "configFixedCenter", "guessedtype": "function"}, "YAHOO.widget.Overlay.windowResizeHandler": {"static": "", "params": [{"type": "DOMEvent", "name": "e", "description": " The DOM resize event"}], "description": "The DOM event handler used to fire the CustomEvent for window resize", "guessedname": "windowResizeHandler", "guessedtype": "function"}, "showMacGeckoScrollbars": {"description": "Removes a special CSS class from the Overlay when Mac\/Gecko is in use, to work around a Gecko bug where\nscrollbars cannot be hidden. See https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=187435", "guessedname": "showMacGeckoScrollbars", "guessedtype": "function"}, "hideMacGeckoScrollbars": {"description": "Adds a special CSS class to the Overlay when Mac\/Gecko is in use, to work around a Gecko bug where\nscrollbars cannot be hidden. See https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=187435", "guessedname": "hideMacGeckoScrollbars", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Overlay which are fired automatically at appropriate times by the Overlay class.", "guessedname": "initEvents", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Overlay <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Overlay"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Overlay. See configuration documentation for more details."}], "description": "The Overlay initialization method, which is executed for Overlay and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "configXY": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"xy\" property is changed.", "guessedname": "configXY", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Overlay."}, "description": "Returns a String representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "syncPosition": {"description": "Synchronizes the Panel's \"xy\", \"x\", and \"y\" properties with the Panel's position in the DOM. This is primarily used to update position information during drag & drop.", "guessedname": "syncPosition", "guessedtype": "function"}, "hideIframe": {"description": "Hides the iframe shim, if it has been enabled", "guessedname": "hideIframe", "guessedtype": "function"}, "configHeight": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"height\" property is changed.", "guessedname": "configHeight", "guessedtype": "function"}, "configContext": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"context\" property is changed.", "guessedname": "configContext", "guessedtype": "function"}, "onDomResize": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe resize DOM event"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "Event handler fired when the resize monitor element is resized.", "guessedname": "onDomResize", "guessedtype": "function"}, "configVisible": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"visible\" property is changed. This method is responsible for firing showEvent and hideEvent.", "guessedname": "configVisible", "guessedtype": "function"}, "enforceConstraints": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler executed when the moveEvent is fired, if the \"constraintoviewport\" is set to true.", "guessedname": "enforceConstraints", "guessedtype": "function"}, "configWidth": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"width\" property is changed.", "guessedname": "configWidth", "guessedtype": "function"}, "destroy": {"description": "Removes the Overlay element from the DOM and sets all child elements to null.", "guessedname": "destroy", "guessedtype": "function"}, "configConstrainToViewport": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"constraintoviewport\" property is changed.", "guessedname": "configConstrainToViewport", "guessedtype": "function"}, "YAHOO.widget.Overlay.windowScrollHandler": {"static": "", "params": [{"type": "DOMEvent", "name": "e", "description": " The DOM scroll event"}], "description": "The DOM event handler used to fire the CustomEvent for window scroll", "guessedname": "windowScrollHandler", "guessedtype": "function"}, "center": {"description": "Centers the container in the viewport.", "guessedname": "center", "guessedtype": "function"}, "align": {"params": [{"type": "String", "name": "elementAlign", "description": "\t\tThe String representing the corner of the Overlay that should be aligned to the context element"}, {"type": "String", "name": "contextAlign", "description": "\t\tThe corner of the context element that the elementAlign corner should stick to."}], "description": "Aligns the Overlay to its context element using the specified corner points (represented by the constants TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, and BOTTOM_RIGHT.", "guessedname": "align", "guessedtype": "function"}, "configIframe": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"iframe\" property is changed.", "guessedname": "configIframe", "guessedtype": "function"}, "configY": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"y\" property is changed.", "guessedname": "configY", "guessedtype": "function"}, "configX": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"x\" property is changed.", "guessedname": "configX", "guessedtype": "function"}, "configzIndex": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"zIndex\" property is changed.", "guessedname": "configzIndex", "guessedtype": "function"}, "doCenterOnDOMEvent": {"description": "Center event handler used for centering on scroll\/resize, but only if the Overlay is visible", "guessedname": "doCenterOnDOMEvent", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed using the Overlay's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Module", "superclass": "YAHOO.widget.Module", "file": "Overlay.js", "guessedtype": "function", "shortname": "Overlay", "properties": {"YAHOO.widget.Overlay._initialized": {"guessedname": "_initialized", "type": "Boolean", "description": "A boolean that indicated whether the window resize and scroll events have already been subscribed to.", "private": "", "guessedtype": "property"}, "YAHOO.widget.Overlay.CSS_OVERLAY": {"description": "Constant representing the default CSS class used for an Overlay", "static": "", "guessedname": "CSS_OVERLAY", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.BOTTOM_RIGHT": {"description": "Constant representing the bottom right corner of an element, used for configuring the context element alignment", "static": "", "guessedname": "BOTTOM_RIGHT", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.BOTTOM_LEFT": {"description": "Constant representing the top bottom left corner of an element, used for configuring the context element alignment", "static": "", "guessedname": "BOTTOM_LEFT", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.TOP_RIGHT": {"description": "Constant representing the top right corner of an element, used for configuring the context element alignment", "static": "", "guessedname": "TOP_RIGHT", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.TOP_LEFT": {"description": "Constant representing the top left corner of an element, used for configuring the context element alignment", "static": "", "guessedname": "TOP_LEFT", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.IFRAME_SRC": {"description": "The URL that will be placed in the iframe", "static": "", "guessedname": "IFRAME_SRC", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Overlay is a Module that is absolutely positioned above the page flow. It has convenience methods for positioning and sizing, as well as options for controlling zIndex and constraining the Overlay's position to the current visible viewport. Overlay also contains a dynamicly generated IFRAME which is placed beneath it for Internet Explorer 6 and 5.x so that it will be properly rendered above SELECT elements."}, "YAHOO.widget.DS_JSArray": {"name": "YAHOO.widget.DS_JSArray", "constructors": [{"params": [{"type": "String[]", "name": "aData", "description": "  In-memory Javascript array of simple string data."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of config params."}], "description": "Implementation of YAHOO.widget.DataSource using a native Javascript array as\r\nits live data source."}], "namespace": "YAHOO.widget", "module": "autocomplete", "guessedname": "DS_JSArray", "methods": {"doQuery": {"params": [{"type": "HTMLFunction", "name": "oCallbackFn", "description": "  Callback function defined by oParent object to which to return results."}, {"type": "String", "name": "sQuery", "description": "  Query string."}, {"type": "Object", "name": "oParent", "description": "  The object instance that has requested data."}], "description": "Queries the live data source defined by data for results. Results are passed\r\nback to a callback function.", "guessedname": "doQuery", "guessedtype": "function"}}, "extends": "YAHOO.widget.DataSource", "superclass": "YAHOO.widget.DataSource", "file": "DataSource.js", "guessedtype": "function", "shortname": "DS_JSArray", "properties": {"data": {"type": "Array", "description": "In-memory Javascript array of strings.", "guessedname": "data", "guessedtype": "property"}}, "description": "Implementation of YAHOO.widget.DataSource using a native Javascript array as\r\nits live data source."}, "YAHOO.widget.TextNode": {"name": "YAHOO.widget.TextNode", "constructors": [{"params": [{"type": "object", "name": "oData", "description": "  a string or object containing the data that will\nbe used to render this node"}, {"type": "YAHOO.widget.Node", "name": "oParent", "description": "  this node's parent node"}, {"type": "boolean", "name": "expanded", "description": "  the initial expanded\/collapsed state"}], "description": "The default node presentation.  The first parameter should be\neither a string that will be used as the node's label, or an object\nthat has a string propery called label.  By default, the clicking the\nlabel will toggle the expanded\/collapsed state of the node.  By\nchanging the href property of the instance, this behavior can be\nchanged so that the label will go to the specified href."}], "namespace": "YAHOO.widget", "module": "treeview", "guessedname": "TextNode", "methods": {"getLabelEl": {"return": {"type": "object", "description": "the element"}, "description": "Returns the label element", "guessedname": "getLabelEl", "guessedtype": "function"}, "onLabelClick": {"return": {"type": "", "description": "false to cancel the anchor click"}, "description": "Executed when the label is clicked.  Fires the labelClick custom event.", "params": [{"type": "Node", "name": "me", "description": "  this node"}], "guessedname": "onLabelClick", "guessedtype": "function", "scope": "the anchor tag clicked"}}, "extends": "YAHOO.widget.Node", "superclass": "YAHOO.widget.Node", "file": "TextNode.js", "guessedtype": "function", "shortname": "TextNode", "properties": {"labelStyle": {"type": "string", "description": "The CSS class for the label href.  Defaults to ygtvlabel, but can be\noverridden to provide a custom presentation for a specific node.", "guessedname": "labelStyle", "guessedtype": "property"}, "label": {"type": "string", "description": "The text for the label.  It is assumed that the oData parameter will\neither be a string that will be used as the label, or an object that\nhas a property called \"label\" that we will use.", "guessedname": "label", "guessedtype": "property"}, "labelElId": {"type": "string", "description": "The derived element id of the label for this node", "guessedname": "labelElId", "guessedtype": "property"}}, "description": "The default node presentation.  The first parameter should be\neither a string that will be used as the node's label, or an object\nthat has a string propery called label.  By default, the clicking the\nlabel will toggle the expanded\/collapsed state of the node.  By\nchanging the href property of the instance, this behavior can be\nchanged so that the label will go to the specified href."}, "YAHOO.util.Point": {"name": "YAHOO.util.Point", "constructors": [{"params": [{"type": "Int", "name": "x", "description": " The X position of the point"}, {"type": "Int", "name": "y", "description": " The Y position of the point"}], "description": "A point is a region that is special in that it represents a single point on \nthe grid."}], "namespace": "YAHOO.util", "module": "dom", "guessedname": "Point", "extends": "YAHOO.util.Region", "superclass": "YAHOO.util.Region", "file": "Region.js", "guessedtype": "function", "shortname": "Point", "properties": {"y": {"type": "Int", "description": "The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)", "guessedname": "y", "guessedtype": "property"}, "x": {"type": "Int", "description": "The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)", "guessedname": "x", "guessedtype": "property"}}, "description": "A point is a region that is special in that it represents a single point on \nthe grid."}, "YAHOO.widget.Menu": {"name": "YAHOO.widget.Menu", "configs": {"autosubmenudisplay": {"default": "true", "type": "Boolean", "description": "Boolean indicating if submenus are automatically made \nvisible when the user mouses over the menu's items."}, "clicktohide": {"default": "true", "type": "Boolean", "description": "Boolean indicating if the menu will automatically be \nhidden if the user clicks outside of it."}, "submenualignment": {"default": "[\"tl\",\"tr\"]", "type": "Array", "description": "Array defining how submenus should be aligned to their \nparent menu item. The format is: [itemCorner, submenuCorner]. By default\na submenu's top left corner is aligned to its parent menu item's top \nright corner.", "guessedname": "value", "guessedtype": "property"}, "constraintoviewport": {"default": "true", "type": "Boolean", "description": "Boolean indicating if the menu will try to remain inside \nthe boundaries of the size of viewport."}, "showdelay": {"default": "0", "type": "Number", "description": "Number indicating the time (in milliseconds) that should \nexpire before a submenu is made visible when the user mouses over \nthe menu's items."}, "visible": {"default": "false", "type": "Boolean", "description": "Boolean indicating whether or not the menu is visible.  If \nthe menu's \"position\" configuration property is set to \"dynamic\" (the \ndefault), this property toggles the menu's <code>&#60;div&#62;<\/code> \nelement's \"visibility\" style property between \"visible\" (true) or \n\"hidden\" (false).  If the menu's \"position\" configuration property is \nset to \"static\" this property toggles the menu's \n<code>&#60;div&#62;<\/code> element's \"display\" style property \nbetween \"block\" (true) or \"none\" (false)."}, "container": {"default": "document.body", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-58190037\">HTMLElement<\/a>|String", "description": "HTML element reference or string specifying the id \nattribute of the HTML element that the menu's markup should be rendered into."}, "position": {"default": "dynamic", "type": "String", "description": "String indicating how a menu should be positioned on the \nscreen.  Possible values are \"static\" and \"dynamic.\"  Static menus are \nvisible by default and reside in the normal flow of the document \n(CSS position: static).  Dynamic menus are hidden by default, reside \nout of the normal flow of the document (CSS position: absolute), and \ncan overlay other elements on the screen."}, "hidedelay": {"default": "0", "type": "Number", "description": "Number indicating the time (in milliseconds) that should \nexpire before the menu is hidden."}}, "constructors": [{"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the menu."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element to be used as the data source \nfor the menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;div&#62;<\/code> element of the menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-94282980\">HTMLSelectElement<\/a>", "name": "p_oElement", "description": " \nObject specifying the <code>&#60;select&#62;<\/code> element to be used as \nthe data source for the menu."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu. See configuration class documentation for \nmore details."}], "description": "The Menu class creates a container that holds a vertical list representing \na set of options or commands.  Menu is the base class for all \nmenu containers."}], "namespace": "YAHOO.widget", "module": "menu", "events": {"mouseOutEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the mouse has left the menu.  Passes back the DOM \nEvent object as an argument.", "guessedname": "mouseOutEvent", "guessedtype": "property"}, "mouseUpEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user releases a mouse button while the mouse is \nover the menu.  Passes back the DOM Event object as an argument.", "guessedname": "mouseUpEvent", "guessedtype": "property"}, "keyUpEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user releases a key when one of the menu's items \nhas focus.  Passes back the DOM Event object as an argument.", "guessedname": "keyUpEvent", "guessedtype": "property"}, "keyPressEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user presses an alphanumeric key when one of the\nmenu's items has focus.  Passes back the DOM Event object as an argument.", "guessedname": "keyPressEvent", "guessedtype": "property"}, "itemAddedEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when an item is added to the menu.", "guessedname": "itemAddedEvent", "guessedtype": "property"}, "mouseOverEvent": {"description": "Fires when the mouse has entered the menu.  Passes back \nthe DOM Event object as an argument.", "guessedname": "mouseOverEvent", "guessedtype": "property"}, "itemRemovedEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when an item is removed to the menu.", "guessedname": "itemRemovedEvent", "guessedtype": "property"}, "mouseDownEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user mouses down on the menu.  Passes back the \nDOM Event object as an argument.", "guessedname": "mouseDownEvent", "guessedtype": "property"}, "clickEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user clicks the on the menu.  Passes back the \nDOM Event object as an argument.", "guessedname": "clickEvent", "guessedtype": "property"}, "keyDownEvent": {"type": "YAHOO.util.CustomEvent", "description": "Fires when the user presses a key when one of the menu's items \nhas focus.  Passes back the DOM Event object as an argument.", "guessedname": "keyDownEvent", "guessedtype": "property"}}, "guessedname": "Menu", "methods": {"_onRender": {"guessedname": "_onRender", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"render\" event handler for the menu.", "private": "", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Returns a string representing the menu.", "guessedname": "toString", "guessedtype": "function"}, "_onMenuItemBlur": {"guessedname": "_onMenuItemBlur", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event \nthat was fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}], "description": "\"blur\" event handler for the menu's items.", "private": "", "guessedtype": "function"}, "clearActiveItem": {"params": [{"type": "Boolean", "name": "p_bBlur", "description": " Boolean indicating if the menu's active item \nshould be blurred."}], "description": "Sets the \"selected\" configuration property of the menu's active\nitem to \"false\" and hides the item's submenu.", "guessedname": "clearActiveItem", "guessedtype": "function"}, "setInitialSelection": {"description": "Sets the \"selected\" configuration property of the menu's first \nenabled item to \"true.\"", "guessedname": "setInitialSelection", "guessedtype": "function"}, "destroy": {"description": "Removes the menu's <code>&#60;div&#62;<\/code> element \n(and accompanying child nodes) from the document.", "guessedname": "destroy", "guessedtype": "function"}, "_onBeforeRender": {"guessedname": "_onBeforeRender", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"beforerender\" event handler for the menu.  Appends all of the \n<code>&#60;ul&#62;<\/code>, <code>&#60;li&#62;<\/code> and their accompanying \ntitle elements to the body element of the menu.", "private": "", "guessedtype": "function"}, "_cancelShowDelay": {"description": "Cancels the call to the \"showMenu.\"", "private": "", "guessedname": "_cancelShowDelay", "guessedtype": "function"}, "_getItemGroup": {"return": {"type": "Array", "description": ""}, "description": "Returns the menu item group at the specified index.", "private": "", "params": [{"type": "Number", "name": "p_nIndex", "description": " Number indicating the index of the menu item group \nto be retrieved."}], "guessedname": "_getItemGroup", "guessedtype": "function"}, "_onClick": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"click\" event handler for the menu.", "guessedname": "_onClick", "guessedtype": "function"}, "_onInit": {"guessedname": "_onInit", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"init\" event handler for the menu.", "private": "", "guessedtype": "function"}, "_updateItemProperties": {"guessedname": "_updateItemProperties", "params": [{"type": "Number", "name": "p_nGroupIndex", "description": " Number indicating the group of items to update."}], "description": "Updates the \"index,\" \"groupindex,\" and \"className\" properties \nof the menu items in the specified group.", "private": "", "guessedtype": "function"}, "_onSubmenuBeforeShow": {"guessedname": "_onSubmenuBeforeShow", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oSubmenu", "description": " Object representing the submenu that \nsubscribed to the event."}], "description": "\"beforeshow\" event handler for a submenu.", "private": "", "guessedtype": "function"}, "addItems": {"return": {"type": "Array", "description": ""}, "params": [{"type": "Array", "name": "p_aItems", "description": " Array of items to be added to the menu.  The array \ncan contain strings specifying the text for each item to be created, object\nliterals specifying each of the menu item configuration properties, \nor MenuItem instances."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number specifying the group to \nwhich the items belongs."}], "description": "Adds an array of items to the menu.", "guessedname": "addItems", "guessedtype": "function"}, "setInitialFocus": {"description": "Sets focus to the menu's first enabled item.", "guessedname": "setInitialFocus", "guessedtype": "function"}, "_removeItemFromGroupByValue": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Removes a menu item from a group by reference.  Returns the \nmenu item that was removed.", "private": "", "params": [{"type": "Number", "name": "p_nGroupIndex", "description": " Number indicating the group to which the\nmenu item belongs."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance to be removed."}], "guessedname": "_removeItemFromGroupByValue", "guessedtype": "function"}, "_onMouseOver": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"mouseover\" event handler for the menu.", "guessedname": "_onMouseOver", "guessedtype": "function"}, "_onSubmenuHide": {"guessedname": "_onSubmenuHide", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oSubmenu", "description": " Object representing the submenu that \nsubscribed to the event."}], "description": "\"hide\" Custom Event handler for a submenu.", "private": "", "guessedtype": "function"}, "_onParentMenuRender": {"guessedname": "_onParentMenuRender", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oSubmenu", "description": " Object representing the submenu that \nsubscribed to the event."}], "description": "\"render\" event handler for a submenu.  Renders a  \nsubmenu in response to the firing of its parent's \"render\" event.", "private": "", "guessedtype": "function"}, "_execShowDelay": {"guessedname": "_execShowDelay", "params": [{"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object specifying the menu that should \nbe made visible."}], "description": "Shows the menu after the number of milliseconds specified by \nthe \"showdelay\" configuration property have ellapsed.", "private": "", "guessedtype": "function"}, "_onBeforeShow": {"guessedname": "_onBeforeShow", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"beforeshow\" event handler for the menu.", "private": "", "guessedtype": "function"}, "_onMenuItemConfigChange": {"guessedname": "_onMenuItemConfigChange", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item \nthat fired the event."}], "description": "\"configchange\" event handler for the menu's items.", "private": "", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;div&#62;<\/code> element of the menu."}, {"type": "String", "name": "p_oElement", "description": " String specifying the id attribute of the \n<code>&#60;select&#62;<\/code> element to be used as the data source \nfor the menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-22445964\">HTMLDivElement<\/a>", "name": "p_oElement", "description": " Object \nspecifying the <code>&#60;div&#62;<\/code> element of the menu."}, {"type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-94282980\">HTMLSelectElement<\/a>", "name": "p_oElement", "description": " \nObject specifying the <code>&#60;select&#62;<\/code> element to be used as \nthe data source for the menu."}, {"type": "Object", "name": "p_oConfig", "description": " Optional. Object literal specifying the \nconfiguration for the menu. See configuration class documentation for \nmore details."}], "description": "The Menu class's initialization method. This method is \nautomatically called by the constructor, and sets up all DOM references \nfor pre-existing markup, and creates required markup if it is not \nalready present.", "guessedname": "init", "guessedtype": "function"}, "disableAutoSubmenuDisplay": {"guessedname": "disableAutoSubmenuDisplay", "params": [{"type": "Event", "name": "p_oEvent", "description": " Object reference for the DOM event object \npassed back by the event utility (YAHOO.util.Event)."}], "description": "\"click\" event handler for the document", "private": "", "guessedtype": "function"}, "_addItemToGroup": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Adds a menu item to a group.", "private": "", "params": [{"type": "Number", "name": "p_nGroupIndex", "description": " Number indicating the group to which the \nitem belongs."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance to be added to the menu."}, {"type": "String", "name": "p_oItem", "description": " String specifying the text of the item to be added \nto the menu."}, {"type": "Object", "name": "p_oItem", "description": " Object literal containing a set of menu item \nconfiguration properties."}, {"type": "Number", "name": "p_nItemIndex", "description": " Optional. Number indicating the index at \nwhich the menu item should be added."}], "guessedname": "_addItemToGroup", "guessedtype": "function"}, "_cancelHideDelay": {"description": "Cancels the call to \"hideMenu.\"", "private": "", "guessedname": "_cancelHideDelay", "guessedtype": "function"}, "configHideDelay": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"hidedelay\" configuration property \nof the menu changes.", "guessedname": "configHideDelay", "guessedtype": "function"}, "_onBeforeHide": {"guessedname": "_onBeforeHide", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that fired \nthe event."}], "description": "\"beforehide\" event handler for the menu.", "private": "", "guessedtype": "function"}, "_getFirstEnabledItem": {"guessedname": "_getFirstEnabledItem", "return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Returns the first enabled item in the menu.", "private": "", "guessedtype": "function"}, "_createItemGroup": {"return": {"type": "Array", "description": ""}, "description": "Creates a new menu item group (array) and its associated \n<code>&#60;ul&#62;<\/code> element. Returns an aray of menu item groups.", "private": "", "params": [{"type": "Number", "name": "p_nIndex", "description": " Number indicating the group to create."}], "guessedname": "_createItemGroup", "guessedtype": "function"}, "getItemGroups": {"return": {"type": "Array", "description": ""}, "description": "Returns a multi-dimensional array of all of the items in the menu.", "guessedname": "getItemGroups", "guessedtype": "function"}, "onDomResize": {"description": "Event handler called when the resize monitor element's \"resize\" evet is fired.", "guessedname": "onDomResize", "guessedtype": "function"}, "insertItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance to be added to the menu."}, {"type": "String", "name": "p_oItem", "description": " String specifying the text of the item to be added \nto the menu."}, {"type": "Object", "name": "p_oItem", "description": " Object literal containing a set of menu item \nconfiguration properties."}, {"type": "Number", "name": "p_nItemIndex", "description": " Number indicating the ordinal position at which\nthe item should be added."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number indicating the group to which \nthe item belongs."}], "description": "Inserts an item into the menu at the specified index.", "guessedname": "insertItem", "guessedtype": "function"}, "_configureSubmenu": {"guessedname": "_configureSubmenu", "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance with the submenu to be configured."}], "description": "Subscribes the menu item's submenu to its parent menu's events.", "private": "", "guessedtype": "function"}, "addItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance to be added to the menu."}, {"type": "String", "name": "p_oItem", "description": " String specifying the text of the item to be added \nto the menu."}, {"type": "Object", "name": "p_oItem", "description": " Object literal containing a set of menu item \nconfiguration properties."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number indicating the group to\nwhich the item belongs."}], "description": "Appends an item to the menu.", "guessedname": "addItem", "guessedtype": "function"}, "configVisible": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"visible\" configuration property \nthe menu changes.", "guessedname": "configVisible", "guessedtype": "function"}, "configContainer": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"container\" configuration property \nof the menu changes.", "guessedname": "configContainer", "guessedtype": "function"}, "_onSubmenuShow": {"guessedname": "_onSubmenuShow", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oSubmenu", "description": " Object representing the submenu that \nsubscribed to the event."}], "description": "\"show\" event handler for a submenu.", "private": "", "guessedtype": "function"}, "enforceConstraints": {"params": [{"type": "String", "name": "type", "description": " The name of the event that was fired."}, {"type": "Array", "name": "args", "description": " Collection of arguments sent when the \nevent was fired."}, {"type": "Array", "name": "obj", "description": " Array containing the current Menu instance \nand the item that fired the event."}], "description": "The default event handler executed when the moveEvent is fired,  \nif the \"constraintoviewport\" configuration property is set to true.", "guessedname": "enforceConstraints", "guessedtype": "function"}, "getItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "Number", "name": "p_nItemIndex", "description": " Number indicating the ordinal position of the \nitem to be retrieved."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number indicating the group to which \nthe item belongs."}], "description": "Returns the item at the specified index.", "guessedname": "getItem", "guessedtype": "function"}, "removeItem": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oObject", "description": " Object reference for the MenuItem \ninstance to be removed from the menu."}, {"type": "Number", "name": "p_oObject", "description": " Number specifying the index of the item \nto be removed."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number specifying the group to \nwhich the item belongs."}], "description": "Removes the specified item from the menu.", "guessedname": "removeItem", "guessedtype": "function"}, "_removeItemFromGroupByIndex": {"return": {"type": "YAHOO.widget.MenuItem", "description": ""}, "description": "Removes a menu item from a group by index.  Returns the menu \nitem that was removed.", "private": "", "params": [{"type": "Number", "name": "p_nGroupIndex", "description": " Number indicating the group to which the menu \nitem belongs."}, {"type": "Number", "name": "p_nItemIndex", "description": " Number indicating the index of the menu item \nto be removed."}], "guessedname": "_removeItemFromGroupByIndex", "guessedtype": "function"}, "_onShow": {"guessedname": "_onShow", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that fired \nthe event."}], "description": "\"show\" event handler for the menu.", "private": "", "guessedtype": "function"}, "_onParentMenuConfigChange": {"guessedname": "_onParentMenuConfigChange", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oSubmenu", "description": " Object representing the submenu that \nsubscribed to the event."}], "description": "\"configchange\" event handler for a submenu.", "private": "", "guessedtype": "function"}, "_onMenuItemFocus": {"guessedname": "_onMenuItemFocus", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object representing the menu item \nthat fired the event."}], "description": "\"focus\" event handler for the menu's items.", "private": "", "guessedtype": "function"}, "setItemGroupTitle": {"params": [{"type": "String", "name": "p_sGroupTitle", "description": " String specifying the title of the group."}, {"type": "Number", "name": "p_nGroupIndex", "description": " Optional. Number specifying the group to which\nthe title belongs."}], "description": "Sets the title of a group of menu items.", "guessedname": "setItemGroupTitle", "guessedtype": "function"}, "getRoot": {"description": "Finds the menu's root menu.", "guessedname": "getRoot", "guessedtype": "function"}, "_subscribeToItemEvents": {"guessedname": "_subscribeToItemEvents", "params": [{"type": "YAHOO.widget.MenuItem", "name": "p_oItem", "description": " Object reference for the MenuItem \ninstance whose events should be subscribed to."}], "description": "Subscribes a menu to a menu item's event.", "private": "", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for the menu.", "guessedname": "initEvents", "guessedtype": "function"}, "_onMouseOut": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"mouseout\" event handler for the menu.", "guessedname": "_onMouseOut", "guessedtype": "function"}, "_initSubTree": {"description": "Iterates the childNodes of the source element to find nodes \nused to instantiate menu and menu items.", "private": "", "guessedname": "_initSubTree", "guessedtype": "function"}, "configIframe": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"iframe\" configuration property of \nthe menu changes.", "guessedname": "configIframe", "guessedtype": "function"}, "_getOffsetWidth": {"description": "Returns the offset width of the menu's \n<code>&#60;div&#62;<\/code> element.", "private": "", "guessedname": "_getOffsetWidth", "guessedtype": "function"}, "_checkPosition": {"return": {"type": "Boolean", "description": ""}, "description": "Checks to make sure that the value of the \"position\" property \nis one of the supported strings. Returns true if the position is supported.", "private": "", "params": [{"type": "Object", "name": "p_sPosition", "description": " String specifying the position of the menu."}], "guessedname": "_checkPosition", "guessedtype": "function"}, "_onKeyDown": {"protected": "", "params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "\"keydown\" event handler for the menu.", "guessedname": "_onKeyDown", "guessedtype": "function"}, "configPosition": {"params": [{"type": "String", "name": "p_sType", "description": " String representing the name of the event that \nwas fired."}, {"type": "Array", "name": "p_aArgs", "description": " Array of arguments sent when the event was fired."}, {"type": "YAHOO.widget.Menu", "name": "p_oMenu", "description": " Object representing the menu that \nfired the event."}], "description": "Event handler for when the \"position\" configuration property \nof the menu changes.", "guessedname": "configPosition", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be\nchanged using the menu's Config object (\"cfg\").", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "_execHideDelay": {"description": "Hides the menu after the number of milliseconds specified by \nthe \"hidedelay\" configuration property.", "private": "", "guessedname": "_execHideDelay", "guessedtype": "function"}}, "extends": "YAHOO.widget.Overlay", "superclass": "YAHOO.widget.Overlay", "file": "menu.js", "guessedtype": "function", "shortname": "Menu", "properties": {"activeItem": {"default": "null", "type": "YAHOO.widget.MenuItem", "description": "Object reference to the item in the menu that has focus.", "guessedname": "activeItem", "guessedtype": "property"}, "CSS_CLASS_NAME": {"description": "String representing the CSS class(es) to be applied to the \nmenu's <code>&#60;div&#62;<\/code> element.", "default": "\"yuimenu\"", "guessedname": "CSS_CLASS_NAME", "guessedtype": "property", "type": "String", "final": ""}, "lazyLoad": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the menu's \"lazy load\" feature is \nenabled.  If set to \"true,\" initialization and rendering of the menu's \nitems will be deferred until the first time it is made visible.  This \nproperty should be set via the constructor using the configuration \nobject literal.", "guessedname": "lazyLoad", "guessedtype": "property"}, "parent": {"default": "null", "type": "YAHOO.widget.MenuItem", "description": "Object reference to the menu's parent menu or menu item.  \nThis property can be set via the constructor using the configuration \nobject literal.", "guessedname": "parent", "guessedtype": "property"}, "_hideDelayEventHandlersAssigned": {"description": "Boolean indicating if the \"mouseover\" and \"mouseout\" event \nhandlers used for hiding the menu via a call to \"window.setTimeout\" have \nalready been assigned.", "default": "false", "private": "", "guessedname": "_hideDelayEventHandlersAssigned", "guessedtype": "property", "type": "Boolean"}, "_bHandledMouseOverEvent": {"description": "Boolean indicating the current state of the menu's \n\"mouseover\" event.", "default": "false", "private": "", "guessedname": "_bHandledMouseOverEvent", "guessedtype": "property", "type": "Boolean"}, "_nHideDelayId": {"description": "Number representing the time-out setting used to cancel the \nhiding of a menu.", "default": "null", "private": "", "guessedname": "_nHideDelayId", "guessedtype": "property", "type": "Number"}, "getNextItemSibling": {"return": "{Object}", "description": "Returns the next sibling of an item in an array.", "private": "", "param": "{p_aArray} Array to search.", "guessedname": "getNextItemSibling", "guessedtype": "property"}, "srcElement": {"default": "null", "type": "<a href=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/\nlevel-one-html.html#ID-94282980\">HTMLSelectElement<\/a>|<a \nhref=\"http:\/\/www.w3.org\/TR\/2000\/WD-DOM-Level-1-20000929\/level-one-html.\nhtml#ID-22445964\">HTMLDivElement<\/a>", "description": "Object reference to the HTML element (either \n<code>&#60;select&#62;<\/code> or <code>&#60;div&#62;<\/code>) used to \ncreate the menu.", "guessedname": "srcElement", "guessedtype": "property"}, "ITEM_TYPE": {"description": "Object representing the type of menu item to instantiate and \nadd when parsing the child nodes (either <code>&#60;li&#62;<\/code> element, \n<code>&#60;optgroup&#62;<\/code> element or <code>&#60;option&#62;<\/code>) \nof the menu's source HTML element.", "default": "YAHOO.widget.MenuItem", "guessedname": "ITEM_TYPE", "guessedtype": "property", "type": "YAHOO.widget.MenuItem", "final": ""}, "GROUP_TITLE_TAG_NAME": {"description": "String representing the tagname of the HTML element used to \ntitle the menu's item groups.", "default": "H6", "guessedname": "GROUP_TITLE_TAG_NAME", "guessedtype": "property", "type": "String", "final": ""}, "_bHandledMouseOutEvent": {"description": "Boolean indicating the current state of the menu's\n\"mouseout\" event.", "default": "false", "private": "", "guessedname": "_bHandledMouseOutEvent", "guessedtype": "property", "type": "Boolean"}, "_aGroupTitleElements": {"description": "Array of HTML element used to title groups of menu items.", "default": "[]", "private": "", "guessedname": "_aGroupTitleElements", "guessedtype": "property", "type": "Array"}, "_aListElements": {"description": "Array of <code>&#60;ul&#62;<\/code> elements, each of which is \nthe parent node for each item's <code>&#60;li&#62;<\/code> element.", "default": "[]", "private": "", "guessedname": "_aListElements", "guessedtype": "property", "type": "Array"}, "_nShowDelayId": {"description": "Number representing the time-out setting used to cancel the \nshowing of a menu.", "default": "null", "private": "", "guessedname": "_nShowDelayId", "guessedtype": "property", "type": "Number"}, "_aItemGroups": {"description": "Array of menu items.", "default": "[]", "private": "", "guessedname": "_aItemGroups", "guessedtype": "property", "type": "Array"}, "itemData": {"default": "null", "type": "Array", "description": "Array of items to be added to the menu.  The array can contain \nstrings representing the text for each item to be created, object literals \nrepresenting the menu item configuration properties, or MenuItem instances.  \nThis property should be set via the constructor using the configuration \nobject literal.", "guessedname": "itemData", "guessedtype": "property"}}, "description": "The Menu class creates a container that holds a vertical list representing \na set of options or commands.  Menu is the base class for all \nmenu containers."}, "YAHOO.widget.Tooltip": {"name": "YAHOO.widget.Tooltip", "configs": {"container": {"default": "document.body", "type": "HTMLElement\/String", "description": "Specifies the container element that the Tooltip's markup should be rendered into.", "guessedname": "value", "guessedtype": "property"}, "text": {"default": "null", "type": "String", "description": "Specifies the Tooltip's text.", "guessedname": "handler", "guessedtype": "property"}, "showdelay": {"default": "200", "type": "Number", "description": "The number of milliseconds to wait before showing a Tooltip on mouseover.", "guessedname": "value", "guessedtype": "property"}, "preventoverlap": {"default": "true", "type": "Boolean", "description": "Specifies whether the Tooltip should be kept from overlapping its context element.", "guessedname": "value", "guessedtype": "property"}, "context": {"default": "null", "type": "HTMLElement[]\/String[]", "description": "Specifies the element or elements that the Tooltip should be anchored to on mouseover."}, "autodismissdelay": {"default": "5000", "type": "Number", "description": "The number of milliseconds to wait before automatically dismissing a Tooltip after the mouse has been resting on the context element.", "guessedname": "value", "guessedtype": "property"}, "hidedelay": {"default": "250", "type": "Number", "description": "The number of milliseconds to wait before hiding a Tooltip on mouseover.", "guessedname": "value", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Tooltip <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Tooltip"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Overlay. See configuration documentation for more details."}], "description": "Tooltip is an implementation of Overlay that behaves like an OS tooltip, displaying when the user mouses over a particular element, and disappearing on mouse out."}], "namespace": "YAHOO.widget", "module": "container", "guessedname": "Tooltip", "methods": {"initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed using the Overlay's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "doShow": {"return": {"type": "Number", "description": "The process ID of the timeout function associated with doShow"}, "params": [{"type": "DOMEvent", "name": "e", "description": "\tThe current DOM event"}], "description": "Processes the showing of the Tooltip by setting the timeout delay and offset of the Tooltip.", "guessedname": "doShow", "guessedtype": "function"}, "onContextMouseOver": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe current DOM event"}, {"type": "Object", "name": "obj", "description": "\tThe object argument"}], "description": "The default event handler fired when the user mouses over the context element.", "guessedname": "onContextMouseOver", "guessedtype": "function"}, "doHide": {"description": "Sets the timeout for the auto-dismiss delay, which by default is 5 seconds, meaning that a tooltip will automatically dismiss itself after 5 seconds of being displayed.", "guessedname": "doHide", "guessedtype": "function"}, "onContextMouseOut": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe current DOM event"}, {"type": "Object", "name": "obj", "description": "\tThe object argument"}], "description": "The default event handler fired when the user mouses out of the context element.", "guessedname": "onContextMouseOut", "guessedtype": "function"}, "configContainer": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"container\" property is changed.", "guessedname": "configContainer", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Tooltip <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Tooltip"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Tooltip. See configuration documentation for more details."}], "description": "The Tooltip initialization method. This method is automatically called by the constructor. A Tooltip is automatically rendered by the init method, and it also is set to be invisible by default, and constrained to viewport by default as well.", "guessedname": "init", "guessedtype": "function"}, "onContextMouseMove": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe current DOM event"}, {"type": "Object", "name": "obj", "description": "\tThe object argument"}], "description": "The default event handler fired when the user moves the mouse while over the context element.", "guessedname": "onContextMouseMove", "guessedtype": "function"}, "configText": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"text\" property is changed.", "guessedname": "configText", "guessedtype": "function"}, "preventOverlay": {"params": [{"type": "Number", "name": "pageX", "description": "\tThe x coordinate position of the mouse pointer"}, {"type": "Number", "name": "pageY", "description": "\tThe y coordinate position of the mouse pointer"}], "description": "Fired when the Tooltip is moved, this event handler is used to prevent the Tooltip from overlapping with its context element.", "guessedname": "preventOverlap", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Tooltip"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "configContext": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"context\" property is changed.", "guessedname": "configContext", "guessedtype": "function"}}, "extends": "YAHOO.widget.Overlay", "superclass": "YAHOO.widget.Overlay", "file": "Tooltip.js", "guessedtype": "function", "shortname": "Tooltip", "properties": {"YAHOO.widget.Tooltip.CSS_TOOLTIP": {"description": "Constant representing the Tooltip CSS class", "static": "", "guessedname": "CSS_TOOLTIP", "guessedtype": "property", "type": "String", "final": ""}, "showProcId": {"type": "int", "description": "The unique process ID associated with the thread responsible for showing the Tooltip.", "guessedname": "showProcId", "guessedtype": "property"}}, "description": "Tooltip is an implementation of Overlay that behaves like an OS tooltip, displaying when the user mouses over a particular element, and disappearing on mouse out."}}, "modules": {"logger": {"name": "logger", "title": "Logger Widget", "classlist": ["YAHOO.widget.Logger", "YAHOO.widget.LogMsg", "YAHOO.widget.LogReader", "YAHOO.widget.LogWriter"], "filelist": ["Logger.js", "LogMsg.js", "LogReader.js", "LogWriter.js"], "optional": "dragdrop", "requires": "yahoo, event, dom", "description": "The Logger widget provides a simple way to read or write log messages in\r\nJavaScript code. Integration with the YUI Library's debug builds allow\r\nimplementers to access under-the-hood events, errors, and debugging messages.\r\nOutput may be read through a LogReader console and\/or output to a browser\r\nconsole."}, "container": {"name": "container", "title": "Container", "classlist": ["YAHOO.util.Config", "YAHOO.widget.ContainerEffect", "YAHOO.widget.Dialog", "YAHOO.util.KeyListener", "YAHOO.widget.Module", "YAHOO.widget.Overlay", "YAHOO.widget.OverlayManager", "YAHOO.widget.Panel", "YAHOO.widget.SimpleDialog", "YAHOO.widget.Tooltip"], "filelist": ["Config.js", "ContainerEffect.js", "Dialog.js", "KeyListener.js", "Module.js", "Overlay.js", "OverlayManager.js", "Panel.js", "SimpleDialog.js", "Tooltip.js"], "requires": "yahoo,dom,event,dragdrop,animation", "description": "The Container family of components is designed to enable developers to create different kinds of content-containing modules on the web. Module and Overlay are the most basic containers, and they can be used directly or extended to build custom containers. Also part of the Container family are four UI controls that extend Module and Overlay: Tooltip, Panel, Dialog, and SimpleDialog."}, "dom": {"classlist": ["YAHOO.util.Dom", "YAHOO.util.Region", "YAHOO.util.Point"], "name": "dom", "filelist": ["Dom.js", "Region.js"], "description": "The dom module provides helper methods for manipulating Dom elements."}, "tabview": {"classlist": ["YAHOO.util.Attribute", "YAHOO.util.AttributeProvider", "YAHOO.util.Element", "YAHOO.widget.Tab", "YAHOO.widget.TabView"], "name": "tabview", "filelist": ["Attribute.js", "AttributeProvider.js", "Element.js", "Lang.js", "Tab.js", "TabView.js"], "description": "The tabview module provides a widget for managing content bound to tabs."}, "yahoo": {"classlist": ["YAHOO"], "title": "YAHOO Global", "name": "yahoo", "filelist": ["YAHOO.js"], "description": "The YAHOO object is the single global object used by YUI Library.  It\ncontains utility function for setting up namespaces, inheritance, and\nlogging.  YAHOO.util, YAHOO.widget, and YAHOO.example are namespaces\ncreated automatically for and used by the library."}, "autocomplete": {"name": "autocomplete", "title": "AutoComplete Widget", "classlist": ["YAHOO.widget.AutoComplete", "YAHOO.widget.DataSource", "YAHOO.widget.DS_XHR", "YAHOO.widget.DS_JSFunction", "YAHOO.widget.DS_JSArray"], "filelist": ["AutoComplete.js", "DataSource.js"], "optional": "animation, connection, json", "requires": "yahoo, dom, event, datasource", "description": "The AutoComplete control provides the front-end logic for text-entry suggestion and\ncompletion functionality."}, "slider": {"name": "slider", "title": "Slider Widget", "classlist": ["YAHOO.widget.Slider", "YAHOO.widget.SliderThumb"], "requires": "yahoo,dom,dragdrop,event", "filelist": ["Slider.js", "SliderThumb.js"], "optional": "animation", "description": "The Slider component is a UI control that enables the user to adjust \nvalues in a finite range along one or two axes. Typically, the Slider \ncontrol is used in a web application as a rich, visual replacement \nfor an input box that takes a number as input. The Slider control can \nalso easily accommodate a second dimension, providing x,y output for \na selection point chosen from a rectangular region."}, "connection": {"classlist": ["YAHOO.util.Connect"], "name": "connection", "filelist": ["connection.js"], "description": "The Connection Manager provides a simplified interface to the XMLHttpRequest\nobject.  It handles cross-browser instantiantion of XMLHttpRequest, negotiates the\ninteractive states and server response, returning the results to a pre-defined\ncallback you create."}, "animation": {"classlist": ["YAHOO.util.Anim", "YAHOO.util.AnimMgr", "YAHOO.util.Bezier", "YAHOO.util.ColorAnim", "YAHOO.util.Easing", "YAHOO.util.Motion", "YAHOO.util.Scroll"], "name": "animation", "filelist": ["Anim.js", "AnimMgr.js", "Bezier.js", "ColorAnim.js", "Easing.js", "Motion.js", "Scroll.js"], "description": "The animation module provides allows effects to be added to HTMLElements."}, "dragdrop": {"name": "dragdrop", "title": "Drag and Drop", "classlist": ["YAHOO.util.DragDrop", "YAHOO.util.DragDropMgr", "YAHOO.util.DragDropMgr.ElementWrapper", "YAHOO.util.DD", "YAHOO.util.DDProxy", "YAHOO.util.DDTarget"], "filelist": ["DragDrop.js", "DragDropMgr.js", "DD.js", "DDProxy.js", "DDTarget.js"], "requires": "yahoo,dom,event", "description": "The drag and drop utility provides a framework for building drag and drop\napplications.  In addition to enabling drag and drop for specific elements,\nthe drag and drop elements are tracked by the manager class, and the\ninteractions between the various elements are tracked during the drag and\nthe implementing code is notified about these important moments."}, "menu": {"name": "menu", "title": "Menu Library", "classlist": ["YAHOO.widget.ContextMenu", "YAHOO.widget.ContextMenuItem", "YAHOO.widget.Menu", "YAHOO.widget.Menubar", "YAHOO.widget.MenuBarItem", "YAHOO.widget.MenuItem", "YAHOO.widget.MenuManager", "YAHOO.widget.MenuModule", "YAHOO.widget.MenuModuleItem"], "filelist": ["contextmenu.js", "contextmenuitem.js", "menu.js", "menubar.js", "menubaritem.js", "menuitem.js", "menumanager.js", "menumodule.js", "menumoduleitem.js"], "requires": "Event, Dom, Container", "description": "<p>The Menu Library features a collection of widgets that make \nit easy to add menus to your website or web application.  With the Menu \nLibrary you can create website fly-out menus, customized context menus, or \napplication-style menu bars with just a small amount of scripting.<\/p>\n<ul>\n<li>Screen-reader accessibility.<\/li>\n<li>Keyboard and mouse navigation.<\/li>\n<li>A rich event model that provides access to all of a menu's \ninteresting moments.<\/li>\n<li>Support for \n<a href=\"http:\/\/en.wikipedia.org\/wiki\/Progressive_Enhancement\">Progressive\nEnhancement<\/a>; Menus can be created from simple, \nsemantic markup on the page or purely through JavaScript.<\/li>\n<\/ul>"}, "calendar": {"name": "calendar", "title": "Calendar", "classlist": ["YAHOO.widget.Calendar", "YAHOO.widget.Calendar_Core", "YAHOO.widget.CalendarGroup", "YAHOO.widget.Calendar2up", "YAHOO.widget.DateMath"], "filelist": ["Calendar.js", "CalendarGroup.js", "DateMath.js"], "requires": "yahoo,dom,event", "description": "The Calendar component is a UI control that enables users to choose one or more dates from a graphical calendar presented in a one-month (\"one-up\") or two-month (\"two-up\") interface. Calendars are generated entirely via script and can be navigated without any page refreshes."}, "treeview": {"name": "treeview", "title": "TreeView Widget", "classlist": ["YAHOO.widget.HTMLNode", "YAHOO.widget.MenuNode", "YAHOO.widget.Node", "YAHOO.widget.RootNode", "YAHOO.widget.TextNode", "YAHOO.widget.TreeView", "YAHOO.widget.TVAnim", "YAHOO.widget.TVFadeIn", "YAHOO.widget.TVFadeOut"], "filelist": ["HTMLNode.js", "MenuNode.js", "Node.js", "RootNode.js", "TextNode.js", "TreeView.js", "TVAnim.js", "TVFadeIn.js", "TVFadeOut.js"], "optional": "animation", "requires": "yahoo", "description": "The treeview widget is a generic tree building tool."}, "event": {"name": "event", "title": "Event Utility", "classlist": ["YAHOO.util.CustomEvent", "YAHOO.util.Subscriber", "YAHOO.util.Event", "YAHOO.util.EventProvider"], "filelist": ["CustomEvent.js", "Event.js", "EventProvider.js"], "requires": "yahoo", "description": "The Event Utility provides utilities for managing DOM Events and tools\nfor building event systems"}}, "namespaces": ["YAHOO.util", "YAHOO.widget"], "filemap": {"contextmenu.js": {"classlist": ["YAHOO.widget.ContextMenu"], "name": "contextmenu.js", "module": "menu"}, "EventProvider.js": {"classlist": ["YAHOO.util.EventProvider"], "name": "EventProvider.js", "module": "event"}, "YAHOO.js": {"classlist": ["YAHOO"], "name": "YAHOO.js", "module": "yahoo"}, "KeyListener.js": {"classlist": ["YAHOO.util.KeyListener"], "name": "KeyListener.js", "module": "container"}, "DataSource.js": {"classlist": ["YAHOO.widget.DataSource", "YAHOO.widget.DS_XHR", "YAHOO.widget.DS_JSFunction", "YAHOO.widget.DS_JSArray"], "name": "DataSource.js", "module": "autocomplete"}, "OverlayManager.js": {"classlist": ["YAHOO.widget.OverlayManager"], "name": "OverlayManager.js", "module": "container"}, "MenuNode.js": {"classlist": ["YAHOO.widget.MenuNode"], "name": "MenuNode.js", "module": "treeview"}, "TVFadeOut.js": {"classlist": ["YAHOO.widget.TVFadeOut"], "name": "TVFadeOut.js", "module": "treeview"}, "AutoComplete.js": {"classlist": ["YAHOO.widget.AutoComplete"], "name": "AutoComplete.js", "module": "autocomplete"}, "Lang.js": {"classlist": [], "name": "Lang.js", "module": "tabview"}, "Dom.js": {"classlist": ["YAHOO.util.Dom"], "name": "Dom.js", "module": "dom"}, "contextmenuitem.js": {"classlist": ["YAHOO.widget.ContextMenuItem"], "name": "contextmenuitem.js", "module": "menu"}, "LogReader.js": {"classlist": ["YAHOO.widget.LogReader"], "name": "LogReader.js", "module": "logger"}, "Tab.js": {"classlist": ["YAHOO.widget.Tab"], "name": "Tab.js", "module": "tabview"}, "Panel.js": {"classlist": ["YAHOO.widget.Panel"], "name": "Panel.js", "module": "container"}, "AnimMgr.js": {"classlist": ["YAHOO.util.AnimMgr"], "name": "AnimMgr.js", "module": "animation"}, "Motion.js": {"classlist": ["YAHOO.util.Motion"], "name": "Motion.js", "module": "animation"}, "Slider.js": {"classlist": ["YAHOO.widget.Slider"], "name": "Slider.js", "module": "slider"}, "Config.js": {"classlist": ["YAHOO.util.Config"], "name": "Config.js", "module": "container"}, "menubar.js": {"classlist": ["YAHOO.widget.Menubar"], "name": "menubar.js", "module": "menu"}, "Dialog.js": {"classlist": ["YAHOO.widget.Dialog"], "name": "Dialog.js", "module": "container"}, "TextNode.js": {"classlist": ["YAHOO.widget.TextNode"], "name": "TextNode.js", "module": "treeview"}, "menu.js": {"classlist": ["YAHOO.widget.Menu"], "name": "menu.js", "module": "menu"}, "DDTarget.js": {"classlist": ["YAHOO.util.DDTarget"], "name": "DDTarget.js", "module": "dragdrop"}, "DD.js": {"classlist": ["YAHOO.util.DD"], "name": "DD.js", "module": "dragdrop"}, "CustomEvent.js": {"classlist": ["YAHOO.util.CustomEvent", "YAHOO.util.Subscriber"], "name": "CustomEvent.js", "module": "event"}, "HTMLNode.js": {"classlist": ["YAHOO.widget.HTMLNode"], "name": "HTMLNode.js", "module": "treeview"}, "menumanager.js": {"classlist": ["YAHOO.widget.MenuManager"], "name": "menumanager.js", "module": "menu"}, "SimpleDialog.js": {"classlist": ["YAHOO.widget.SimpleDialog"], "name": "SimpleDialog.js", "module": "container"}, "menumodule.js": {"classlist": ["YAHOO.widget.MenuModule"], "name": "menumodule.js", "module": "menu"}, "Module.js": {"classlist": ["YAHOO.widget.Module"], "name": "Module.js", "module": "container"}, "menumoduleitem.js": {"classlist": ["YAHOO.widget.MenuModuleItem"], "name": "menumoduleitem.js", "module": "menu"}, "Scroll.js": {"classlist": ["YAHOO.util.Scroll"], "name": "Scroll.js", "module": "animation"}, "ColorAnim.js": {"classlist": ["YAHOO.util.ColorAnim"], "name": "ColorAnim.js", "module": "animation"}, "DragDropMgr.js": {"classlist": ["YAHOO.util.DragDropMgr", "YAHOO.util.DragDropMgr.ElementWrapper"], "name": "DragDropMgr.js", "module": "dragdrop"}, "ContainerEffect.js": {"classlist": ["YAHOO.widget.ContainerEffect"], "name": "ContainerEffect.js", "module": "container"}, "Anim.js": {"classlist": ["YAHOO.util.Anim"], "name": "Anim.js", "module": "animation"}, "LogWriter.js": {"classlist": ["YAHOO.widget.LogWriter"], "name": "LogWriter.js", "module": "logger"}, "menuitem.js": {"classlist": ["YAHOO.widget.MenuItem"], "name": "menuitem.js", "module": "menu"}, "LogMsg.js": {"classlist": ["YAHOO.widget.LogMsg"], "name": "LogMsg.js", "module": "logger"}, "TVFadeIn.js": {"classlist": ["YAHOO.widget.TVFadeIn"], "name": "TVFadeIn.js", "module": "treeview"}, "Event.js": {"classlist": ["YAHOO.util.Event"], "name": "Event.js", "module": "event"}, "TreeView.js": {"classlist": ["YAHOO.widget.TreeView"], "name": "TreeView.js", "module": "treeview"}, "connection.js": {"classlist": ["YAHOO.util.Connect"], "name": "connection.js", "module": "connection"}, "Overlay.js": {"classlist": ["YAHOO.widget.Overlay"], "name": "Overlay.js", "module": "container"}, "DragDrop.js": {"classlist": ["YAHOO.util.DragDrop"], "name": "DragDrop.js", "module": "dragdrop"}, "AttributeProvider.js": {"classlist": ["YAHOO.util.AttributeProvider"], "name": "AttributeProvider.js", "module": "tabview"}, "Element.js": {"classlist": ["YAHOO.util.Element"], "name": "Element.js", "module": "tabview"}, "Easing.js": {"classlist": ["YAHOO.util.Easing"], "name": "Easing.js", "module": "animation"}, "Tooltip.js": {"classlist": ["YAHOO.widget.Tooltip"], "name": "Tooltip.js", "module": "container"}, "Region.js": {"classlist": ["YAHOO.util.Region", "YAHOO.util.Point"], "name": "Region.js", "module": "dom"}, "Bezier.js": {"classlist": ["YAHOO.util.Bezier"], "name": "Bezier.js", "module": "animation"}, "TabView.js": {"classlist": ["YAHOO.widget.TabView"], "name": "TabView.js", "module": "tabview"}, "menubaritem.js": {"classlist": ["YAHOO.widget.MenuBarItem"], "name": "menubaritem.js", "module": "menu"}, "Node.js": {"classlist": ["YAHOO.widget.Node"], "name": "Node.js", "module": "treeview"}, "DDProxy.js": {"classlist": ["YAHOO.util.DDProxy"], "name": "DDProxy.js", "module": "dragdrop"}, "DateMath.js": {"classlist": ["YAHOO.widget.DateMath"], "name": "DateMath.js", "module": "calendar"}, "CalendarGroup.js": {"classlist": ["YAHOO.widget.CalendarGroup", "YAHOO.widget.Calendar2up"], "name": "CalendarGroup.js", "module": "calendar"}, "RootNode.js": {"classlist": ["YAHOO.widget.RootNode"], "name": "RootNode.js", "module": "treeview"}, "Logger.js": {"classlist": ["YAHOO.widget.Logger"], "name": "Logger.js", "module": "logger"}, "TVAnim.js": {"classlist": ["YAHOO.widget.TVAnim"], "name": "TVAnim.js", "module": "treeview"}, "SliderThumb.js": {"classlist": ["YAHOO.widget.SliderThumb"], "name": "SliderThumb.js", "module": "slider"}, "Attribute.js": {"classlist": ["YAHOO.util.Attribute"], "name": "Attribute.js", "module": "tabview"}, "Calendar.js": {"classlist": ["YAHOO.widget.Calendar", "YAHOO.widget.Calendar_Core"], "name": "Calendar.js", "module": "calendar"}}}